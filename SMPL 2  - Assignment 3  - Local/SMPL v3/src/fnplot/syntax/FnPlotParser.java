
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 24 00:14:21 EST 2019
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 24 00:14:21 EST 2019
  */
public class FnPlotParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\031\005\000\002\033\005\000" +
    "\002\033\003\000\002\032\005\000\002\032\003\000\002" +
    "\035\010\000\002\036\006\000\002\036\006\000\002\037" +
    "\006\000\002\037\006\000\002\040\006\000\002\040\011" +
    "\000\002\040\011\000\002\034\006\000\002\034\005\000" +
    "\002\041\010\000\002\042\005\000\002\042\005\000\002" +
    "\025\010\000\002\025\007\000\002\021\003\000\002\022" +
    "\005\000\002\022\003\000\002\022\003\000\002\026\006" +
    "\000\002\026\010\000\002\023\003\000\002\024\005\000" +
    "\002\024\003\000\002\024\003\000\002\027\014\000\002" +
    "\030\003\000\002\006\006\000\002\011\005\000\002\007" +
    "\004\000\002\007\003\000\002\010\005\000\002\010\003" +
    "\000\002\005\006\000\002\005\006\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\020" +
    "\005\000\002\020\003\000\002\016\003\000\002\016\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\005\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\054\004\017\006\023\010\026\011\047\014" +
    "\020\022\046\024\043\031\022\040\040\041\013\042\016" +
    "\044\045\045\035\046\041\047\034\050\050\051\024\052" +
    "\052\064\005\066\015\067\044\001\002\000\004\002\260" +
    "\001\002\000\052\004\017\006\023\010\026\011\047\014" +
    "\020\022\046\024\043\031\022\040\040\041\013\042\016" +
    "\044\045\045\035\046\041\047\034\050\050\051\024\064" +
    "\005\066\015\067\063\001\002\000\022\005\ufff3\012\ufff3" +
    "\023\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\065\ufff3\001" +
    "\002\000\024\005\ufff6\012\ufff6\023\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\031\245\032\ufff6\065\ufff6\001\002\000\022\005" +
    "\ufff9\012\ufff9\023\ufff9\026\ufff9\027\ufff9\030\ufff9\032\ufff9" +
    "\065\ufff9\001\002\000\056\002\001\004\017\006\023\010" +
    "\026\011\047\014\020\022\046\024\043\031\022\040\040" +
    "\041\013\042\016\044\045\045\035\046\041\047\034\050" +
    "\050\051\024\052\052\064\005\066\015\067\044\001\002" +
    "\000\060\002\ufffd\004\ufffd\006\ufffd\010\ufffd\011\ufffd\014" +
    "\ufffd\022\ufffd\024\ufffd\025\ufffd\031\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\064\ufffd\066\ufffd\067\ufffd\001\002\000\004" +
    "\004\242\001\002\000\022\005\uffef\012\uffef\023\uffef\026" +
    "\uffef\027\uffef\030\uffef\032\uffef\065\uffef\001\002\000\042" +
    "\005\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\021\uffbc\023\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\063\uffbc\065\uffbc\001\002\000\004\004\237\001" +
    "\002\000\052\004\017\006\023\010\026\011\047\014\020" +
    "\022\046\024\043\031\022\040\040\041\013\042\016\044" +
    "\045\045\035\046\041\047\034\050\050\051\024\064\005" +
    "\066\015\067\063\001\002\000\004\066\231\001\002\000" +
    "\022\005\ufff2\012\ufff2\023\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\032\ufff2\065\ufff2\001\002\000\056\004\017\006\023\010" +
    "\026\011\047\014\020\022\046\024\043\026\uffb6\031\022" +
    "\032\uffb6\040\040\041\013\042\016\044\045\045\035\046" +
    "\041\047\034\050\050\051\024\064\005\066\015\067\063" +
    "\001\002\000\004\004\222\001\002\000\004\004\215\001" +
    "\002\000\022\005\ufff1\012\ufff1\023\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\032\ufff1\065\ufff1\001\002\000\052\004\017\006" +
    "\023\010\026\011\047\014\020\022\046\024\043\031\022" +
    "\040\040\041\013\042\016\044\045\045\035\046\041\047" +
    "\034\050\050\051\024\064\005\066\015\067\063\001\002" +
    "\000\022\005\ufff8\012\ufff8\023\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\032\ufff8\065\ufff8\001\002\000\042\005\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\023" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\063\uffb8" +
    "\065\uffb8\001\002\000\024\005\ufff5\012\ufff5\023\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\032\ufff5\063\202\065\ufff5\001\002" +
    "\000\022\005\ufff0\012\ufff0\023\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\032\ufff0\065\ufff0\001\002\000\004\027\201\001\002" +
    "\000\004\043\173\001\002\000\004\004\170\001\002\000" +
    "\022\005\ufff4\012\ufff4\023\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\032\ufff4\065\ufff4\001\002\000\036\005\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\145\016\146\017\144\023\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\065\uffc3\001\002\000" +
    "\004\004\163\001\002\000\004\043\155\001\002\000\030" +
    "\005\uffee\012\uffee\013\141\014\142\023\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\140\032\uffee\065\uffee\001\002\000\054" +
    "\004\017\006\023\010\026\011\047\014\020\022\046\024" +
    "\043\031\022\040\040\041\013\042\016\044\045\045\035" +
    "\046\041\047\034\050\050\051\024\052\052\064\005\066" +
    "\015\067\044\001\002\000\030\004\064\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\132\021\uffb9\027\uffb9\031" +
    "\uffb9\063\uffb9\001\002\000\004\004\127\001\002\000\006" +
    "\023\uffb6\067\115\001\002\000\022\005\uffce\012\uffce\023" +
    "\uffce\026\uffce\027\uffce\030\uffce\032\uffce\065\uffce\001\002" +
    "\000\004\004\101\001\002\000\022\005\ufffb\012\ufffb\023" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\032\ufffb\065\ufffb\001\002" +
    "\000\004\067\076\001\002\000\042\005\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\021\060\023\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\063\061\065" +
    "\uffbd\001\002\000\022\005\ufffa\012\ufffa\023\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\032\ufffa\065\ufffa\001\002\000\036\005" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\023\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\065" +
    "\uffbf\001\002\000\060\002\ufffe\004\ufffe\006\ufffe\010\ufffe" +
    "\011\ufffe\014\ufffe\022\ufffe\024\ufffe\025\ufffe\031\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\064\ufffe\066\ufffe\067\ufffe\001" +
    "\002\000\042\005\uffba\012\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\021\uffba\023\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\063\uffba\065\uffba\001\002\000\012" +
    "\004\017\014\020\066\015\067\063\001\002\000\052\004" +
    "\017\006\023\010\026\011\047\014\020\022\046\024\043" +
    "\031\022\040\040\041\013\042\016\044\045\045\035\046" +
    "\041\047\034\050\050\051\024\064\005\066\015\067\063" +
    "\001\002\000\022\005\uffdd\012\uffdd\023\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\032\uffdd\065\uffdd\001\002\000\044\004\064" +
    "\005\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\021\uffb9\023\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\063\uffb9\065\uffb9\001\002\000\056\004\017\005" +
    "\uffb6\006\023\010\026\011\047\014\020\022\046\024\043" +
    "\026\uffb6\031\022\040\040\041\013\042\016\044\045\045" +
    "\035\046\041\047\034\050\050\051\024\064\005\066\015" +
    "\067\063\001\002\000\010\005\uffd0\026\uffd0\032\uffd0\001" +
    "\002\000\010\005\uffd3\026\072\032\uffd3\001\002\000\004" +
    "\005\071\001\002\000\010\005\uffd1\026\uffd1\032\uffd1\001" +
    "\002\000\042\005\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\021\uffd5\023\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\063\uffd5\065\uffd5\001\002\000\052" +
    "\004\017\006\023\010\026\011\047\014\020\022\046\024" +
    "\043\031\022\040\040\041\013\042\016\044\045\045\035" +
    "\046\041\047\034\050\050\051\024\064\005\066\015\067" +
    "\063\001\002\000\010\005\uffd2\026\uffd2\032\uffd2\001\002" +
    "\000\040\005\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\021\060\023\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\065\uffbd\001\002\000\036\005\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\023\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\065\uffbe\001" +
    "\002\000\052\004\017\006\023\010\026\011\047\014\020" +
    "\022\046\024\043\031\022\040\040\041\013\042\016\044" +
    "\045\045\035\046\041\047\034\050\050\051\024\064\005" +
    "\066\015\067\063\001\002\000\004\027\100\001\002\000" +
    "\060\002\uffc6\004\uffc6\006\uffc6\010\uffc6\011\uffc6\014\uffc6" +
    "\022\uffc6\024\uffc6\025\uffc6\031\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\064\uffc6\066\uffc6\067\uffc6\001\002\000\010\005" +
    "\uffb6\026\uffb6\067\105\001\002\000\004\005\110\001\002" +
    "\000\006\005\uffd9\026\106\001\002\000\006\005\uffd6\026" +
    "\uffd6\001\002\000\006\005\uffd7\026\uffd7\001\002\000\004" +
    "\067\107\001\002\000\006\005\uffd8\026\uffd8\001\002\000" +
    "\052\004\017\006\023\010\026\011\047\014\020\022\046" +
    "\024\043\031\022\040\040\041\013\042\016\044\045\045" +
    "\035\046\041\047\034\050\050\051\024\064\005\066\015" +
    "\067\063\001\002\000\022\005\uffda\012\uffda\023\uffda\026" +
    "\uffda\027\uffda\030\uffda\032\uffda\065\uffda\001\002\000\004" +
    "\023\uffca\001\002\000\006\023\uffb6\026\122\001\002\000" +
    "\004\023\120\001\002\000\004\020\116\001\002\000\052" +
    "\004\017\006\023\010\026\011\047\014\020\022\046\024" +
    "\043\031\022\040\040\041\013\042\016\044\045\045\035" +
    "\046\041\047\034\050\050\051\024\064\005\066\015\067" +
    "\063\001\002\000\006\023\uffcc\026\uffcc\001\002\000\052" +
    "\004\017\006\023\010\026\011\047\014\020\022\046\024" +
    "\043\031\022\040\040\041\013\042\016\044\045\045\035" +
    "\046\041\047\034\050\050\051\024\064\005\066\015\067" +
    "\063\001\002\000\022\005\uffcd\012\uffcd\023\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\032\uffcd\065\uffcd\001\002\000\004\067" +
    "\115\001\002\000\004\023\uffc8\001\002\000\004\023\uffcb" +
    "\001\002\000\006\023\uffb6\026\122\001\002\000\004\023" +
    "\uffc9\001\002\000\056\004\017\005\uffb6\006\023\010\026" +
    "\011\047\014\020\022\046\024\043\026\uffb6\031\022\040" +
    "\040\041\013\042\016\044\045\045\035\046\041\047\034" +
    "\050\050\051\024\064\005\066\015\067\063\001\002\000" +
    "\004\005\131\001\002\000\024\005\uffe0\012\uffe0\023\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\032\uffe0\063\uffe0\065\uffe0\001" +
    "\002\000\052\004\017\006\023\010\026\011\047\014\020" +
    "\022\046\024\043\031\022\040\040\041\013\042\016\044" +
    "\045\045\035\046\041\047\034\050\050\051\024\064\005" +
    "\066\015\067\063\001\002\000\004\027\134\001\002\000" +
    "\060\002\uffc7\004\uffc7\006\uffc7\010\uffc7\011\uffc7\014\uffc7" +
    "\022\uffc7\024\uffc7\025\uffc7\031\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\064\uffc7\066\uffc7\067\uffc7\001\002\000\056\004" +
    "\017\006\023\010\026\011\047\014\020\022\046\024\043" +
    "\025\136\031\022\040\040\041\013\042\016\044\045\045" +
    "\035\046\041\047\034\050\050\051\024\052\052\064\005" +
    "\066\015\067\044\001\002\000\022\005\ufff7\012\ufff7\023" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7\065\ufff7\001\002" +
    "\000\060\002\uffff\004\uffff\006\uffff\010\uffff\011\uffff\014" +
    "\uffff\022\uffff\024\uffff\025\uffff\031\uffff\040\uffff\041\uffff" +
    "\042\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051" +
    "\uffff\052\uffff\064\uffff\066\uffff\067\uffff\001\002\000\012" +
    "\004\017\014\020\066\015\067\063\001\002\000\012\004" +
    "\017\014\020\066\015\067\063\001\002\000\012\004\017" +
    "\014\020\066\015\067\063\001\002\000\036\005\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\145\016\146\017\144\023\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\065\uffc4\001" +
    "\002\000\012\004\017\014\020\066\015\067\063\001\002" +
    "\000\012\004\017\014\020\066\015\067\063\001\002\000" +
    "\012\004\017\014\020\066\015\067\063\001\002\000\036" +
    "\005\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\023\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\065\uffc1\001\002\000\036\005\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\023\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\065\uffc2\001\002\000\036\005" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\023\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\065" +
    "\uffc0\001\002\000\036\005\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\145\016\146\017\144\023\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\065\uffc5\001\002\000\010\013\141" +
    "\014\142\032\154\001\002\000\022\005\uffe6\012\uffe6\023" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\065\uffe6\001\002" +
    "\000\004\004\156\001\002\000\052\004\017\006\023\010" +
    "\026\011\047\014\020\022\046\024\043\031\022\040\040" +
    "\041\013\042\016\044\045\045\035\046\041\047\034\050" +
    "\050\051\024\064\005\066\015\067\063\001\002\000\004" +
    "\026\160\001\002\000\052\004\017\006\023\010\026\011" +
    "\047\014\020\022\046\024\043\031\022\040\040\041\013" +
    "\042\016\044\045\045\035\046\041\047\034\050\050\051" +
    "\024\064\005\066\015\067\063\001\002\000\004\005\162" +
    "\001\002\000\022\005\uffe2\012\uffe2\023\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\032\uffe2\065\uffe2\001\002\000\052\004\017" +
    "\006\023\010\026\011\047\014\020\022\046\024\043\031" +
    "\022\040\040\041\013\042\016\044\045\045\035\046\041" +
    "\047\034\050\050\051\024\064\005\066\015\067\063\001" +
    "\002\000\004\026\165\001\002\000\052\004\017\006\023" +
    "\010\026\011\047\014\020\022\046\024\043\031\022\040" +
    "\040\041\013\042\016\044\045\045\035\046\041\047\034" +
    "\050\050\051\024\064\005\066\015\067\063\001\002\000" +
    "\004\005\167\001\002\000\022\005\uffe8\012\uffe8\023\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\032\uffe8\065\uffe8\001\002\000" +
    "\052\004\017\006\023\010\026\011\047\014\020\022\046" +
    "\024\043\031\022\040\040\041\013\042\016\044\045\045" +
    "\035\046\041\047\034\050\050\051\024\064\005\066\015" +
    "\067\063\001\002\000\004\005\172\001\002\000\022\005" +
    "\uffe3\012\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3" +
    "\065\uffe3\001\002\000\004\004\174\001\002\000\052\004" +
    "\017\006\023\010\026\011\047\014\020\022\046\024\043" +
    "\031\022\040\040\041\013\042\016\044\045\045\035\046" +
    "\041\047\034\050\050\051\024\064\005\066\015\067\063" +
    "\001\002\000\004\026\176\001\002\000\052\004\017\006" +
    "\023\010\026\011\047\014\020\022\046\024\043\031\022" +
    "\040\040\041\013\042\016\044\045\045\035\046\041\047" +
    "\034\050\050\051\024\064\005\066\015\067\063\001\002" +
    "\000\004\005\200\001\002\000\022\005\uffe1\012\uffe1\023" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\065\uffe1\001\002" +
    "\000\060\002\ufffc\004\ufffc\006\ufffc\010\ufffc\011\ufffc\014" +
    "\ufffc\022\ufffc\024\ufffc\025\ufffc\031\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\064\ufffc\066\ufffc\067\ufffc\001\002\000\052" +
    "\004\017\006\023\010\026\011\047\014\020\022\046\024" +
    "\043\031\022\040\040\041\013\042\016\044\045\045\035" +
    "\046\041\047\034\050\050\051\024\064\005\066\015\067" +
    "\063\001\002\000\022\005\uffdc\012\uffdc\023\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\032\uffdc\065\uffdc\001\002\000\004\012" +
    "\205\001\002\000\004\067\206\001\002\000\004\023\207" +
    "\001\002\000\004\031\210\001\002\000\006\014\020\066" +
    "\015\001\002\000\004\030\212\001\002\000\006\014\020" +
    "\066\015\001\002\000\004\032\214\001\002\000\022\005" +
    "\uffcf\012\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf" +
    "\065\uffcf\001\002\000\052\004\017\006\023\010\026\011" +
    "\047\014\020\022\046\024\043\031\022\040\040\041\013" +
    "\042\016\044\045\045\035\046\041\047\034\050\050\051" +
    "\024\064\005\066\015\067\063\001\002\000\004\026\217" +
    "\001\002\000\052\004\017\006\023\010\026\011\047\014" +
    "\020\022\046\024\043\031\022\040\040\041\013\042\016" +
    "\044\045\045\035\046\041\047\034\050\050\051\024\064" +
    "\005\066\015\067\063\001\002\000\004\005\221\001\002" +
    "\000\022\005\uffde\012\uffde\023\uffde\026\uffde\027\uffde\030" +
    "\uffde\032\uffde\065\uffde\001\002\000\010\005\uffb6\026\uffb6" +
    "\067\105\001\002\000\004\005\224\001\002\000\004\007" +
    "\225\001\002\000\052\004\017\006\023\010\026\011\047" +
    "\014\020\022\046\024\043\031\022\040\040\041\013\042" +
    "\016\044\045\045\035\046\041\047\034\050\050\051\024" +
    "\064\005\066\015\067\063\001\002\000\022\005\uffdb\012" +
    "\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb\065\uffdb" +
    "\001\002\000\004\032\230\001\002\000\024\005\uffdf\012" +
    "\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\063\uffdf" +
    "\065\uffdf\001\002\000\042\005\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb\023\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\063\uffbb\065\uffbb\001" +
    "\002\000\004\005\233\001\002\000\044\004\234\005\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021" +
    "\uffb7\023\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\063\uffb7\065\uffb7\001\002\000\056\004\017\005\uffb6\006" +
    "\023\010\026\011\047\014\020\022\046\024\043\026\uffb6" +
    "\031\022\040\040\041\013\042\016\044\045\045\035\046" +
    "\041\047\034\050\050\051\024\064\005\066\015\067\063" +
    "\001\002\000\004\005\236\001\002\000\042\005\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4" +
    "\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\063" +
    "\uffd4\065\uffd4\001\002\000\052\004\017\006\023\010\026" +
    "\011\047\014\020\022\046\024\043\031\022\040\040\041" +
    "\013\042\016\044\045\045\035\046\041\047\034\050\050" +
    "\051\024\064\005\066\015\067\063\001\002\000\004\005" +
    "\241\001\002\000\022\005\uffe4\012\uffe4\023\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\032\uffe4\065\uffe4\001\002\000\052\004" +
    "\017\006\023\010\026\011\047\014\020\022\046\024\043" +
    "\031\022\040\040\041\013\042\016\044\045\045\035\046" +
    "\041\047\034\050\050\051\024\064\005\066\015\067\063" +
    "\001\002\000\004\005\244\001\002\000\022\005\uffe5\012" +
    "\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\032\uffe5\065\uffe5" +
    "\001\002\000\012\004\017\014\020\066\015\067\063\001" +
    "\002\000\010\013\141\014\142\032\247\001\002\000\022" +
    "\005\uffe7\012\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7\032" +
    "\uffe7\065\uffe7\001\002\000\006\026\uffeb\065\uffeb\001\002" +
    "\000\010\026\uffe9\030\256\065\uffe9\001\002\000\006\026" +
    "\253\065\254\001\002\000\052\004\017\006\023\010\026" +
    "\011\047\014\020\022\046\024\043\031\022\040\040\041" +
    "\013\042\016\044\045\045\035\046\041\047\034\050\050" +
    "\051\024\064\005\066\015\067\063\001\002\000\024\005" +
    "\uffed\012\uffed\023\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\065\uffed\001\002\000\006\026\uffec\065\uffec\001" +
    "\002\000\052\004\017\006\023\010\026\011\047\014\020" +
    "\022\046\024\043\031\022\040\040\041\013\042\016\044" +
    "\045\045\035\046\041\047\034\050\050\051\024\064\005" +
    "\066\015\067\063\001\002\000\006\026\uffea\065\uffea\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\060\002\003\003\010\004\055\005\011\006" +
    "\026\012\032\013\041\014\036\015\052\016\056\020\054" +
    "\025\050\026\027\027\053\030\007\031\006\034\030\035" +
    "\020\036\024\037\031\040\013\041\005\042\035\001\001" +
    "\000\002\001\001\000\054\006\026\012\250\013\041\014" +
    "\036\015\052\016\056\020\054\025\050\026\027\027\053" +
    "\030\007\031\006\032\247\033\251\034\030\035\020\036" +
    "\024\037\031\040\013\041\005\042\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\004" +
    "\136\005\011\006\026\012\032\013\041\014\036\015\052" +
    "\016\056\020\054\025\050\026\027\027\053\030\007\031" +
    "\006\034\030\035\020\036\024\037\031\040\013\041\005" +
    "\042\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\026\012\231\013\041\014\036\015\052\016\056\020" +
    "\054\025\050\026\027\027\053\030\007\031\006\034\030" +
    "\035\020\036\024\037\031\040\013\041\005\042\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\026" +
    "\012\067\013\041\014\036\015\052\016\056\017\064\020" +
    "\054\023\226\024\065\025\050\026\027\027\053\030\007" +
    "\031\006\034\030\035\020\036\024\037\031\040\013\041" +
    "\005\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\006\026\012\203\013\041\014" +
    "\036\015\052\016\056\020\054\025\050\026\027\027\053" +
    "\030\007\031\006\034\030\035\020\036\024\037\031\040" +
    "\013\041\005\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\134\004\055\005\011\006\026" +
    "\012\032\013\041\014\036\015\052\016\056\020\054\025" +
    "\050\026\027\027\053\030\007\031\006\034\030\035\020" +
    "\036\024\037\031\040\013\041\005\042\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\113\011\112" +
    "\017\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\073\016\056\020\074\026\027\001\001" +
    "\000\050\006\026\012\061\013\041\014\036\015\052\016" +
    "\056\020\054\025\050\026\027\027\053\030\007\031\006" +
    "\034\030\035\020\036\024\037\031\040\013\041\005\042" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\026\012\067\013\041\014\036\015\052\016\056\017" +
    "\064\020\054\023\066\024\065\025\050\026\027\027\053" +
    "\030\007\031\006\034\030\035\020\036\024\037\031\040" +
    "\013\041\005\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\006\026\012\072\013\041\014\036\015\052" +
    "\016\056\020\054\025\050\026\027\027\053\030\007\031" +
    "\006\034\030\035\020\036\024\037\031\040\013\041\005" +
    "\042\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\006\026\012\076\013\041\014\036" +
    "\015\052\016\056\020\054\025\050\026\027\027\053\030" +
    "\007\031\006\034\030\035\020\036\024\037\031\040\013" +
    "\041\005\042\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\103\021\101\022\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\006\026" +
    "\012\110\013\041\014\036\015\052\016\056\020\054\025" +
    "\050\026\027\027\053\030\007\031\006\034\030\035\020" +
    "\036\024\037\031\040\013\041\005\042\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\123\017\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\026\012\116\013\041\014\036\015\052\016\056\020\054" +
    "\025\050\026\027\027\053\030\007\031\006\034\030\035" +
    "\020\036\024\037\031\040\013\041\005\042\035\001\001" +
    "\000\002\001\001\000\050\006\026\012\120\013\041\014" +
    "\036\015\052\016\056\020\054\025\050\026\027\027\053" +
    "\030\007\031\006\034\030\035\020\036\024\037\031\040" +
    "\013\041\005\042\035\001\001\000\002\001\001\000\004" +
    "\011\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\125\017\122\001\001\000\002\001\001\000\056" +
    "\006\026\012\067\013\041\014\036\015\052\016\056\017" +
    "\064\020\054\023\127\024\065\025\050\026\027\027\053" +
    "\030\007\031\006\034\030\035\020\036\024\037\031\040" +
    "\013\041\005\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\006\026\012\132\013\041\014\036\015" +
    "\052\016\056\020\054\025\050\026\027\027\053\030\007" +
    "\031\006\034\030\035\020\036\024\037\031\040\013\041" +
    "\005\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\004\136\005\011\006\026\012\032\013\041\014" +
    "\036\015\052\016\056\020\054\025\050\026\027\027\053" +
    "\030\007\031\006\034\030\035\020\036\024\037\031\040" +
    "\013\041\005\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\152\014\036\015\073\016\056\020" +
    "\054\026\027\001\001\000\014\014\151\015\073\016\056" +
    "\020\054\026\027\001\001\000\014\014\142\015\073\016" +
    "\056\020\054\026\027\001\001\000\002\001\001\000\012" +
    "\015\073\016\056\020\150\026\027\001\001\000\012\015" +
    "\073\016\056\020\147\026\027\001\001\000\012\015\073" +
    "\016\056\020\146\026\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\026\012\156\013\041\014\036\015\052\016\056\020\054" +
    "\025\050\026\027\027\053\030\007\031\006\034\030\035" +
    "\020\036\024\037\031\040\013\041\005\042\035\001\001" +
    "\000\002\001\001\000\050\006\026\012\160\013\041\014" +
    "\036\015\052\016\056\020\054\025\050\026\027\027\053" +
    "\030\007\031\006\034\030\035\020\036\024\037\031\040" +
    "\013\041\005\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\006\026\012\163\013\041\014\036\015" +
    "\052\016\056\020\054\025\050\026\027\027\053\030\007" +
    "\031\006\034\030\035\020\036\024\037\031\040\013\041" +
    "\005\042\035\001\001\000\002\001\001\000\050\006\026" +
    "\012\165\013\041\014\036\015\052\016\056\020\054\025" +
    "\050\026\027\027\053\030\007\031\006\034\030\035\020" +
    "\036\024\037\031\040\013\041\005\042\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\026\012\170" +
    "\013\041\014\036\015\052\016\056\020\054\025\050\026" +
    "\027\027\053\030\007\031\006\034\030\035\020\036\024" +
    "\037\031\040\013\041\005\042\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\006\026" +
    "\012\174\013\041\014\036\015\052\016\056\020\054\025" +
    "\050\026\027\027\053\030\007\031\006\034\030\035\020" +
    "\036\024\037\031\040\013\041\005\042\035\001\001\000" +
    "\002\001\001\000\050\006\026\012\176\013\041\014\036" +
    "\015\052\016\056\020\054\025\050\026\027\027\053\030" +
    "\007\031\006\034\030\035\020\036\024\037\031\040\013" +
    "\041\005\042\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\006\026\012\202\013\041" +
    "\014\036\015\052\016\056\020\054\025\050\026\027\027" +
    "\053\030\007\031\006\034\030\035\020\036\024\037\031" +
    "\040\013\041\005\042\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\210\001\001\000\002\001\001\000" +
    "\004\016\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\006\026\012\215\013\041\014\036\015\052\016" +
    "\056\020\054\025\050\026\027\027\053\030\007\031\006" +
    "\034\030\035\020\036\024\037\031\040\013\041\005\042" +
    "\035\001\001\000\002\001\001\000\050\006\026\012\217" +
    "\013\041\014\036\015\052\016\056\020\054\025\050\026" +
    "\027\027\053\030\007\031\006\034\030\035\020\036\024" +
    "\037\031\040\013\041\005\042\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\103\021\222\022\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\026\012\225\013\041\014\036\015\052\016\056\020\054" +
    "\025\050\026\027\027\053\030\007\031\006\034\030\035" +
    "\020\036\024\037\031\040\013\041\005\042\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\026\012\067\013\041\014\036\015\052\016\056\017" +
    "\064\020\054\023\234\024\065\025\050\026\027\027\053" +
    "\030\007\031\006\034\030\035\020\036\024\037\031\040" +
    "\013\041\005\042\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\006\026\012\237\013\041\014\036\015" +
    "\052\016\056\020\054\025\050\026\027\027\053\030\007" +
    "\031\006\034\030\035\020\036\024\037\031\040\013\041" +
    "\005\042\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\006\026\012\242\013\041\014\036\015\052\016" +
    "\056\020\054\025\050\026\027\027\053\030\007\031\006" +
    "\034\030\035\020\036\024\037\031\040\013\041\005\042" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\245\014\036\015\073\016\056\020\054\026\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\006\026\012" +
    "\250\013\041\014\036\015\052\016\056\020\054\025\050" +
    "\026\027\027\053\030\007\031\006\032\254\034\030\035" +
    "\020\036\024\037\031\040\013\041\005\042\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\026\012" +
    "\256\013\041\014\036\015\052\016\056\020\054\025\050" +
    "\026\027\027\053\030\007\031\006\034\030\035\020\036" +
    "\024\037\031\040\013\041\005\042\035\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= funCall 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // number ::= MINUS INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(-1*ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // power ::= factor POW power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpPow(f, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= term MOD power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= term DIV power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= term MUL power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // definition ::= DEF VARIABLE expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // letExp ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
            
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clearExp ::= CLEAR 
            {
              Exp RESULT =null;
		RESULT = new ExpClear(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("clearExp",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // plotExp ::= PLOT expression FOR VARIABLE IN LSQR number COLON number RSQR 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		FnPlotValue< ? > low = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		FnPlotValue< ? > high = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
					RESULT = new ExpPlot(body, v, low.doubleValue(), high.doubleValue());
					
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("plotExp",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expL ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expL ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(e);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expL ::= expL COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(e);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expListE ::= expL 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funCall ::= LPAREN expression RPAREN LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp fd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCall(fd, el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funCall ::= VARIABLE LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCall(v, el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramL ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramL ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <String> ls = new ArrayList<>();
			ls.add(v);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramL ::= paramL COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(v);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramListE ::= paramL 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funDef ::= PROC LPAREN paramListE RPAREN expression 
            {
              Exp RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpFunction (pl, body) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funDef",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funDef ::= FUN LPAREN paramListE RPAREN MAPS expression 
            {
              Exp RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpFunction (pl, body) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funDef",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // concat ::= list CONCAT expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpConcat(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // concat ::= factor CONCAT expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpConcat(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp proc = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp list = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpListCall(proc, list); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("call",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // list ::= LSQR expListE RSQR 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list ::= LIST LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // size ::= EQUAL QUESTION LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e1, e2, "equal"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("size",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // size ::= EQV QUESTION LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e1, e2, "eqv"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("size",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // size ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(v, "size"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("size",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // indexP ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(p, new ExpLit(FnPlotValue.make(1))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexP",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // indexP ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(p, new ExpLit(FnPlotValue.make(0))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexP",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // indexV ::= arithExp LSQR arithExp RSQR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(v , a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexV",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // indexV ::= vector LSQR arithExp RSQR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(v , a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexV",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpPair(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // subvector ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // subvector ::= expression COLON expression 
            {
              Exp RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpSubVector(size, e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vectorExpL ::= subvector 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(e);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vectorExpL",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vectorExpL ::= vectorExpL COMMA subvector 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(e);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vectorExpL",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vector ::= LVEC vectorExpL RVEC 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpVector(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vector",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= size 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= indexP 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= indexV 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= call 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= concat 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= list 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= clearExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= plotExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= funDef 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

