/* The following code was generated by JFlex 1.6.1 */

package fnplot.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>FnPlotLexer</tt>
 */
public class FnPlotLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\1\1\0\1\2\1\5\22\0\1\2\1\17"+
    "\1\65\1\51\1\0\1\13\1\0\1\10\1\31\1\32\1\7\1\11"+
    "\1\35\1\12\1\64\1\6\2\53\10\4\1\30\1\63\1\20\1\16"+
    "\1\21\1\56\1\15\6\55\24\3\1\47\1\66\1\50\1\14\1\3"+
    "\1\0\1\22\1\52\1\44\1\24\1\45\1\36\1\3\1\62\1\46"+
    "\2\3\1\43\1\40\1\23\1\25\1\41\1\60\1\26\1\42\1\27"+
    "\1\37\1\61\1\3\1\54\1\3\1\57\1\33\1\0\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\0\1\5\4\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\10\3\1\14"+
    "\1\15\1\0\1\16\1\17\1\20\2\21\1\22\16\0"+
    "\1\23\1\24\1\0\1\25\4\3\1\26\1\27\17\3"+
    "\1\30\1\31\1\32\1\33\1\34\2\0\1\35\2\0"+
    "\1\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\0\1\52\3\0"+
    "\2\24\2\0\1\53\1\54\2\3\1\55\1\56\7\3"+
    "\1\57\1\3\1\60\2\3\1\61\3\3\1\62\1\0"+
    "\1\63\1\64\1\65\2\21\1\66\1\67\1\0\1\70"+
    "\1\0\1\71\1\72\1\3\1\73\1\74\1\3\1\75"+
    "\1\3\1\76\1\77\1\100\1\101\1\3\1\102\1\3"+
    "\1\0\1\64\1\65\1\21\1\24\1\103\2\3\1\104"+
    "\1\3\1\105\1\106\1\0\1\64\1\65\1\3\1\25"+
    "\1\3\1\107\1\110\1\64\1\65\1\111\1\112\1\64"+
    "\1\65\1\64\1\65\1\64\1\65\1\64\1\65\30\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\156\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u0294\0\u0294"+
    "\0\u0294\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\u0294\0\u04ba\0\u0294\0\u0294\0\u0294"+
    "\0\u04f1\0\u0528\0\u0294\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0294\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u0294\0\u0294\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\245\0\245\0\u0294\0\u0294\0\u0294\0\u0d1b"+
    "\0\u0d52\0\u0294\0\u0d89\0\u0dc0\0\u0df7\0\u0294\0\u0294\0\u0294"+
    "\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294"+
    "\0\u0294\0\u0e2e\0\u0294\0\u0e65\0\u0e9c\0\u0ed3\0\u0294\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\245\0\245\0\u0faf\0\u0fe6\0\245\0\245"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\245"+
    "\0\u119e\0\245\0\u11d5\0\u120c\0\245\0\u1243\0\u127a\0\u12b1"+
    "\0\245\0\u12e8\0\u0294\0\u131f\0\u1356\0\u138d\0\u13c4\0\u0294"+
    "\0\u0294\0\u13fb\0\u0294\0\u1432\0\u1469\0\245\0\u14a0\0\245"+
    "\0\245\0\u14d7\0\245\0\u150e\0\245\0\245\0\245\0\245"+
    "\0\u1545\0\245\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u04f1"+
    "\0\u0294\0\u168f\0\u16c6\0\u16fd\0\u1734\0\245\0\245\0\u176b"+
    "\0\u17a2\0\u17d9\0\u1810\0\245\0\u1847\0\245\0\u0294\0\u187e"+
    "\0\u18b5\0\245\0\245\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u0294\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u0294";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\3\1\7\3\0"+
    "\1\10\7\0\1\5\1\11\1\12\1\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\5"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\5\1\6\2\5\1\36\4\5\1\37"+
    "\1\0\1\40\1\0\1\41\1\0\3\41\1\0\1\42"+
    "\56\41\1\43\1\44\6\0\1\45\1\46\1\0\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\2\0\1\61\44\0\2\5\15\0\6\5\6\0"+
    "\11\5\3\0\4\5\1\0\4\5\10\0\1\6\46\0"+
    "\1\6\10\0\1\62\10\0\1\63\1\64\100\0\1\65"+
    "\50\0\2\5\15\0\3\5\1\66\2\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\6\5"+
    "\6\0\7\5\1\67\1\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\6\5\6\0\7\5\1\70\1\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\6\5"+
    "\6\0\11\5\3\0\4\5\1\0\3\5\1\71\22\0"+
    "\1\72\31\0\1\73\110\0\2\5\15\0\3\5\1\74"+
    "\2\5\6\0\1\5\1\75\7\5\3\0\4\5\1\0"+
    "\4\5\7\0\2\5\15\0\1\76\5\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\1\77"+
    "\3\5\1\100\1\5\6\0\5\5\1\101\3\5\3\0"+
    "\4\5\1\0\4\5\7\0\2\5\15\0\6\5\6\0"+
    "\1\5\1\102\6\5\1\103\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\6\5\6\0\7\5\1\104\1\105"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\1\106"+
    "\1\5\1\107\3\5\6\0\5\5\1\110\3\5\3\0"+
    "\4\5\1\0\4\5\7\0\2\5\15\0\6\5\6\0"+
    "\5\5\1\111\3\5\3\0\4\5\1\0\1\5\1\112"+
    "\2\5\7\0\2\5\15\0\1\5\1\113\4\5\6\0"+
    "\1\114\10\5\3\0\4\5\1\0\4\5\34\0\1\115"+
    "\65\0\1\116\6\0\1\117\1\120\4\0\1\121\1\122"+
    "\4\0\1\123\1\0\1\124\12\0\1\41\1\0\3\41"+
    "\1\0\57\41\2\0\1\41\1\0\3\41\1\0\1\63"+
    "\1\125\55\41\25\0\1\126\3\0\1\127\35\0\1\130"+
    "\2\0\2\131\2\0\1\131\62\0\2\132\2\0\1\132"+
    "\62\0\2\133\2\0\1\133\62\0\2\134\2\0\1\134"+
    "\62\0\2\135\2\0\1\135\62\0\2\136\2\0\1\136"+
    "\62\0\2\137\2\0\1\137\62\0\2\140\2\0\1\140"+
    "\77\0\1\54\51\0\2\141\2\0\1\141\10\0\1\142"+
    "\51\0\2\143\2\0\1\143\10\0\1\144\73\0\1\145"+
    "\71\0\1\146\44\0\1\62\46\0\1\62\13\0\1\63"+
    "\1\147\3\63\1\150\61\63\7\151\1\152\57\151\3\0"+
    "\2\5\15\0\5\5\1\153\6\0\11\5\3\0\4\5"+
    "\1\0\4\5\7\0\2\5\15\0\6\5\6\0\1\154"+
    "\10\5\3\0\4\5\1\0\4\5\7\0\2\5\15\0"+
    "\1\155\5\5\6\0\11\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\6\5\6\0\7\5\1\156\1\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\4\5"+
    "\1\157\1\5\6\0\11\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\1\5\1\160\4\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\6\5"+
    "\6\0\3\5\1\161\5\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\6\5\6\0\10\5\1\162\3\0"+
    "\4\5\1\0\4\5\7\0\2\5\15\0\3\5\1\163"+
    "\2\5\6\0\10\5\1\164\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\3\5\1\165\2\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\6\5"+
    "\6\0\11\5\3\0\1\166\3\5\1\0\4\5\7\0"+
    "\2\5\15\0\6\5\6\0\11\5\3\0\4\5\1\0"+
    "\1\167\3\5\7\0\2\5\15\0\5\5\1\170\6\0"+
    "\11\5\3\0\4\5\1\0\4\5\7\0\2\5\15\0"+
    "\6\5\6\0\4\5\1\171\4\5\3\0\4\5\1\0"+
    "\4\5\7\0\2\5\15\0\4\5\1\172\1\5\6\0"+
    "\4\5\1\173\1\174\3\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\4\5\1\175\1\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\6\5"+
    "\6\0\7\5\1\176\1\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\6\5\6\0\4\5\1\177\4\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\6\5"+
    "\6\0\1\5\1\200\7\5\3\0\4\5\1\0\2\5"+
    "\1\201\1\5\10\0\1\202\15\0\1\202\1\0\1\202"+
    "\11\0\1\202\5\0\2\202\4\0\2\202\1\0\1\202"+
    "\11\0\10\203\1\0\56\203\53\0\1\204\17\0\1\205"+
    "\15\0\1\205\1\0\1\205\11\0\1\205\5\0\2\205"+
    "\4\0\2\205\1\0\1\205\11\0\1\206\1\151\3\206"+
    "\1\151\1\206\1\207\55\206\2\151\1\0\2\210\2\0"+
    "\1\210\62\0\2\211\2\0\1\211\105\0\1\212\43\0"+
    "\2\213\2\0\1\213\62\0\1\147\65\0\7\151\1\214"+
    "\57\151\6\0\1\147\1\152\62\0\2\5\15\0\2\5"+
    "\1\215\3\5\6\0\11\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\1\5\1\216\4\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\6\5"+
    "\6\0\4\5\1\217\4\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\4\5\1\220\1\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\6\5"+
    "\6\0\6\5\1\221\2\5\3\0\4\5\1\0\4\5"+
    "\7\0\2\5\15\0\1\5\1\222\4\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\5\5"+
    "\1\223\6\0\11\5\3\0\4\5\1\0\4\5\7\0"+
    "\2\5\15\0\6\5\6\0\4\5\1\224\4\5\3\0"+
    "\4\5\1\0\4\5\7\0\2\5\15\0\6\5\6\0"+
    "\7\5\1\225\1\5\3\0\4\5\1\0\4\5\7\0"+
    "\2\5\15\0\5\5\1\226\6\0\11\5\3\0\4\5"+
    "\1\0\4\5\7\0\2\5\15\0\6\5\6\0\7\5"+
    "\1\227\1\5\3\0\4\5\1\0\4\5\7\0\2\5"+
    "\15\0\6\5\6\0\5\5\1\230\3\5\3\0\4\5"+
    "\1\0\4\5\7\0\2\5\15\0\1\231\5\5\6\0"+
    "\11\5\3\0\4\5\1\0\4\5\7\0\2\5\15\0"+
    "\6\5\6\0\7\5\1\232\1\5\3\0\4\5\1\0"+
    "\4\5\7\0\2\5\15\0\1\233\5\5\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\10\0\1\234\15\0\1\234"+
    "\1\0\1\234\11\0\1\234\5\0\2\234\4\0\2\234"+
    "\1\0\1\234\64\0\1\235\17\0\1\236\15\0\1\236"+
    "\1\0\1\236\11\0\1\236\5\0\2\236\4\0\2\236"+
    "\1\0\1\236\11\0\1\206\1\151\3\206\1\151\1\206"+
    "\1\237\55\206\2\151\1\41\1\0\3\41\1\0\1\240"+
    "\1\207\55\41\3\0\2\241\2\0\1\241\61\0\6\151"+
    "\1\147\1\214\57\151\3\0\2\5\15\0\6\5\6\0"+
    "\10\5\1\242\3\0\4\5\1\0\4\5\7\0\2\5"+
    "\15\0\5\5\1\243\6\0\11\5\3\0\4\5\1\0"+
    "\4\5\7\0\2\5\15\0\5\5\1\244\6\0\11\5"+
    "\3\0\4\5\1\0\4\5\7\0\2\5\15\0\5\5"+
    "\1\245\6\0\11\5\3\0\4\5\1\0\4\5\7\0"+
    "\2\5\15\0\4\5\1\246\1\5\6\0\11\5\3\0"+
    "\4\5\1\0\4\5\7\0\2\5\15\0\6\5\6\0"+
    "\5\5\1\247\3\5\3\0\4\5\1\0\4\5\10\0"+
    "\1\250\15\0\1\250\1\0\1\250\11\0\1\250\5\0"+
    "\2\250\4\0\2\250\1\0\1\250\64\0\1\251\17\0"+
    "\1\252\15\0\1\252\1\0\1\252\11\0\1\252\5\0"+
    "\2\252\4\0\2\252\1\0\1\252\11\0\1\206\1\151"+
    "\3\206\1\151\1\240\1\237\55\206\2\151\3\0\2\5"+
    "\15\0\1\5\1\253\4\5\6\0\11\5\3\0\4\5"+
    "\1\0\4\5\7\0\2\5\15\0\3\5\1\254\2\5"+
    "\6\0\11\5\3\0\4\5\1\0\4\5\7\0\2\5"+
    "\15\0\6\5\6\0\5\5\1\255\3\5\3\0\4\5"+
    "\1\0\4\5\7\0\2\5\15\0\4\5\1\256\1\5"+
    "\6\0\11\5\3\0\4\5\1\0\4\5\10\0\1\257"+
    "\15\0\1\257\1\0\1\257\11\0\1\257\5\0\2\257"+
    "\4\0\2\257\1\0\1\257\64\0\1\260\17\0\1\261"+
    "\15\0\1\261\1\0\1\261\11\0\1\261\5\0\2\261"+
    "\4\0\2\261\1\0\1\261\14\0\2\5\15\0\5\5"+
    "\1\262\6\0\11\5\3\0\4\5\1\0\4\5\7\0"+
    "\2\5\15\0\1\5\1\263\4\5\6\0\11\5\3\0"+
    "\4\5\1\0\4\5\57\0\1\264\17\0\1\265\15\0"+
    "\1\265\1\0\1\265\11\0\1\265\5\0\2\265\4\0"+
    "\2\265\1\0\1\265\64\0\1\266\17\0\1\267\15\0"+
    "\1\267\1\0\1\267\11\0\1\267\5\0\2\267\4\0"+
    "\2\267\1\0\1\267\64\0\1\270\17\0\1\271\15\0"+
    "\1\271\1\0\1\271\11\0\1\271\5\0\2\271\4\0"+
    "\2\271\1\0\1\271\64\0\1\272\17\0\1\273\15\0"+
    "\1\273\1\0\1\273\11\0\1\273\5\0\2\273\4\0"+
    "\2\273\1\0\1\273\64\0\1\274\66\0\1\275\66\0"+
    "\1\276\66\0\1\277\66\0\1\300\66\0\1\301\66\0"+
    "\1\302\66\0\1\303\66\0\1\304\66\0\1\305\66\0"+
    "\1\306\66\0\1\307\66\0\1\310\66\0\1\311\66\0"+
    "\1\312\66\0\1\313\66\0\1\314\66\0\1\315\66\0"+
    "\1\316\66\0\1\317\66\0\1\320\66\0\1\321\66\0"+
    "\1\322\66\0\1\323\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\1\0\6\1\5\11\11\1\1\11\1\0"+
    "\3\11\2\1\1\11\16\0\2\1\1\0\1\11\4\1"+
    "\2\11\21\1\3\11\2\0\1\11\2\0\1\1\14\11"+
    "\1\0\1\11\3\0\1\11\1\1\2\0\27\1\1\0"+
    "\1\11\4\1\2\11\1\0\1\11\1\0\17\1\1\0"+
    "\4\1\1\11\6\1\1\0\6\1\1\11\13\1\1\11"+
    "\27\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }

    StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FnPlotLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //skip newline, but reset char counter
			yycolumn = 0;
            }
          case 75: break;
          case 2: 
            { //skip whitespace
            }
          case 76: break;
          case 3: 
            { // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
            }
          case 77: break;
          case 4: 
            { // INTEGER
	       return new Symbol(sym.INTEGER, 
				 new Double(yytext()));
            }
          case 78: break;
          case 5: 
            { return new Symbol(sym.MINUS);
            }
          case 79: break;
          case 6: 
            { return new Symbol(sym.COLON);
            }
          case 80: break;
          case 7: 
            { return new Symbol(sym.LPAREN);
            }
          case 81: break;
          case 8: 
            { return new Symbol(sym.RPAREN);
            }
          case 82: break;
          case 9: 
            { return new Symbol(sym.LBRACE);
            }
          case 83: break;
          case 10: 
            { return new Symbol(sym.RBRACE);
            }
          case 84: break;
          case 11: 
            { return new Symbol(sym.COMMA);
            }
          case 85: break;
          case 12: 
            { return new Symbol(sym.LSQR);
            }
          case 86: break;
          case 13: 
            { return new Symbol(sym.RSQR);
            }
          case 87: break;
          case 14: 
            { return new Symbol(sym.QUESTION);
            }
          case 88: break;
          case 15: 
            { return new Symbol(sym.SEMI);
            }
          case 89: break;
          case 16: 
            { string.setLength(0); yybegin(STRING);
            }
          case 90: break;
          case 17: 
            { string.append( yytext() );
            }
          case 91: break;
          case 18: 
            { yybegin(YYINITIAL); return new Symbol(sym.STRING, string.toString());
            }
          case 92: break;
          case 19: 
            { // FLOAT
	       return new Symbol(sym.INTEGER, 
				 new Double(yytext()));
            }
          case 93: break;
          case 20: 
            { /* ignore */
            }
          case 94: break;
          case 21: 
            { return new Symbol(sym.MAPS);
            }
          case 95: break;
          case 22: 
            { return new Symbol(sym.ASSIGN);
            }
          case 96: break;
          case 23: 
            { return new Symbol(sym.RVEC);
            }
          case 97: break;
          case 24: 
            { return new Symbol(sym.IN);
            }
          case 98: break;
          case 25: 
            { return new Symbol(sym.IF);
            }
          case 99: break;
          case 26: 
            { return new Symbol(sym.LVEC);
            }
          case 100: break;
          case 27: 
            { return new Symbol(sym.BOOL, new Boolean(true));
            }
          case 101: break;
          case 28: 
            { return new Symbol(sym.BOOL, new Boolean(false));
            }
          case 102: break;
          case 29: 
            { return new Symbol(sym.EMPTY);
            }
          case 103: break;
          case 30: 
            { string.append('\n');
            }
          case 104: break;
          case 31: 
            { string.append('\t');
            }
          case 105: break;
          case 32: 
            { string.append('\"');
            }
          case 106: break;
          case 33: 
            { return new Symbol(sym.DIV);
            }
          case 107: break;
          case 34: 
            { return new Symbol(sym.MUL);
            }
          case 108: break;
          case 35: 
            { return new Symbol(sym.PLUS);
            }
          case 109: break;
          case 36: 
            { return new Symbol(sym.SUBTRACT);
            }
          case 110: break;
          case 37: 
            { return new Symbol(sym.MOD);
            }
          case 111: break;
          case 38: 
            { return new Symbol(sym.POW);
            }
          case 112: break;
          case 39: 
            { return new Symbol(sym.CONCAT);
            }
          case 113: break;
          case 40: 
            { return new Symbol(sym.COMPARE, "=");
            }
          case 114: break;
          case 41: 
            { return new Symbol(sym.COMPARE, "<");
            }
          case 115: break;
          case 42: 
            { return new Symbol(sym.COMPARE, ">");
            }
          case 116: break;
          case 43: 
            { return new Symbol(sym.LOGOP, "not");
            }
          case 117: break;
          case 44: 
            { return new Symbol(sym.DEF);
            }
          case 118: break;
          case 45: 
            { return new Symbol(sym.FOR);
            }
          case 119: break;
          case 46: 
            { return new Symbol(sym.FUN);
            }
          case 120: break;
          case 47: 
            { return new Symbol(sym.LET);
            }
          case 121: break;
          case 48: 
            { return new Symbol(sym.CAR);
            }
          case 122: break;
          case 49: 
            { return new Symbol(sym.CDR);
            }
          case 123: break;
          case 50: 
            { return new Symbol(sym.EQV);
            }
          case 124: break;
          case 51: 
            { return new Symbol(sym.CHAR, yytext());
            }
          case 125: break;
          case 52: 
            { return new Symbol(sym.BIN, yytext());
            }
          case 126: break;
          case 53: 
            { return new Symbol(sym.HEX, yytext());
            }
          case 127: break;
          case 54: 
            { return new Symbol(sym.COMPARE, "<=");
            }
          case 128: break;
          case 55: 
            { return new Symbol(sym.COMPARE, ">=");
            }
          case 129: break;
          case 56: 
            { return new Symbol(sym.LOGOP, "or");
            }
          case 130: break;
          case 57: 
            { return new Symbol(sym.READ);
            }
          case 131: break;
          case 58: 
            { return new Symbol(sym.THEN);
            }
          case 132: break;
          case 59: 
            { return new Symbol(sym.PAIR);
            }
          case 133: break;
          case 60: 
            { return new Symbol(sym.PROC);
            }
          case 134: break;
          case 61: 
            { return new Symbol(sym.PLOT);
            }
          case 135: break;
          case 62: 
            { return new Symbol(sym.SIZE);
            }
          case 136: break;
          case 63: 
            { return new Symbol(sym.LIST);
            }
          case 137: break;
          case 64: 
            { return new Symbol(sym.CASE);
            }
          case 138: break;
          case 65: 
            { return new Symbol(sym.CALL);
            }
          case 139: break;
          case 66: 
            { return new Symbol(sym.ELSE);
            }
          case 140: break;
          case 67: 
            { return new Symbol(sym.LOGOP, "and");
            }
          case 141: break;
          case 68: 
            { return new Symbol(sym.PRINT);
            }
          case 142: break;
          case 69: 
            { return new Symbol(sym.CLEAR);
            }
          case 143: break;
          case 70: 
            { return new Symbol(sym.EQUAL);
            }
          case 144: break;
          case 71: 
            { return new Symbol(sym.SUBSTR);
            }
          case 145: break;
          case 72: 
            { return new Symbol(sym.UNI, yytext());
            }
          case 146: break;
          case 73: 
            { return new Symbol(sym.READINT);
            }
          case 147: break;
          case 74: 
            { return new Symbol(sym.PRINTLN);
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
