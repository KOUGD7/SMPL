
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 30 06:33:18 EST 2019
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 30 06:33:18 EST 2019
  */
public class FnPlotParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\060" +
    "\006\000\002\060\006\000\002\060\005\000\002\060\005" +
    "\000\002\057\006\000\002\057\010\000\002\057\006\000" +
    "\002\056\006\000\002\056\006\000\002\056\006\000\002" +
    "\056\010\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\005\000\002\032\012\000\002\033\003" +
    "\000\002\033\003\000\002\052\010\000\002\053\006\000" +
    "\002\055\003\000\002\054\007\000\002\054\005\000\002" +
    "\034\005\000\002\036\005\000\002\036\003\000\002\035" +
    "\005\000\002\035\003\000\002\035\016\000\002\035\014" +
    "\000\002\040\010\000\002\040\003\000\002\041\006\000" +
    "\002\041\006\000\002\042\006\000\002\042\006\000\002" +
    "\043\006\000\002\037\006\000\002\037\005\000\002\044" +
    "\010\000\002\045\005\000\002\045\005\000\002\051\003" +
    "\000\002\051\003\000\002\046\003\000\002\046\003\000" +
    "\002\050\005\000\002\050\004\000\002\050\010\000\002" +
    "\050\010\000\002\050\006\000\002\047\005\000\002\047" +
    "\003\000\002\025\010\000\002\025\007\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\022\003\000" +
    "\002\026\006\000\002\026\010\000\002\023\003\000\002" +
    "\024\005\000\002\024\003\000\002\024\003\000\002\027" +
    "\014\000\002\030\003\000\002\006\006\000\002\011\005" +
    "\000\002\007\004\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\005\006\000\002\005\006\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\020\005\000\002\020\003\000\002\016\003\000" +
    "\002\016\004\000\002\016\003\000\002\016\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\005\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\136\004\027\006\060\010\044\011\021\021" +
    "\072\022\123\024\025\031\104\033\042\034\100\035\114" +
    "\036\043\040\101\041\113\042\022\043\047\044\057\045" +
    "\035\046\124\047\033\050\102\052\056\053\106\054\066" +
    "\055\041\056\007\057\034\061\075\063\121\064\004\066" +
    "\067\067\065\070\052\071\110\072\054\073\070\075\046" +
    "\077\105\103\023\104\053\106\031\107\111\110\050\111" +
    "\032\112\064\113\012\001\002\000\040\005\uffb9\023\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\032\uffb9\051\uffb9\052" +
    "\uffb9\062\uffb9\072\uffb9\074\uffb9\076\uffb9\101\uffb9\106\uffb9" +
    "\001\002\000\144\002\ufffe\004\ufffe\006\ufffe\010\ufffe\011" +
    "\ufffe\021\ufffe\022\ufffe\024\ufffe\025\ufffe\031\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\061\ufffe\063" +
    "\ufffe\064\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe" +
    "\073\ufffe\075\ufffe\077\ufffe\100\ufffe\103\ufffe\104\ufffe\106" +
    "\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113\ufffe\001\002" +
    "\000\056\005\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016" +
    "\uff94\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\051\uff94\052\uff94\062\uff94\072\uff94\074\uff94\076" +
    "\uff94\101\uff94\105\uff94\106\uff94\001\002\000\004\004\u0124" +
    "\001\002\000\034\005\uffe7\023\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\032\uffe7\052\uffe7\062\uffe7\072\uffe7\074\uffe7" +
    "\076\uffe7\101\uffe7\001\002\000\034\005\uffec\023\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\032\uffec\052\uffec\062\uffec" +
    "\072\uffec\074\uffec\076\uffec\101\uffec\001\002\000\062\005" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e" +
    "\023\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\051\uff8e\052\uff8e\060\uff8e\062\uff8e\072\uff8e\074\uff8e" +
    "\076\uff8e\101\uff8e\105\uff8e\106\uff8e\001\002\000\034\005" +
    "\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9" +
    "\052\uffd9\062\uffd9\072\uffd9\074\uffd9\076\uffd9\101\uffd9\001" +
    "\002\000\034\005\ufff9\023\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\032\ufff9\052\ufff9\062\ufff9\072\ufff9\074\ufff9\076" +
    "\ufff9\101\ufff9\001\002\000\034\005\ufff0\023\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\032\ufff0\052\ufff0\062\ufff0\072" +
    "\ufff0\074\ufff0\076\ufff0\101\ufff0\001\002\000\034\005\uffeb" +
    "\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\052" +
    "\uffeb\062\uffeb\072\uffeb\074\uffeb\076\uffeb\101\uffeb\001\002" +
    "\000\040\005\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\032\uffb1\051\uffb1\052\uffb1\062\uffb1\072\uffb1\074\uffb1" +
    "\076\uffb1\101\uffb1\106\uffb1\001\002\000\034\005\uffef\023" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\052\uffef" +
    "\062\uffef\072\uffef\074\uffef\076\uffef\101\uffef\001\002\000" +
    "\034\005\uffa3\023\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\032\uffa3\052\uffa3\062\uffa3\072\uffa3\074\uffa3\076\uffa3\101" +
    "\uffa3\001\002\000\004\004\u011f\001\002\000\062\005\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\020\uff91\023" +
    "\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91" +
    "\051\uff91\052\uff91\060\uff91\062\uff91\072\uff91\074\uff91\076" +
    "\uff91\101\uff91\105\uff91\106\uff91\001\002\000\034\005\ufff1" +
    "\023\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\052" +
    "\ufff1\062\ufff1\072\ufff1\074\ufff1\076\ufff1\101\ufff1\001\002" +
    "\000\136\004\027\006\060\010\044\011\021\021\072\022" +
    "\123\024\025\031\104\033\042\034\100\035\114\036\043" +
    "\040\101\041\113\042\022\043\047\044\057\045\035\046" +
    "\124\047\033\050\102\052\056\053\106\054\066\055\041" +
    "\056\007\057\034\061\075\063\121\064\004\066\067\067" +
    "\065\070\052\071\110\072\054\073\070\075\046\077\105" +
    "\103\023\104\053\106\031\107\111\110\050\111\032\112" +
    "\064\113\012\001\002\000\036\005\ufff4\023\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\032\ufff4\052\ufff4\060\u011b\062" +
    "\ufff4\072\ufff4\074\ufff4\076\ufff4\101\ufff4\001\002\000\134" +
    "\004\027\006\060\010\044\011\021\021\072\022\123\024" +
    "\025\031\104\033\042\034\100\035\114\036\043\040\101" +
    "\041\113\042\022\043\047\044\057\045\035\046\124\050" +
    "\102\052\056\053\106\054\066\055\041\056\007\057\034" +
    "\061\075\063\121\064\004\066\067\067\065\070\052\071" +
    "\110\072\054\073\070\075\046\077\105\103\023\104\126" +
    "\106\031\107\111\110\050\111\032\112\064\113\012\001" +
    "\002\000\034\005\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\032\uffe9\052\uffe9\062\uffe9\072\uffe9\074\uffe9\076" +
    "\uffe9\101\uffe9\001\002\000\022\004\027\021\072\052\056" +
    "\064\004\103\023\104\126\112\064\113\012\001\002\000" +
    "\034\005\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\032\uffd4\052\uffd4\062\uffd4\072\uffd4\074\uffd4\076\uffd4\101" +
    "\uffd4\001\002\000\004\104\u0112\001\002\000\004\004\u0110" +
    "\001\002\000\004\004\u010c\001\002\000\036\005\uffbb\023" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\051\uffbb" +
    "\052\uffbb\062\uffbb\072\uffbb\074\uffbb\076\uffbb\101\uffbb\001" +
    "\002\000\034\005\uffda\023\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\032\uffda\052\uffda\062\uffda\072\uffda\074\uffda\076" +
    "\uffda\101\uffda\001\002\000\034\005\uffee\023\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\032\uffee\052\uffee\062\uffee\072" +
    "\uffee\074\uffee\076\uffee\101\uffee\001\002\000\004\004\u0109" +
    "\001\002\000\034\005\uffc6\023\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\032\uffc6\052\uffc6\062\uffc6\072\uffc6\074\uffc6" +
    "\076\uffc6\101\uffc6\001\002\000\004\004\u0106\001\002\000" +
    "\134\004\027\006\060\010\044\011\021\021\072\022\123" +
    "\024\025\031\104\033\042\034\100\035\114\036\043\040" +
    "\101\041\113\042\022\043\047\044\057\045\035\046\124" +
    "\050\102\052\056\053\106\054\066\055\041\056\007\057" +
    "\034\061\075\063\121\064\004\066\067\067\065\070\052" +
    "\071\110\072\054\073\070\075\046\077\105\103\023\104" +
    "\126\106\031\107\111\110\050\111\032\112\064\113\012" +
    "\001\002\000\034\005\ufff2\023\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\032\ufff2\052\ufff2\062\ufff2\072\ufff2\074\ufff2" +
    "\076\ufff2\101\ufff2\001\002\000\032\004\027\021\072\042" +
    "\022\043\047\044\057\052\056\064\004\103\023\104\126" +
    "\106\031\112\064\113\012\001\002\000\004\004\365\001" +
    "\002\000\034\005\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\032\uffd5\052\uffd5\062\uffd5\072\uffd5\074\uffd5\076" +
    "\uffd5\101\uffd5\001\002\000\034\005\uffed\023\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\032\uffed\052\uffed\062\uffed\072" +
    "\uffed\074\uffed\076\uffed\101\uffed\001\002\000\004\004\362" +
    "\001\002\000\032\004\133\012\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\017\357\020\uff8c\027\uff8c\031\uff8c\060\uff8c" +
    "\105\uff8c\001\002\000\004\104\146\001\002\000\140\002" +
    "\001\004\027\006\060\010\044\011\021\021\072\022\123" +
    "\024\025\031\104\033\042\034\100\035\114\036\043\040" +
    "\101\041\113\042\022\043\047\044\057\045\035\046\124" +
    "\047\033\050\102\052\056\053\106\054\066\055\041\056" +
    "\007\057\034\061\075\063\121\064\004\066\067\067\065" +
    "\070\052\071\110\072\054\073\070\075\046\077\105\103" +
    "\023\104\053\106\031\107\111\110\050\111\032\112\064" +
    "\113\012\001\002\000\040\005\uffb8\023\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\032\uffb8\051\uffb8\052\uffb8\062\uffb8" +
    "\072\uffb8\074\uffb8\076\uffb8\101\uffb8\106\uffb8\001\002\000" +
    "\004\004\347\001\002\000\004\004\335\001\002\000\144" +
    "\002\ufffd\004\ufffd\006\ufffd\010\ufffd\011\ufffd\021\ufffd\022" +
    "\ufffd\024\ufffd\025\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\061\ufffd\063\ufffd\064\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\075\ufffd" +
    "\077\ufffd\100\ufffd\103\ufffd\104\ufffd\106\ufffd\107\ufffd\110" +
    "\ufffd\111\ufffd\112\ufffd\113\ufffd\001\002\000\034\005\ufff8" +
    "\023\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8\052" +
    "\ufff8\062\ufff8\072\ufff8\074\ufff8\076\ufff8\101\ufff8\001\002" +
    "\000\034\005\ufffb\023\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\032\ufffb\052\ufffb\062\ufffb\072\ufffb\074\ufffb\076\ufffb" +
    "\101\ufffb\001\002\000\062\005\uff8f\012\uff8f\013\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\020\uff8f\023\uff8f\025\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\031\uff8f\032\uff8f\051\uff8f\052\uff8f\060" +
    "\uff8f\062\uff8f\072\uff8f\074\uff8f\076\uff8f\101\uff8f\105\uff8f" +
    "\106\uff8f\001\002\000\004\004\332\001\002\000\004\004" +
    "\327\001\002\000\004\004\324\001\002\000\134\004\027" +
    "\006\060\010\044\011\021\021\072\022\123\024\025\031" +
    "\104\033\042\034\100\035\114\036\043\040\101\041\113" +
    "\042\022\043\047\044\057\045\035\046\124\050\102\052" +
    "\056\053\106\054\066\055\041\056\007\057\034\061\075" +
    "\063\121\064\004\066\067\067\065\070\052\071\110\072" +
    "\054\073\070\075\046\077\105\103\023\104\126\106\031" +
    "\107\111\110\050\111\032\112\064\113\012\001\002\000" +
    "\004\002\320\001\002\000\004\103\317\001\002\000\036" +
    "\005\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\314\032\ufff5\052\ufff5\062\ufff5\072\ufff5\074\ufff5\076\ufff5" +
    "\101\ufff5\001\002\000\034\005\uffe8\023\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\032\uffe8\052\uffe8\062\uffe8\072\uffe8" +
    "\074\uffe8\076\uffe8\101\uffe8\001\002\000\134\004\027\006" +
    "\060\010\044\011\021\021\072\022\123\024\025\031\104" +
    "\033\042\034\100\035\114\036\043\040\101\041\113\042" +
    "\022\043\047\044\057\045\035\046\124\050\102\052\056" +
    "\053\106\054\066\055\041\056\007\057\034\061\075\063" +
    "\121\064\004\066\067\067\065\070\052\071\110\072\054" +
    "\073\070\075\046\077\105\103\023\104\126\106\031\107" +
    "\111\110\050\111\032\112\064\113\012\001\002\000\004" +
    "\027\270\001\002\000\034\005\ufffa\023\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\032\ufffa\052\ufffa\062\ufffa\072\ufffa" +
    "\074\ufffa\076\ufffa\101\ufffa\001\002\000\004\004\263\001" +
    "\002\000\004\004\260\001\002\000\032\004\027\021\072" +
    "\042\022\043\047\044\057\052\056\064\004\103\023\104" +
    "\126\106\031\112\064\113\012\001\002\000\056\005\uff98" +
    "\012\uff98\013\uff98\014\204\015\205\016\203\023\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\051\uff98" +
    "\052\uff98\062\uff98\072\uff98\074\uff98\076\uff98\101\uff98\105" +
    "\uff98\106\uff98\001\002\000\140\004\027\006\060\010\044" +
    "\011\021\021\072\022\123\024\025\026\uff89\031\104\032" +
    "\uff89\033\042\034\100\035\114\036\043\040\101\041\113" +
    "\042\022\043\047\044\057\045\035\046\124\050\102\052" +
    "\056\053\106\054\066\055\041\056\007\057\034\061\075" +
    "\063\121\064\004\066\067\067\065\070\052\071\110\072" +
    "\054\073\070\075\046\077\105\103\023\104\126\106\031" +
    "\107\111\110\050\111\032\112\064\113\012\001\002\000" +
    "\136\004\027\006\060\010\044\011\021\021\072\022\123" +
    "\024\025\031\104\033\042\034\100\035\114\036\043\040" +
    "\101\041\113\042\022\043\047\044\057\045\035\046\124" +
    "\047\033\050\102\052\056\053\106\054\066\055\041\056" +
    "\007\057\034\061\075\063\121\064\004\066\067\067\065" +
    "\070\052\071\110\072\054\073\070\075\046\077\105\103" +
    "\023\104\053\106\031\107\111\110\050\111\032\112\064" +
    "\113\012\001\002\000\004\024\233\001\002\000\062\005" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d" +
    "\023\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\051\uff8d\052\uff8d\060\uff8d\062\uff8d\072\uff8d\074\uff8d" +
    "\076\uff8d\101\uff8d\105\uff8d\106\uff8d\001\002\000\004\004" +
    "\226\001\002\000\036\005\uffd8\012\224\023\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\032\uffd8\052\uffd8\062\uffd8\072" +
    "\uffd8\074\uffd8\076\uffd8\101\uffd8\001\002\000\044\005\uffe6" +
    "\012\200\013\201\023\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\221\032\uffe6\052\uffe6\062\uffe6\072\uffe6\074\uffe6" +
    "\076\uffe6\101\uffe6\105\177\001\002\000\004\004\216\001" +
    "\002\000\004\004\213\001\002\000\034\005\ufff3\023\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\052\ufff3\062" +
    "\ufff3\072\ufff3\074\ufff3\076\ufff3\101\ufff3\001\002\000\034" +
    "\005\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\032" +
    "\uffea\052\uffea\062\uffea\072\uffea\074\uffea\076\uffea\101\uffea" +
    "\001\002\000\040\005\uffba\023\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\032\uffba\051\uffba\052\uffba\062\uffba\072\uffba" +
    "\074\uffba\076\uffba\101\uffba\106\174\001\002\000\062\005" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\020\uff8b" +
    "\023\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032" +
    "\uff8b\051\uff8b\052\uff8b\060\uff8b\062\uff8b\072\uff8b\074\uff8b" +
    "\076\uff8b\101\uff8b\105\uff8b\106\uff8b\001\002\000\004\004" +
    "\165\001\002\000\056\005\uff92\012\uff92\013\uff92\014\uff92" +
    "\015\uff92\016\uff92\020\160\023\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\032\uff92\052\uff92\060\161\062\uff92" +
    "\072\uff92\074\uff92\076\uff92\101\uff92\105\uff92\001\002\000" +
    "\006\023\uff89\104\146\001\002\000\004\004\125\001\002" +
    "\000\134\004\027\006\060\010\044\011\021\021\072\022" +
    "\123\024\025\031\104\033\042\034\100\035\114\036\043" +
    "\040\101\041\113\042\022\043\047\044\057\045\035\046" +
    "\124\050\102\052\056\053\106\054\066\055\041\056\007" +
    "\057\034\061\075\063\121\064\004\066\067\067\065\070" +
    "\052\071\110\072\054\073\070\075\046\077\105\103\023" +
    "\104\126\106\031\107\111\110\050\111\032\112\064\113" +
    "\012\001\002\000\064\004\133\005\uff8c\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\020\uff8c\023\uff8c\025\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\051\uff8c\052\uff8c" +
    "\060\uff8c\062\uff8c\072\uff8c\074\uff8c\076\uff8c\101\uff8c\105" +
    "\uff8c\106\uff8c\001\002\000\004\026\130\001\002\000\134" +
    "\004\027\006\060\010\044\011\021\021\072\022\123\024" +
    "\025\031\104\033\042\034\100\035\114\036\043\040\101" +
    "\041\113\042\022\043\047\044\057\045\035\046\124\050" +
    "\102\052\056\053\106\054\066\055\041\056\007\057\034" +
    "\061\075\063\121\064\004\066\067\067\065\070\052\071" +
    "\110\072\054\073\070\075\046\077\105\103\023\104\126" +
    "\106\031\107\111\110\050\111\032\112\064\113\012\001" +
    "\002\000\004\005\132\001\002\000\034\005\uffbe\023\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\032\uffbe\052\uffbe\062" +
    "\uffbe\072\uffbe\074\uffbe\076\uffbe\101\uffbe\001\002\000\140" +
    "\004\027\005\uff89\006\060\010\044\011\021\021\072\022" +
    "\123\024\025\026\uff89\031\104\033\042\034\100\035\114" +
    "\036\043\040\101\041\113\042\022\043\047\044\057\045" +
    "\035\046\124\050\102\052\056\053\106\054\066\055\041" +
    "\056\007\057\034\061\075\063\121\064\004\066\067\067" +
    "\065\070\052\071\110\072\054\073\070\075\046\077\105" +
    "\103\023\104\126\106\031\107\111\110\050\111\032\112" +
    "\064\113\012\001\002\000\010\005\uffa8\026\141\032\uffa8" +
    "\001\002\000\010\005\uffa6\026\uffa6\032\uffa6\001\002\000" +
    "\004\005\140\001\002\000\010\005\uffa5\026\uffa5\032\uffa5" +
    "\001\002\000\062\005\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\020\uffaa\023\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\051\uffaa\052\uffaa\060\uffaa\062" +
    "\uffaa\072\uffaa\074\uffaa\076\uffaa\101\uffaa\105\uffaa\106\uffaa" +
    "\001\002\000\134\004\027\006\060\010\044\011\021\021" +
    "\072\022\123\024\025\031\104\033\042\034\100\035\114" +
    "\036\043\040\101\041\113\042\022\043\047\044\057\045" +
    "\035\046\124\050\102\052\056\053\106\054\066\055\041" +
    "\056\007\057\034\061\075\063\121\064\004\066\067\067" +
    "\065\070\052\071\110\072\054\073\070\075\046\077\105" +
    "\103\023\104\126\106\031\107\111\110\050\111\032\112" +
    "\064\113\012\001\002\000\010\005\uffa7\026\uffa7\032\uffa7" +
    "\001\002\000\004\023\uff9f\001\002\000\006\023\uff89\026" +
    "\153\001\002\000\004\023\151\001\002\000\004\017\147" +
    "\001\002\000\134\004\027\006\060\010\044\011\021\021" +
    "\072\022\123\024\025\031\104\033\042\034\100\035\114" +
    "\036\043\040\101\041\113\042\022\043\047\044\057\045" +
    "\035\046\124\050\102\052\056\053\106\054\066\055\041" +
    "\056\007\057\034\061\075\063\121\064\004\066\067\067" +
    "\065\070\052\071\110\072\054\073\070\075\046\077\105" +
    "\103\023\104\126\106\031\107\111\110\050\111\032\112" +
    "\064\113\012\001\002\000\010\023\uffa1\026\uffa1\101\uffa1" +
    "\001\002\000\134\004\027\006\060\010\044\011\021\021" +
    "\072\022\123\024\025\031\104\033\042\034\100\035\114" +
    "\036\043\040\101\041\113\042\022\043\047\044\057\045" +
    "\035\046\124\050\102\052\056\053\106\054\066\055\041" +
    "\056\007\057\034\061\075\063\121\064\004\066\067\067" +
    "\065\070\052\071\110\072\054\073\070\075\046\077\105" +
    "\103\023\104\126\106\031\107\111\110\050\111\032\112" +
    "\064\113\012\001\002\000\034\005\uffa2\023\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\032\uffa2\052\uffa2\062\uffa2\072" +
    "\uffa2\074\uffa2\076\uffa2\101\uffa2\001\002\000\004\104\146" +
    "\001\002\000\004\023\uff9d\001\002\000\004\023\uffa0\001" +
    "\002\000\006\023\uff89\026\153\001\002\000\004\023\uff9e" +
    "\001\002\000\016\004\027\021\072\103\023\104\126\112" +
    "\064\113\012\001\002\000\134\004\027\006\060\010\044" +
    "\011\021\021\072\022\123\024\025\031\104\033\042\034" +
    "\100\035\114\036\043\040\101\041\113\042\022\043\047" +
    "\044\057\045\035\046\124\050\102\052\056\053\106\054" +
    "\066\055\041\056\007\057\034\061\075\063\121\064\004" +
    "\066\067\067\065\070\052\071\110\072\054\073\070\075" +
    "\046\077\105\103\023\104\126\106\031\107\111\110\050" +
    "\111\032\112\064\113\012\001\002\000\034\005\uffbd\023" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd\052\uffbd" +
    "\062\uffbd\072\uffbd\074\uffbd\076\uffbd\101\uffbd\001\002\000" +
    "\056\005\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\023\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\051\uff93\052\uff93\062\uff93\072\uff93\074\uff93\076\uff93" +
    "\101\uff93\105\uff93\106\uff93\001\002\000\060\005\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\020\160\023\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\051" +
    "\uff92\052\uff92\062\uff92\072\uff92\074\uff92\076\uff92\101\uff92" +
    "\105\uff92\106\uff92\001\002\000\134\004\027\006\060\010" +
    "\044\011\021\021\072\022\123\024\025\031\104\033\042" +
    "\034\100\035\114\036\043\040\101\041\113\042\022\043" +
    "\047\044\057\045\035\046\124\050\102\052\056\053\106" +
    "\054\066\055\041\056\007\057\034\061\075\063\121\064" +
    "\004\066\067\067\065\070\052\071\110\072\054\073\070" +
    "\075\046\077\105\103\023\104\126\106\031\107\111\110" +
    "\050\111\032\112\064\113\012\001\002\000\004\026\167" +
    "\001\002\000\134\004\027\006\060\010\044\011\021\021" +
    "\072\022\123\024\025\031\104\033\042\034\100\035\114" +
    "\036\043\040\101\041\113\042\022\043\047\044\057\045" +
    "\035\046\124\050\102\052\056\053\106\054\066\055\041" +
    "\056\007\057\034\061\075\063\121\064\004\066\067\067" +
    "\065\070\052\071\110\072\054\073\070\075\046\077\105" +
    "\103\023\104\126\106\031\107\111\110\050\111\032\112" +
    "\064\113\012\001\002\000\004\026\171\001\002\000\134" +
    "\004\027\006\060\010\044\011\021\021\072\022\123\024" +
    "\025\031\104\033\042\034\100\035\114\036\043\040\101" +
    "\041\113\042\022\043\047\044\057\045\035\046\124\050" +
    "\102\052\056\053\106\054\066\055\041\056\007\057\034" +
    "\061\075\063\121\064\004\066\067\067\065\070\052\071" +
    "\110\072\054\073\070\075\046\077\105\103\023\104\126" +
    "\106\031\107\111\110\050\111\032\112\064\113\012\001" +
    "\002\000\004\005\173\001\002\000\034\005\uffd6\023\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\032\uffd6\052\uffd6\062" +
    "\uffd6\072\uffd6\074\uffd6\076\uffd6\101\uffd6\001\002\000\022" +
    "\004\027\021\072\052\056\064\004\103\023\104\126\112" +
    "\064\113\012\001\002\000\036\005\uffb7\023\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\032\uffb7\051\uffb7\052\uffb7\062" +
    "\uffb7\072\uffb7\074\uffb7\076\uffb7\101\uffb7\001\002\000\010" +
    "\012\200\013\201\105\177\001\002\000\016\004\027\021" +
    "\072\103\023\104\126\112\064\113\012\001\002\000\016" +
    "\004\027\021\072\103\023\104\126\112\064\113\012\001" +
    "\002\000\016\004\027\021\072\103\023\104\126\112\064" +
    "\113\012\001\002\000\056\005\uff99\012\uff99\013\uff99\014" +
    "\204\015\205\016\203\023\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\051\uff99\052\uff99\062\uff99\072" +
    "\uff99\074\uff99\076\uff99\101\uff99\105\uff99\106\uff99\001\002" +
    "\000\016\004\027\021\072\103\023\104\126\112\064\113" +
    "\012\001\002\000\016\004\027\021\072\103\023\104\126" +
    "\112\064\113\012\001\002\000\016\004\027\021\072\103" +
    "\023\104\126\112\064\113\012\001\002\000\056\005\uff96" +
    "\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\023\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\051\uff96" +
    "\052\uff96\062\uff96\072\uff96\074\uff96\076\uff96\101\uff96\105" +
    "\uff96\106\uff96\001\002\000\056\005\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\023\uff97\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\051\uff97\052\uff97\062\uff97" +
    "\072\uff97\074\uff97\076\uff97\101\uff97\105\uff97\106\uff97\001" +
    "\002\000\056\005\uff95\012\uff95\013\uff95\014\uff95\015\uff95" +
    "\016\uff95\023\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031" +
    "\uff95\032\uff95\051\uff95\052\uff95\062\uff95\072\uff95\074\uff95" +
    "\076\uff95\101\uff95\105\uff95\106\uff95\001\002\000\056\005" +
    "\uff9a\012\uff9a\013\uff9a\014\204\015\205\016\203\023\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\051" +
    "\uff9a\052\uff9a\062\uff9a\072\uff9a\074\uff9a\076\uff9a\101\uff9a" +
    "\105\uff9a\106\uff9a\001\002\000\044\005\uffb2\012\200\013" +
    "\201\023\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\032\uffb2" +
    "\051\uffb2\052\uffb2\062\uffb2\072\uffb2\074\uffb2\076\uffb2\101" +
    "\uffb2\106\uffb2\001\002\000\134\004\027\006\060\010\044" +
    "\011\021\021\072\022\123\024\025\031\104\033\042\034" +
    "\100\035\114\036\043\040\101\041\113\042\022\043\047" +
    "\044\057\045\035\046\124\050\102\052\056\053\106\054" +
    "\066\055\041\056\007\057\034\061\075\063\121\064\004" +
    "\066\067\067\065\070\052\071\110\072\054\073\070\075" +
    "\046\077\105\103\023\104\126\106\031\107\111\110\050" +
    "\111\032\112\064\113\012\001\002\000\004\005\215\001" +
    "\002\000\034\005\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\032\uffc3\052\uffc3\062\uffc3\072\uffc3\074\uffc3\076" +
    "\uffc3\101\uffc3\001\002\000\134\004\027\006\060\010\044" +
    "\011\021\021\072\022\123\024\025\031\104\033\042\034" +
    "\100\035\114\036\043\040\101\041\113\042\022\043\047" +
    "\044\057\045\035\046\124\050\102\052\056\053\106\054" +
    "\066\055\041\056\007\057\034\061\075\063\121\064\004" +
    "\066\067\067\065\070\052\071\110\072\054\073\070\075" +
    "\046\077\105\103\023\104\126\106\031\107\111\110\050" +
    "\111\032\112\064\113\012\001\002\000\004\005\220\001" +
    "\002\000\034\005\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\032\uffc1\052\uffc1\062\uffc1\072\uffc1\074\uffc1\076" +
    "\uffc1\101\uffc1\001\002\000\016\004\027\021\072\103\023" +
    "\104\126\112\064\113\012\001\002\000\010\012\200\013" +
    "\201\032\223\001\002\000\034\005\uffc4\023\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\032\uffc4\052\uffc4\062\uffc4\072" +
    "\uffc4\074\uffc4\076\uffc4\101\uffc4\001\002\000\004\107\225" +
    "\001\002\000\034\005\uffd7\023\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\032\uffd7\052\uffd7\062\uffd7\072\uffd7\074\uffd7" +
    "\076\uffd7\101\uffd7\001\002\000\134\004\027\006\060\010" +
    "\044\011\021\021\072\022\123\024\025\031\104\033\042" +
    "\034\100\035\114\036\043\040\101\041\113\042\022\043" +
    "\047\044\057\045\035\046\124\050\102\052\056\053\106" +
    "\054\066\055\041\056\007\057\034\061\075\063\121\064" +
    "\004\066\067\067\065\070\052\071\110\072\054\073\070" +
    "\075\046\077\105\103\023\104\126\106\031\107\111\110" +
    "\050\111\032\112\064\113\012\001\002\000\004\026\230" +
    "\001\002\000\134\004\027\006\060\010\044\011\021\021" +
    "\072\022\123\024\025\031\104\033\042\034\100\035\114" +
    "\036\043\040\101\041\113\042\022\043\047\044\057\045" +
    "\035\046\124\050\102\052\056\053\106\054\066\055\041" +
    "\056\007\057\034\061\075\063\121\064\004\066\067\067" +
    "\065\070\052\071\110\072\054\073\070\075\046\077\105" +
    "\103\023\104\126\106\031\107\111\110\050\111\032\112" +
    "\064\113\012\001\002\000\004\005\232\001\002\000\034" +
    "\005\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\032" +
    "\uffdb\052\uffdb\062\uffdb\072\uffdb\074\uffdb\076\uffdb\101\uffdb" +
    "\001\002\000\032\004\027\021\072\042\022\043\047\044" +
    "\057\052\056\064\004\103\023\104\126\106\031\112\064" +
    "\113\012\001\002\000\004\025\245\001\002\000\006\025" +
    "\uffd1\026\241\001\002\000\004\030\237\001\002\000\134" +
    "\004\027\006\060\010\044\011\021\021\072\022\123\024" +
    "\025\031\104\033\042\034\100\035\114\036\043\040\101" +
    "\041\113\042\022\043\047\044\057\045\035\046\124\050" +
    "\102\052\056\053\106\054\066\055\041\056\007\057\034" +
    "\061\075\063\121\064\004\066\067\067\065\070\052\071" +
    "\110\072\054\073\070\075\046\077\105\103\023\104\126" +
    "\106\031\107\111\110\050\111\032\112\064\113\012\001" +
    "\002\000\006\025\uffcf\026\uffcf\001\002\000\032\004\027" +
    "\021\072\042\022\043\047\044\057\052\056\064\004\103" +
    "\023\104\126\106\031\112\064\113\012\001\002\000\004" +
    "\030\243\001\002\000\134\004\027\006\060\010\044\011" +
    "\021\021\072\022\123\024\025\031\104\033\042\034\100" +
    "\035\114\036\043\040\101\041\113\042\022\043\047\044" +
    "\057\045\035\046\124\050\102\052\056\053\106\054\066" +
    "\055\041\056\007\057\034\061\075\063\121\064\004\066" +
    "\067\067\065\070\052\071\110\072\054\073\070\075\046" +
    "\077\105\103\023\104\126\106\031\107\111\110\050\111" +
    "\032\112\064\113\012\001\002\000\006\025\uffd0\026\uffd0" +
    "\001\002\000\034\005\uffd2\023\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\032\uffd2\052\uffd2\062\uffd2\072\uffd2\074\uffd2" +
    "\076\uffd2\101\uffd2\001\002\000\140\004\027\006\060\010" +
    "\044\011\021\021\072\022\123\024\025\031\104\033\042" +
    "\034\100\035\114\036\043\040\101\041\113\042\022\043" +
    "\047\044\057\045\035\046\124\047\033\050\102\052\056" +
    "\053\106\054\066\055\041\056\007\057\034\061\075\063" +
    "\121\064\004\066\067\067\065\070\052\071\110\072\054" +
    "\073\070\075\046\077\105\100\250\103\023\104\053\106" +
    "\031\107\111\110\050\111\032\112\064\113\012\001\002" +
    "\000\144\002\uffff\004\uffff\006\uffff\010\uffff\011\uffff\021" +
    "\uffff\022\uffff\024\uffff\025\uffff\031\uffff\033\uffff\034\uffff" +
    "\035\uffff\036\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\046\uffff\047\uffff\050\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\061\uffff\063\uffff\064" +
    "\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff" +
    "\075\uffff\077\uffff\100\uffff\103\uffff\104\uffff\106\uffff\107" +
    "\uffff\110\uffff\111\uffff\112\uffff\113\uffff\001\002\000\034" +
    "\005\ufff6\023\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032" +
    "\ufff6\052\ufff6\062\ufff6\072\ufff6\074\ufff6\076\ufff6\101\ufff6" +
    "\001\002\000\004\032\252\001\002\000\036\005\uffbf\023" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\052\uffbf" +
    "\060\uffbf\062\uffbf\072\uffbf\074\uffbf\076\uffbf\101\uffbf\001" +
    "\002\000\004\051\254\001\002\000\134\004\027\006\060" +
    "\010\044\011\021\021\072\022\123\024\025\031\104\033" +
    "\042\034\100\035\114\036\043\040\101\041\113\042\022" +
    "\043\047\044\057\045\035\046\124\050\102\052\056\053" +
    "\106\054\066\055\041\056\007\057\034\061\075\063\121" +
    "\064\004\066\067\067\065\070\052\071\110\072\054\073" +
    "\070\075\046\077\105\103\023\104\126\106\031\107\111" +
    "\110\050\111\032\112\064\113\012\001\002\000\004\052" +
    "\256\001\002\000\134\004\027\006\060\010\044\011\021" +
    "\021\072\022\123\024\025\031\104\033\042\034\100\035" +
    "\114\036\043\040\101\041\113\042\022\043\047\044\057" +
    "\045\035\046\124\050\102\052\056\053\106\054\066\055" +
    "\041\056\007\057\034\061\075\063\121\064\004\066\067" +
    "\067\065\070\052\071\110\072\054\073\070\075\046\077" +
    "\105\103\023\104\126\106\031\107\111\110\050\111\032" +
    "\112\064\113\012\001\002\000\034\005\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\032\uffd3\052\uffd3\062\uffd3" +
    "\072\uffd3\074\uffd3\076\uffd3\101\uffd3\001\002\000\140\004" +
    "\027\005\uff89\006\060\010\044\011\021\021\072\022\123" +
    "\024\025\026\uff89\031\104\033\042\034\100\035\114\036" +
    "\043\040\101\041\113\042\022\043\047\044\057\045\035" +
    "\046\124\050\102\052\056\053\106\054\066\055\041\056" +
    "\007\057\034\061\075\063\121\064\004\066\067\067\065" +
    "\070\052\071\110\072\054\073\070\075\046\077\105\103" +
    "\023\104\126\106\031\107\111\110\050\111\032\112\064" +
    "\113\012\001\002\000\004\005\262\001\002\000\036\005" +
    "\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\032\uffc0" +
    "\052\uffc0\060\uffc0\062\uffc0\072\uffc0\074\uffc0\076\uffc0\101" +
    "\uffc0\001\002\000\134\004\027\006\060\010\044\011\021" +
    "\021\072\022\123\024\025\031\104\033\042\034\100\035" +
    "\114\036\043\040\101\041\113\042\022\043\047\044\057" +
    "\045\035\046\124\050\102\052\056\053\106\054\066\055" +
    "\041\056\007\057\034\061\075\063\121\064\004\066\067" +
    "\067\065\070\052\071\110\072\054\073\070\075\046\077" +
    "\105\103\023\104\126\106\031\107\111\110\050\111\032" +
    "\112\064\113\012\001\002\000\004\026\265\001\002\000" +
    "\134\004\027\006\060\010\044\011\021\021\072\022\123" +
    "\024\025\031\104\033\042\034\100\035\114\036\043\040" +
    "\101\041\113\042\022\043\047\044\057\045\035\046\124" +
    "\050\102\052\056\053\106\054\066\055\041\056\007\057" +
    "\034\061\075\063\121\064\004\066\067\067\065\070\052" +
    "\071\110\072\054\073\070\075\046\077\105\103\023\104" +
    "\126\106\031\107\111\110\050\111\032\112\064\113\012" +
    "\001\002\000\004\005\267\001\002\000\034\005\uffc7\023" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7\052\uffc7" +
    "\062\uffc7\072\uffc7\074\uffc7\076\uffc7\101\uffc7\001\002\000" +
    "\144\002\ufffc\004\ufffc\006\ufffc\010\ufffc\011\ufffc\021\ufffc" +
    "\022\ufffc\024\ufffc\025\ufffc\031\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\050\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc\063\ufffc\064\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\075" +
    "\ufffc\077\ufffc\100\ufffc\103\ufffc\104\ufffc\106\ufffc\107\ufffc" +
    "\110\ufffc\111\ufffc\112\ufffc\113\ufffc\001\002\000\006\026" +
    "\311\062\312\001\002\000\006\026\uffcc\062\uffcc\001\002" +
    "\000\012\026\uffca\030\275\062\uffca\072\274\001\002\000" +
    "\004\104\277\001\002\000\134\004\027\006\060\010\044" +
    "\011\021\021\072\022\123\024\025\031\104\033\042\034" +
    "\100\035\114\036\043\040\101\041\113\042\022\043\047" +
    "\044\057\045\035\046\124\050\102\052\056\053\106\054" +
    "\066\055\041\056\007\057\034\061\075\063\121\064\004" +
    "\066\067\067\065\070\052\071\110\072\054\073\070\075" +
    "\046\077\105\103\023\104\126\106\031\107\111\110\050" +
    "\111\032\112\064\113\012\001\002\000\006\026\uffcb\062" +
    "\uffcb\001\002\000\004\023\300\001\002\000\004\102\301" +
    "\001\002\000\004\004\302\001\002\000\134\004\027\006" +
    "\060\010\044\011\021\021\072\022\123\024\025\031\104" +
    "\033\042\034\100\035\114\036\043\040\101\041\113\042" +
    "\022\043\047\044\057\045\035\046\124\050\102\052\056" +
    "\053\106\054\066\055\041\056\007\057\034\061\075\063" +
    "\121\064\004\066\067\067\065\070\052\071\110\072\054" +
    "\073\070\075\046\077\105\103\023\104\126\106\031\107" +
    "\111\110\050\111\032\112\064\113\012\001\002\000\004" +
    "\026\304\001\002\000\134\004\027\006\060\010\044\011" +
    "\021\021\072\022\123\024\025\031\104\033\042\034\100" +
    "\035\114\036\043\040\101\041\113\042\022\043\047\044" +
    "\057\045\035\046\124\050\102\052\056\053\106\054\066" +
    "\055\041\056\007\057\034\061\075\063\121\064\004\066" +
    "\067\067\065\070\052\071\110\072\054\073\070\075\046" +
    "\077\105\103\023\104\126\106\031\107\111\110\050\111" +
    "\032\112\064\113\012\001\002\000\004\005\306\001\002" +
    "\000\010\026\uffc8\050\307\062\uffc8\001\002\000\032\004" +
    "\027\021\072\042\022\043\047\044\057\052\056\064\004" +
    "\103\023\104\126\106\031\112\064\113\012\001\002\000" +
    "\006\026\uffc9\062\uffc9\001\002\000\134\004\027\006\060" +
    "\010\044\011\021\021\072\022\123\024\025\031\104\033" +
    "\042\034\100\035\114\036\043\040\101\041\113\042\022" +
    "\043\047\044\057\045\035\046\124\050\102\052\056\053" +
    "\106\054\066\055\041\056\007\057\034\061\075\063\121" +
    "\064\004\066\067\067\065\070\052\071\110\072\054\073" +
    "\070\075\046\077\105\103\023\104\126\106\031\107\111" +
    "\110\050\111\032\112\064\113\012\001\002\000\036\005" +
    "\uffce\023\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\052\uffce\062\uffce\072\uffce\074\uffce\076\uffce\101" +
    "\uffce\001\002\000\006\026\uffcd\062\uffcd\001\002\000\016" +
    "\004\027\021\072\103\023\104\126\112\064\113\012\001" +
    "\002\000\010\012\200\013\201\032\316\001\002\000\034" +
    "\005\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032" +
    "\uffc5\052\uffc5\062\uffc5\072\uffc5\074\uffc5\076\uffc5\101\uffc5" +
    "\001\002\000\062\005\uff90\012\uff90\013\uff90\014\uff90\015" +
    "\uff90\016\uff90\020\uff90\023\uff90\025\uff90\026\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\051\uff90\052\uff90\060\uff90\062" +
    "\uff90\072\uff90\074\uff90\076\uff90\101\uff90\105\uff90\106\uff90" +
    "\001\002\000\004\002\000\001\002\000\004\074\322\001" +
    "\002\000\032\004\027\021\072\042\022\043\047\044\057" +
    "\052\056\064\004\103\023\104\126\106\031\112\064\113" +
    "\012\001\002\000\034\005\uffdf\023\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\032\uffdf\052\uffdf\062\uffdf\072\uffdf\074" +
    "\uffdf\076\uffdf\101\uffdf\001\002\000\134\004\027\006\060" +
    "\010\044\011\021\021\072\022\123\024\025\031\104\033" +
    "\042\034\100\035\114\036\043\040\101\041\113\042\022" +
    "\043\047\044\057\045\035\046\124\050\102\052\056\053" +
    "\106\054\066\055\041\056\007\057\034\061\075\063\121" +
    "\064\004\066\067\067\065\070\052\071\110\072\054\073" +
    "\070\075\046\077\105\103\023\104\126\106\031\107\111" +
    "\110\050\111\032\112\064\113\012\001\002\000\004\005" +
    "\326\001\002\000\034\005\uffde\023\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\032\uffde\052\uffde\062\uffde\072\uffde\074" +
    "\uffde\076\uffde\101\uffde\001\002\000\134\004\027\006\060" +
    "\010\044\011\021\021\072\022\123\024\025\031\104\033" +
    "\042\034\100\035\114\036\043\040\101\041\113\042\022" +
    "\043\047\044\057\045\035\046\124\050\102\052\056\053" +
    "\106\054\066\055\041\056\007\057\034\061\075\063\121" +
    "\064\004\066\067\067\065\070\052\071\110\072\054\073" +
    "\070\075\046\077\105\103\023\104\126\106\031\107\111" +
    "\110\050\111\032\112\064\113\012\001\002\000\004\005" +
    "\331\001\002\000\034\005\uffe5\023\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\032\uffe5\052\uffe5\062\uffe5\072\uffe5\074" +
    "\uffe5\076\uffe5\101\uffe5\001\002\000\134\004\027\006\060" +
    "\010\044\011\021\021\072\022\123\024\025\031\104\033" +
    "\042\034\100\035\114\036\043\040\101\041\113\042\022" +
    "\043\047\044\057\045\035\046\124\050\102\052\056\053" +
    "\106\054\066\055\041\056\007\057\034\061\075\063\121" +
    "\064\004\066\067\067\065\070\052\071\110\072\054\073" +
    "\070\075\046\077\105\103\023\104\126\106\031\107\111" +
    "\110\050\111\032\112\064\113\012\001\002\000\004\005" +
    "\334\001\002\000\034\005\uffdd\023\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\032\uffdd\052\uffdd\062\uffdd\072\uffdd\074" +
    "\uffdd\076\uffdd\101\uffdd\001\002\000\010\005\uff89\026\uff89" +
    "\104\341\001\002\000\006\005\uffae\026\345\001\002\000" +
    "\004\005\342\001\002\000\006\005\uffab\026\uffab\001\002" +
    "\000\006\005\uffac\026\uffac\001\002\000\004\007\343\001" +
    "\002\000\134\004\027\006\060\010\044\011\021\021\072" +
    "\022\123\024\025\031\104\033\042\034\100\035\114\036" +
    "\043\040\101\041\113\042\022\043\047\044\057\045\035" +
    "\046\124\050\102\052\056\053\106\054\066\055\041\056" +
    "\007\057\034\061\075\063\121\064\004\066\067\067\065" +
    "\070\052\071\110\072\054\073\070\075\046\077\105\103" +
    "\023\104\126\106\031\107\111\110\050\111\032\112\064" +
    "\113\012\001\002\000\034\005\uffb0\023\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\032\uffb0\052\uffb0\062\uffb0\072\uffb0" +
    "\074\uffb0\076\uffb0\101\uffb0\001\002\000\004\104\346\001" +
    "\002\000\006\005\uffad\026\uffad\001\002\000\134\004\027" +
    "\006\060\010\044\011\021\021\072\022\123\024\025\031" +
    "\104\033\042\034\100\035\114\036\043\040\101\041\113" +
    "\042\022\043\047\044\057\045\035\046\124\050\102\052" +
    "\056\053\106\054\066\055\041\056\007\057\034\061\075" +
    "\063\121\064\004\066\067\067\065\070\052\071\110\072" +
    "\054\073\070\075\046\077\105\103\023\104\126\106\031" +
    "\107\111\110\050\111\032\112\064\113\012\001\002\000" +
    "\004\005\351\001\002\000\036\005\uffb3\023\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\032\uffb3\051\uffb3\052\uffb3\062" +
    "\uffb3\072\uffb3\074\uffb3\076\uffb3\101\uffb3\001\002\000\004" +
    "\101\353\001\002\000\134\004\027\006\060\010\044\011" +
    "\021\021\072\022\123\024\025\031\104\033\042\034\100" +
    "\035\114\036\043\040\101\041\113\042\022\043\047\044" +
    "\057\045\035\046\124\050\102\052\056\053\106\054\066" +
    "\055\041\056\007\057\034\061\075\063\121\064\004\066" +
    "\067\067\065\070\052\071\110\072\054\073\070\075\046" +
    "\077\105\103\023\104\126\106\031\107\111\110\050\111" +
    "\032\112\064\113\012\001\002\000\004\076\355\001\002" +
    "\000\134\004\027\006\060\010\044\011\021\021\072\022" +
    "\123\024\025\031\104\033\042\034\100\035\114\036\043" +
    "\040\101\041\113\042\022\043\047\044\057\045\035\046" +
    "\124\050\102\052\056\053\106\054\066\055\041\056\007" +
    "\057\034\061\075\063\121\064\004\066\067\067\065\070" +
    "\052\071\110\072\054\073\070\075\046\077\105\103\023" +
    "\104\126\106\031\107\111\110\050\111\032\112\064\113" +
    "\012\001\002\000\034\005\uffe0\023\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\032\uffe0\052\uffe0\062\uffe0\072\uffe0\074" +
    "\uffe0\076\uffe0\101\uffe0\001\002\000\134\004\027\006\060" +
    "\010\044\011\021\021\072\022\123\024\025\031\104\033" +
    "\042\034\100\035\114\036\043\040\101\041\113\042\022" +
    "\043\047\044\057\045\035\046\124\050\102\052\056\053" +
    "\106\054\066\055\041\056\007\057\034\061\075\063\121" +
    "\064\004\066\067\067\065\070\052\071\110\072\054\073" +
    "\070\075\046\077\105\103\023\104\126\106\031\107\111" +
    "\110\050\111\032\112\064\113\012\001\002\000\004\027" +
    "\361\001\002\000\144\002\uff9c\004\uff9c\006\uff9c\010\uff9c" +
    "\011\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c\031\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\061\uff9c" +
    "\063\uff9c\064\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072" +
    "\uff9c\073\uff9c\075\uff9c\077\uff9c\100\uff9c\103\uff9c\104\uff9c" +
    "\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\001" +
    "\002\000\134\004\027\006\060\010\044\011\021\021\072" +
    "\022\123\024\025\031\104\033\042\034\100\035\114\036" +
    "\043\040\101\041\113\042\022\043\047\044\057\045\035" +
    "\046\124\050\102\052\056\053\106\054\066\055\041\056" +
    "\007\057\034\061\075\063\121\064\004\066\067\067\065" +
    "\070\052\071\110\072\054\073\070\075\046\077\105\103" +
    "\023\104\126\106\031\107\111\110\050\111\032\112\064" +
    "\113\012\001\002\000\004\005\364\001\002\000\034\005" +
    "\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc" +
    "\052\uffdc\062\uffdc\072\uffdc\074\uffdc\076\uffdc\101\uffdc\001" +
    "\002\000\134\004\027\006\060\010\044\011\021\021\072" +
    "\022\123\024\025\031\104\033\042\034\100\035\114\036" +
    "\043\040\101\041\113\042\022\043\047\044\057\045\035" +
    "\046\124\050\102\052\056\053\106\054\066\055\041\056" +
    "\007\057\034\061\075\063\121\064\004\066\067\067\065" +
    "\070\052\071\110\072\054\073\070\075\046\077\105\103" +
    "\023\104\126\106\031\107\111\110\050\111\032\112\064" +
    "\113\012\001\002\000\004\026\367\001\002\000\134\004" +
    "\027\006\060\010\044\011\021\021\072\022\123\024\025" +
    "\031\104\033\042\034\100\035\114\036\043\040\101\041" +
    "\113\042\022\043\047\044\057\045\035\046\124\050\102" +
    "\052\056\053\106\054\066\055\041\056\007\057\034\061" +
    "\075\063\121\064\004\066\067\067\065\070\052\071\110" +
    "\072\054\073\070\075\046\077\105\103\023\104\126\106" +
    "\031\107\111\110\050\111\032\112\064\113\012\001\002" +
    "\000\004\005\371\001\002\000\036\005\uffb4\023\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4\051\uffb4\052\uffb4" +
    "\062\uffb4\072\uffb4\074\uffb4\076\uffb4\101\uffb4\001\002\000" +
    "\004\076\373\001\002\000\134\004\027\006\060\010\044" +
    "\011\021\021\072\022\123\024\025\031\104\033\042\034" +
    "\100\035\114\036\043\040\101\041\113\042\022\043\047" +
    "\044\057\045\035\046\124\050\102\052\056\053\106\054" +
    "\066\055\041\056\007\057\034\061\075\063\121\064\004" +
    "\066\067\067\065\070\052\071\110\072\054\073\070\075" +
    "\046\077\105\103\023\104\126\106\031\107\111\110\050" +
    "\111\032\112\064\113\012\001\002\000\034\005\uffe1\023" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\052\uffe1" +
    "\062\uffe1\072\uffe1\074\uffe1\076\uffe1\101\uffe1\001\002\000" +
    "\004\072\376\001\002\000\004\104\377\001\002\000\004" +
    "\023\u0100\001\002\000\004\031\u0101\001\002\000\012\021" +
    "\072\103\023\112\064\113\012\001\002\000\004\030\u0103" +
    "\001\002\000\012\021\072\103\023\112\064\113\012\001" +
    "\002\000\004\032\u0105\001\002\000\034\005\uffa4\023\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4\052\uffa4\062" +
    "\uffa4\072\uffa4\074\uffa4\076\uffa4\101\uffa4\001\002\000\134" +
    "\004\027\006\060\010\044\011\021\021\072\022\123\024" +
    "\025\031\104\033\042\034\100\035\114\036\043\040\101" +
    "\041\113\042\022\043\047\044\057\045\035\046\124\050" +
    "\102\052\056\053\106\054\066\055\041\056\007\057\034" +
    "\061\075\063\121\064\004\066\067\067\065\070\052\071" +
    "\110\072\054\073\070\075\046\077\105\103\023\104\126" +
    "\106\031\107\111\110\050\111\032\112\064\113\012\001" +
    "\002\000\004\005\u0108\001\002\000\034\005\uffc2\023\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\032\uffc2\052\uffc2\062" +
    "\uffc2\072\uffc2\074\uffc2\076\uffc2\101\uffc2\001\002\000\134" +
    "\004\027\006\060\010\044\011\021\021\072\022\123\024" +
    "\025\031\104\033\042\034\100\035\114\036\043\040\101" +
    "\041\113\042\022\043\047\044\057\045\035\046\124\050" +
    "\102\052\056\053\106\054\066\055\041\056\007\057\034" +
    "\061\075\063\121\064\004\066\067\067\065\070\052\071" +
    "\110\072\054\073\070\075\046\077\105\103\023\104\126" +
    "\106\031\107\111\110\050\111\032\112\064\113\012\001" +
    "\002\000\004\005\u010b\001\002\000\034\005\uffe4\023\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\052\uffe4\062" +
    "\uffe4\072\uffe4\074\uffe4\076\uffe4\101\uffe4\001\002\000\010" +
    "\005\uff89\026\uff89\104\341\001\002\000\004\005\u010e\001" +
    "\002\000\134\004\027\006\060\010\044\011\021\021\072" +
    "\022\123\024\025\031\104\033\042\034\100\035\114\036" +
    "\043\040\101\041\113\042\022\043\047\044\057\045\035" +
    "\046\124\050\102\052\056\053\106\054\066\055\041\056" +
    "\007\057\034\061\075\063\121\064\004\066\067\067\065" +
    "\070\052\071\110\072\054\073\070\075\046\077\105\103" +
    "\023\104\126\106\031\107\111\110\050\111\032\112\064" +
    "\113\012\001\002\000\034\005\uffaf\023\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\032\uffaf\052\uffaf\062\uffaf\072\uffaf" +
    "\074\uffaf\076\uffaf\101\uffaf\001\002\000\004\005\u0111\001" +
    "\002\000\034\005\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\032\uffe2\052\uffe2\062\uffe2\072\uffe2\074\uffe2\076" +
    "\uffe2\101\uffe2\001\002\000\134\004\027\006\060\010\044" +
    "\011\021\021\072\022\123\024\025\031\104\033\042\034" +
    "\100\035\114\036\043\040\101\041\113\042\022\043\047" +
    "\044\057\045\035\046\124\050\102\052\056\053\106\054" +
    "\066\055\041\056\007\057\034\061\075\063\121\064\004" +
    "\066\067\067\065\070\052\071\110\072\054\073\070\075" +
    "\046\077\105\103\023\104\126\106\031\107\111\110\050" +
    "\111\032\112\064\113\012\001\002\000\004\027\u0114\001" +
    "\002\000\144\002\uff9b\004\uff9b\006\uff9b\010\uff9b\011\uff9b" +
    "\021\uff9b\022\uff9b\024\uff9b\025\uff9b\031\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\061\uff9b\063\uff9b" +
    "\064\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\075\uff9b\077\uff9b\100\uff9b\103\uff9b\104\uff9b\106\uff9b" +
    "\107\uff9b\110\uff9b\111\uff9b\112\uff9b\113\uff9b\001\002\000" +
    "\036\005\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\032\uffb6\051\uffb6\052\uffb6\062\uffb6\072\uffb6\074\uffb6\076" +
    "\uffb6\101\uffb6\001\002\000\004\005\u0117\001\002\000\064" +
    "\004\u0118\005\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\020\uff8a\023\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\031\uff8a\032\uff8a\051\uff8a\052\uff8a\060\uff8a\062\uff8a\072" +
    "\uff8a\074\uff8a\076\uff8a\101\uff8a\105\uff8a\106\uff8a\001\002" +
    "\000\140\004\027\005\uff89\006\060\010\044\011\021\021" +
    "\072\022\123\024\025\026\uff89\031\104\033\042\034\100" +
    "\035\114\036\043\040\101\041\113\042\022\043\047\044" +
    "\057\045\035\046\124\050\102\052\056\053\106\054\066" +
    "\055\041\056\007\057\034\061\075\063\121\064\004\066" +
    "\067\067\065\070\052\071\110\072\054\073\070\075\046" +
    "\077\105\103\023\104\126\106\031\107\111\110\050\111" +
    "\032\112\064\113\012\001\002\000\004\005\u011a\001\002" +
    "\000\062\005\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\020\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\051\uffa9\052\uffa9\060\uffa9\062\uffa9\072" +
    "\uffa9\074\uffa9\076\uffa9\101\uffa9\105\uffa9\106\uffa9\001\002" +
    "\000\134\004\027\006\060\010\044\011\021\021\072\022" +
    "\123\024\025\031\104\033\042\034\100\035\114\036\043" +
    "\040\101\041\113\042\022\043\047\044\057\045\035\046" +
    "\124\050\102\052\056\053\106\054\066\055\041\056\007" +
    "\057\034\061\075\063\121\064\004\066\067\067\065\070" +
    "\052\071\110\072\054\073\070\075\046\077\105\103\023" +
    "\104\126\106\031\107\111\110\050\111\032\112\064\113" +
    "\012\001\002\000\034\005\uffbc\023\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\032\uffbc\052\uffbc\062\uffbc\072\uffbc\074" +
    "\uffbc\076\uffbc\101\uffbc\001\002\000\140\004\027\006\060" +
    "\010\044\011\021\021\072\022\123\024\025\025\u011e\031" +
    "\104\033\042\034\100\035\114\036\043\040\101\041\113" +
    "\042\022\043\047\044\057\045\035\046\124\047\033\050" +
    "\102\052\056\053\106\054\066\055\041\056\007\057\034" +
    "\061\075\063\121\064\004\066\067\067\065\070\052\071" +
    "\110\072\054\073\070\075\046\077\105\103\023\104\053" +
    "\106\031\107\111\110\050\111\032\112\064\113\012\001" +
    "\002\000\034\005\ufff7\023\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\032\ufff7\052\ufff7\062\ufff7\072\ufff7\074\ufff7\076" +
    "\ufff7\101\ufff7\001\002\000\134\004\027\006\060\010\044" +
    "\011\021\021\072\022\123\024\025\031\104\033\042\034" +
    "\100\035\114\036\043\040\101\041\113\042\022\043\047" +
    "\044\057\045\035\046\124\050\102\052\056\053\106\054" +
    "\066\055\041\056\007\057\034\061\075\063\121\064\004" +
    "\066\067\067\065\070\052\071\110\072\054\073\070\075" +
    "\046\077\105\103\023\104\126\106\031\107\111\110\050" +
    "\111\032\112\064\113\012\001\002\000\004\026\u0121\001" +
    "\002\000\134\004\027\006\060\010\044\011\021\021\072" +
    "\022\123\024\025\031\104\033\042\034\100\035\114\036" +
    "\043\040\101\041\113\042\022\043\047\044\057\045\035" +
    "\046\124\050\102\052\056\053\106\054\066\055\041\056" +
    "\007\057\034\061\075\063\121\064\004\066\067\067\065" +
    "\070\052\071\110\072\054\073\070\075\046\077\105\103" +
    "\023\104\126\106\031\107\111\110\050\111\032\112\064" +
    "\113\012\001\002\000\004\005\u0123\001\002\000\036\005" +
    "\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5" +
    "\051\uffb5\052\uffb5\062\uffb5\072\uffb5\074\uffb5\076\uffb5\101" +
    "\uffb5\001\002\000\004\005\u0125\001\002\000\034\005\uffe3" +
    "\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\052" +
    "\uffe3\062\uffe3\072\uffe3\074\uffe3\076\uffe3\101\uffe3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\110\002\070\003\054\004\004\005\060\006" +
    "\061\012\075\013\111\014\102\015\121\016\106\020\005" +
    "\025\062\026\117\027\076\030\013\031\115\032\036\033" +
    "\012\034\072\037\025\040\023\041\014\042\017\043\037" +
    "\044\044\045\114\046\016\047\116\050\035\051\050\052" +
    "\010\053\015\056\027\057\073\060\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\106\003\u011c\004\004\005\060\006\061\012\075" +
    "\013\111\014\102\015\121\016\106\020\005\025\062\026" +
    "\117\027\076\030\013\031\115\032\036\033\012\034\072" +
    "\037\025\040\023\041\014\042\017\043\037\044\044\045" +
    "\114\046\016\047\116\050\035\051\050\052\010\053\015" +
    "\056\027\057\073\060\007\001\001\000\002\001\001\000" +
    "\100\006\061\012\u0115\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\022\013\175\014\102\015\163\016" +
    "\106\020\005\026\117\046\016\047\u0114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\006\061\012\374\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\026\013\175\014\102\015\163\016" +
    "\106\020\005\026\117\046\016\047\116\050\035\051\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\351" +
    "\001\001\000\104\004\246\005\060\006\061\012\075\013" +
    "\111\014\102\015\121\016\106\020\005\025\062\026\117" +
    "\027\076\030\013\031\115\032\036\033\012\034\072\037" +
    "\025\040\023\041\014\042\017\043\037\044\044\045\114" +
    "\046\016\047\116\050\035\051\050\052\010\053\015\056" +
    "\027\057\073\060\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\006\061\012" +
    "\320\013\111\014\102\015\121\016\106\020\005\025\062" +
    "\026\117\027\076\030\013\031\115\032\036\033\012\034" +
    "\072\037\025\040\023\041\014\042\017\043\037\044\044" +
    "\045\114\046\016\047\116\050\035\051\050\052\010\053" +
    "\015\056\027\057\073\060\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\006\061\012\272\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\035\271\036\270\037\025\040\023" +
    "\041\014\042\017\043\037\044\044\045\114\046\016\047" +
    "\116\050\035\051\050\052\010\053\015\056\027\057\073" +
    "\060\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\013\175\014\102" +
    "\015\163\016\106\020\005\026\117\046\016\047\116\050" +
    "\035\051\252\001\001\000\002\001\001\000\106\006\061" +
    "\012\134\013\111\014\102\015\121\016\106\017\136\020" +
    "\005\023\250\024\133\025\062\026\117\027\076\030\013" +
    "\031\115\032\036\033\012\034\072\037\025\040\023\041" +
    "\014\042\017\043\037\044\044\045\114\046\016\047\116" +
    "\050\035\051\050\052\010\053\015\056\027\057\073\060" +
    "\007\001\001\000\106\003\245\004\004\005\060\006\061" +
    "\012\075\013\111\014\102\015\121\016\106\020\005\025" +
    "\062\026\117\027\076\030\013\031\115\032\036\033\012" +
    "\034\072\037\025\040\023\041\014\042\017\043\037\044" +
    "\044\045\114\046\016\047\116\050\035\051\050\052\010" +
    "\053\015\056\027\057\073\060\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\144\011\143\017\142\001\001\000\002\001\001\000\100" +
    "\006\061\012\126\013\111\014\102\015\121\016\106\020" +
    "\005\025\062\026\117\027\076\030\013\031\115\032\036" +
    "\033\012\034\072\037\025\040\023\041\014\042\017\043" +
    "\037\044\044\045\114\046\016\047\116\050\035\051\050" +
    "\052\010\053\015\056\027\057\073\060\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\006\061\012\130" +
    "\013\111\014\102\015\121\016\106\020\005\025\062\026" +
    "\117\027\076\030\013\031\115\032\036\033\012\034\072" +
    "\037\025\040\023\041\014\042\017\043\037\044\044\045" +
    "\114\046\016\047\116\050\035\051\050\052\010\053\015" +
    "\056\027\057\073\060\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\106\006\061\012\134\013\111\014\102" +
    "\015\121\016\106\017\136\020\005\023\135\024\133\025" +
    "\062\026\117\027\076\030\013\031\115\032\036\033\012" +
    "\034\072\037\025\040\023\041\014\042\017\043\037\044" +
    "\044\045\114\046\016\047\116\050\035\051\050\052\010" +
    "\053\015\056\027\057\073\060\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\006\061\012\141\013\111\014" +
    "\102\015\121\016\106\020\005\025\062\026\117\027\076" +
    "\030\013\031\115\032\036\033\012\034\072\037\025\040" +
    "\023\041\014\042\017\043\037\044\044\045\114\046\016" +
    "\047\116\050\035\051\050\052\010\053\015\056\027\057" +
    "\073\060\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\154\017\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\006\061\012\147\013\111\014\102" +
    "\015\121\016\106\020\005\025\062\026\117\027\076\030" +
    "\013\031\115\032\036\033\012\034\072\037\025\040\023" +
    "\041\014\042\017\043\037\044\044\045\114\046\016\047" +
    "\116\050\035\051\050\052\010\053\015\056\027\057\073" +
    "\060\007\001\001\000\002\001\001\000\100\006\061\012" +
    "\151\013\111\014\102\015\121\016\106\020\005\025\062" +
    "\026\117\027\076\030\013\031\115\032\036\033\012\034" +
    "\072\037\025\040\023\041\014\042\017\043\037\044\044" +
    "\045\114\046\016\047\116\050\035\051\050\052\010\053" +
    "\015\056\027\057\073\060\007\001\001\000\002\001\001" +
    "\000\004\011\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\156\017\153\001\001\000\002\001\001" +
    "\000\012\015\163\016\106\020\162\026\117\001\001\000" +
    "\100\006\061\012\161\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\006\061\012\165\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\100\006\061\012\167\013\111\014" +
    "\102\015\121\016\106\020\005\025\062\026\117\027\076" +
    "\030\013\031\115\032\036\033\012\034\072\037\025\040" +
    "\023\041\014\042\017\043\037\044\044\045\114\046\016" +
    "\047\116\050\035\051\050\052\010\053\015\056\027\057" +
    "\073\060\007\001\001\000\002\001\001\000\100\006\061" +
    "\012\171\013\111\014\102\015\121\016\106\020\005\025" +
    "\062\026\117\027\076\030\013\031\115\032\036\033\012" +
    "\034\072\037\025\040\023\041\014\042\017\043\037\044" +
    "\044\045\114\046\016\047\116\050\035\051\050\052\010" +
    "\053\015\056\027\057\073\060\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\175\014\102\015\163" +
    "\016\106\020\005\026\117\046\016\047\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\211\014\102" +
    "\015\163\016\106\020\005\026\117\001\001\000\014\014" +
    "\210\015\163\016\106\020\005\026\117\001\001\000\014" +
    "\014\201\015\163\016\106\020\005\026\117\001\001\000" +
    "\002\001\001\000\012\015\163\016\106\020\207\026\117" +
    "\001\001\000\012\015\163\016\106\020\206\026\117\001" +
    "\001\000\012\015\163\016\106\020\205\026\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\006\061\012\213" +
    "\013\111\014\102\015\121\016\106\020\005\025\062\026" +
    "\117\027\076\030\013\031\115\032\036\033\012\034\072" +
    "\037\025\040\023\041\014\042\017\043\037\044\044\045" +
    "\114\046\016\047\116\050\035\051\050\052\010\053\015" +
    "\056\027\057\073\060\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\006\061\012\216\013\111\014\102" +
    "\015\121\016\106\020\005\025\062\026\117\027\076\030" +
    "\013\031\115\032\036\033\012\034\072\037\025\040\023" +
    "\041\014\042\017\043\037\044\044\045\114\046\016\047" +
    "\116\050\035\051\050\052\010\053\015\056\027\057\073" +
    "\060\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\221\014\102\015\163\016\106\020\005\026\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\006\061\012\226\013\111" +
    "\014\102\015\121\016\106\020\005\025\062\026\117\027" +
    "\076\030\013\031\115\032\036\033\012\034\072\037\025" +
    "\040\023\041\014\042\017\043\037\044\044\045\114\046" +
    "\016\047\116\050\035\051\050\052\010\053\015\056\027" +
    "\057\073\060\007\001\001\000\002\001\001\000\100\006" +
    "\061\012\230\013\111\014\102\015\121\016\106\020\005" +
    "\025\062\026\117\027\076\030\013\031\115\032\036\033" +
    "\012\034\072\037\025\040\023\041\014\042\017\043\037" +
    "\044\044\045\114\046\016\047\116\050\035\051\050\052" +
    "\010\053\015\056\027\057\073\060\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\175\014\102\015" +
    "\163\016\106\020\005\026\117\046\016\047\116\050\035" +
    "\051\235\054\234\055\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\006\061\012\237" +
    "\013\111\014\102\015\121\016\106\020\005\025\062\026" +
    "\117\027\076\030\013\031\115\032\036\033\012\034\072" +
    "\037\025\040\023\041\014\042\017\043\037\044\044\045" +
    "\114\046\016\047\116\050\035\051\050\052\010\053\015" +
    "\056\027\057\073\060\007\001\001\000\002\001\001\000" +
    "\026\013\175\014\102\015\163\016\106\020\005\026\117" +
    "\046\016\047\116\050\035\051\241\001\001\000\002\001" +
    "\001\000\100\006\061\012\243\013\111\014\102\015\121" +
    "\016\106\020\005\025\062\026\117\027\076\030\013\031" +
    "\115\032\036\033\012\034\072\037\025\040\023\041\014" +
    "\042\017\043\037\044\044\045\114\046\016\047\116\050" +
    "\035\051\050\052\010\053\015\056\027\057\073\060\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\004" +
    "\246\005\060\006\061\012\075\013\111\014\102\015\121" +
    "\016\106\020\005\025\062\026\117\027\076\030\013\031" +
    "\115\032\036\033\012\034\072\037\025\040\023\041\014" +
    "\042\017\043\037\044\044\045\114\046\016\047\116\050" +
    "\035\051\050\052\010\053\015\056\027\057\073\060\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\006\061" +
    "\012\254\013\111\014\102\015\121\016\106\020\005\025" +
    "\062\026\117\027\076\030\013\031\115\032\036\033\012" +
    "\034\072\037\025\040\023\041\014\042\017\043\037\044" +
    "\044\045\114\046\016\047\116\050\035\051\050\052\010" +
    "\053\015\056\027\057\073\060\007\001\001\000\002\001" +
    "\001\000\100\006\061\012\256\013\111\014\102\015\121" +
    "\016\106\020\005\025\062\026\117\027\076\030\013\031" +
    "\115\032\036\033\012\034\072\037\025\040\023\041\014" +
    "\042\017\043\037\044\044\045\114\046\016\047\116\050" +
    "\035\051\050\052\010\053\015\056\027\057\073\060\007" +
    "\001\001\000\002\001\001\000\106\006\061\012\134\013" +
    "\111\014\102\015\121\016\106\017\136\020\005\023\260" +
    "\024\133\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\006\061\012" +
    "\263\013\111\014\102\015\121\016\106\020\005\025\062" +
    "\026\117\027\076\030\013\031\115\032\036\033\012\034" +
    "\072\037\025\040\023\041\014\042\017\043\037\044\044" +
    "\045\114\046\016\047\116\050\035\051\050\052\010\053" +
    "\015\056\027\057\073\060\007\001\001\000\002\001\001" +
    "\000\100\006\061\012\265\013\111\014\102\015\121\016" +
    "\106\020\005\025\062\026\117\027\076\030\013\031\115" +
    "\032\036\033\012\034\072\037\025\040\023\041\014\042" +
    "\017\043\037\044\044\045\114\046\016\047\116\050\035" +
    "\051\050\052\010\053\015\056\027\057\073\060\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\006\061\012\275\013\111\014\102" +
    "\015\121\016\106\020\005\025\062\026\117\027\076\030" +
    "\013\031\115\032\036\033\012\034\072\037\025\040\023" +
    "\041\014\042\017\043\037\044\044\045\114\046\016\047" +
    "\116\050\035\051\050\052\010\053\015\056\027\057\073" +
    "\060\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\006\061\012\302" +
    "\013\111\014\102\015\121\016\106\020\005\025\062\026" +
    "\117\027\076\030\013\031\115\032\036\033\012\034\072" +
    "\037\025\040\023\041\014\042\017\043\037\044\044\045" +
    "\114\046\016\047\116\050\035\051\050\052\010\053\015" +
    "\056\027\057\073\060\007\001\001\000\002\001\001\000" +
    "\100\006\061\012\304\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\175\014" +
    "\102\015\163\016\106\020\005\026\117\046\016\047\116" +
    "\050\035\051\307\001\001\000\002\001\001\000\102\006" +
    "\061\012\272\013\111\014\102\015\121\016\106\020\005" +
    "\025\062\026\117\027\076\030\013\031\115\032\036\033" +
    "\012\034\072\035\312\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\314\014" +
    "\102\015\163\016\106\020\005\026\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\013\175\014\102\015\163" +
    "\016\106\020\005\026\117\046\016\047\116\050\035\051" +
    "\322\001\001\000\002\001\001\000\100\006\061\012\324" +
    "\013\111\014\102\015\121\016\106\020\005\025\062\026" +
    "\117\027\076\030\013\031\115\032\036\033\012\034\072" +
    "\037\025\040\023\041\014\042\017\043\037\044\044\045" +
    "\114\046\016\047\116\050\035\051\050\052\010\053\015" +
    "\056\027\057\073\060\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\006\061\012\327\013\111\014\102" +
    "\015\121\016\106\020\005\025\062\026\117\027\076\030" +
    "\013\031\115\032\036\033\012\034\072\037\025\040\023" +
    "\041\014\042\017\043\037\044\044\045\114\046\016\047" +
    "\116\050\035\051\050\052\010\053\015\056\027\057\073" +
    "\060\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\006\061\012\332\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\337\021" +
    "\336\022\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\006\061\012\343\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\006\061\012\347\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\006\061\012\353\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\100\006\061\012\355\013\111\014" +
    "\102\015\121\016\106\020\005\025\062\026\117\027\076" +
    "\030\013\031\115\032\036\033\012\034\072\037\025\040" +
    "\023\041\014\042\017\043\037\044\044\045\114\046\016" +
    "\047\116\050\035\051\050\052\010\053\015\056\027\057" +
    "\073\060\007\001\001\000\002\001\001\000\100\006\061" +
    "\012\357\013\111\014\102\015\121\016\106\020\005\025" +
    "\062\026\117\027\076\030\013\031\115\032\036\033\012" +
    "\034\072\037\025\040\023\041\014\042\017\043\037\044" +
    "\044\045\114\046\016\047\116\050\035\051\050\052\010" +
    "\053\015\056\027\057\073\060\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\006\061\012\362\013\111" +
    "\014\102\015\121\016\106\020\005\025\062\026\117\027" +
    "\076\030\013\031\115\032\036\033\012\034\072\037\025" +
    "\040\023\041\014\042\017\043\037\044\044\045\114\046" +
    "\016\047\116\050\035\051\050\052\010\053\015\056\027" +
    "\057\073\060\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\006\061\012\365\013\111\014\102\015\121" +
    "\016\106\020\005\025\062\026\117\027\076\030\013\031" +
    "\115\032\036\033\012\034\072\037\025\040\023\041\014" +
    "\042\017\043\037\044\044\045\114\046\016\047\116\050" +
    "\035\051\050\052\010\053\015\056\027\057\073\060\007" +
    "\001\001\000\002\001\001\000\100\006\061\012\367\013" +
    "\111\014\102\015\121\016\106\020\005\025\062\026\117" +
    "\027\076\030\013\031\115\032\036\033\012\034\072\037" +
    "\025\040\023\041\014\042\017\043\037\044\044\045\114" +
    "\046\016\047\116\050\035\051\050\052\010\053\015\056" +
    "\027\057\073\060\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\006\061\012\373\013" +
    "\111\014\102\015\121\016\106\020\005\025\062\026\117" +
    "\027\076\030\013\031\115\032\036\033\012\034\072\037" +
    "\025\040\023\041\014\042\017\043\037\044\044\045\114" +
    "\046\016\047\116\050\035\051\050\052\010\053\015\056" +
    "\027\057\073\060\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u0101\001\001\000\002\001\001\000\004" +
    "\016\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\006\061\012\u0106\013\111\014\102\015\121\016\106" +
    "\020\005\025\062\026\117\027\076\030\013\031\115\032" +
    "\036\033\012\034\072\037\025\040\023\041\014\042\017" +
    "\043\037\044\044\045\114\046\016\047\116\050\035\051" +
    "\050\052\010\053\015\056\027\057\073\060\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\006\061\012" +
    "\u0109\013\111\014\102\015\121\016\106\020\005\025\062" +
    "\026\117\027\076\030\013\031\115\032\036\033\012\034" +
    "\072\037\025\040\023\041\014\042\017\043\037\044\044" +
    "\045\114\046\016\047\116\050\035\051\050\052\010\053" +
    "\015\056\027\057\073\060\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\337\021\u010c\022\335\001" +
    "\001\000\002\001\001\000\100\006\061\012\u010e\013\111" +
    "\014\102\015\121\016\106\020\005\025\062\026\117\027" +
    "\076\030\013\031\115\032\036\033\012\034\072\037\025" +
    "\040\023\041\014\042\017\043\037\044\044\045\114\046" +
    "\016\047\116\050\035\051\050\052\010\053\015\056\027" +
    "\057\073\060\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\006\061\012\u0112\013\111" +
    "\014\102\015\121\016\106\020\005\025\062\026\117\027" +
    "\076\030\013\031\115\032\036\033\012\034\072\037\025" +
    "\040\023\041\014\042\017\043\037\044\044\045\114\046" +
    "\016\047\116\050\035\051\050\052\010\053\015\056\027" +
    "\057\073\060\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\106\006\061\012\134\013\111\014\102\015\121\016" +
    "\106\017\136\020\005\023\u0118\024\133\025\062\026\117" +
    "\027\076\030\013\031\115\032\036\033\012\034\072\037" +
    "\025\040\023\041\014\042\017\043\037\044\044\045\114" +
    "\046\016\047\116\050\035\051\050\052\010\053\015\056" +
    "\027\057\073\060\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\006\061\012\u011b\013\111\014\102\015" +
    "\121\016\106\020\005\025\062\026\117\027\076\030\013" +
    "\031\115\032\036\033\012\034\072\037\025\040\023\041" +
    "\014\042\017\043\037\044\044\045\114\046\016\047\116" +
    "\050\035\051\050\052\010\053\015\056\027\057\073\060" +
    "\007\001\001\000\002\001\001\000\104\004\246\005\060" +
    "\006\061\012\075\013\111\014\102\015\121\016\106\020" +
    "\005\025\062\026\117\027\076\030\013\031\115\032\036" +
    "\033\012\034\072\037\025\040\023\041\014\042\017\043" +
    "\037\044\044\045\114\046\016\047\116\050\035\051\050" +
    "\052\010\053\015\056\027\057\073\060\007\001\001\000" +
    "\002\001\001\000\100\006\061\012\u011f\013\111\014\102" +
    "\015\121\016\106\020\005\025\062\026\117\027\076\030" +
    "\013\031\115\032\036\033\012\034\072\037\025\040\023" +
    "\041\014\042\017\043\037\044\044\045\114\046\016\047" +
    "\116\050\035\051\050\052\010\053\015\056\027\057\073" +
    "\060\007\001\001\000\002\001\001\000\100\006\061\012" +
    "\u0121\013\111\014\102\015\121\016\106\020\005\025\062" +
    "\026\117\027\076\030\013\031\115\032\036\033\012\034" +
    "\072\037\025\040\023\041\014\042\017\043\037\044\044" +
    "\045\114\046\016\047\116\050\035\051\050\052\010\053" +
    "\015\056\027\057\073\060\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= funCall 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // number ::= HEX 
            {
              FnPlotValue< ? > RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 String hex = h.substring(2, h.length());
			RESULT = FnPlotValue.make((int) Long.parseLong(hex, 16)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // number ::= BIN 
            {
              FnPlotValue< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 String bin = b.substring(2, b.length());
			RESULT = FnPlotValue.make((int) Long.parseLong(bin, 2)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // number ::= MINUS INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(-1*ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // power ::= factor POW power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpPow(f, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // term ::= term MOD power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // term ::= term DIV power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // term ::= term MUL power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arithExp ::= arithExp SUBTRACT term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // definition ::= DEF VARIABLE expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // letExp ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
            
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // clearExp ::= CLEAR 
            {
              Exp RESULT =null;
		RESULT = new ExpClear(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("clearExp",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // plotExp ::= PLOT expression FOR VARIABLE IN LSQR number COLON number RSQR 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		FnPlotValue< ? > low = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		FnPlotValue< ? > high = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
					RESULT = new ExpPlot(body, v, low.doubleValue(), high.doubleValue());
					
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("plotExp",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expL ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expL ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(e);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expL ::= expL COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(e);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expListE ::= expL 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // funCall ::= LPAREN expression RPAREN LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp fd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCall(fd, el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // funCall ::= VARIABLE LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCall(v, el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // paramL ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // paramL ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <String> ls = new ArrayList<>();
			ls.add(v);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // paramL ::= paramL COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(v);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paramListE ::= paramL 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funDef ::= PROC LPAREN paramListE RPAREN expression 
            {
              Exp RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpFunction (pl, body) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funDef",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // funDef ::= FUN LPAREN paramListE RPAREN MAPS expression 
            {
              Exp RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpFunction (pl, body) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funDef",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // compare ::= boolean 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = b; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // compare ::= arithExp COMPARE arithExp 
            {
              Exp RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpCompare(a1, a2, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logops ::= PAIRQ LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e, e, "type"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logops ::= EQUAL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e1, e2, "equal"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logops ::= EQV LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e1, e2, "eqv"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logops ::= LOGOP compare 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLogOp(c, c, l); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logops ::= compare LOGOP compare 
            {
              Exp RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLogOp(c1, c2, l); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // boolean ::= ELSE 
            {
              Exp RESULT =null;
		 RESULT = new ExpBool(new Boolean(true)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("boolean",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // boolean ::= BOOL 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpBool((Boolean) b); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("boolean",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condition ::= compare 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("condition",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condition ::= logops 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("condition",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // concat ::= list CONCAT expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new 		   ExpConcat(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // concat ::= factor CONCAT expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpConcat(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp proc = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp list = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpListCall(proc, list); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("call",34, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list ::= LSQR expListE RSQR 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list ::= LIST LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // size ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(v, "size"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("size",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // indexP ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(p, new ExpLit(FnPlotValue.make(1))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexP",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // indexP ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(p, new ExpLit(FnPlotValue.make(0))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexP",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // indexV ::= arithExp LSQR arithExp RSQR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new 		ExpIndex(v , a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexV",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // indexV ::= vector LSQR arithExp RSQR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(v , a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexV",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pair ::= EMPTY 
            {
              Exp RESULT =null;
		 RESULT = new 			ExpPair(new ExpNull(), new ExpNull()); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpPair(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // subvector ::= expression FOR VARIABLE IN RANGE LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).right;
		Exp val = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
	RESULT = new ExpVecComp(v, val, start, stop, new ExpBool(new Boolean(true))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // subvector ::= expression FOR VARIABLE IN RANGE LPAREN expression COMMA expression RPAREN IF condition 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).right;
		Exp val = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
	RESULT = new ExpVecComp(v, val, start, stop, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // subvector ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // subvector ::= expression COLON expression 
            {
              Exp RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpSubVector(size, e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vectorExpL ::= subvector 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(e);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vectorExpL",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vectorExpL ::= vectorExpL COMMA subvector 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(e);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vectorExpL",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vector ::= LVEC vectorExpL RVEC 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpVector(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vector",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // caseList ::= condition COLON expression 
            {
              ArrayList<Exp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(new ExpIf (c, body, body));
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseList",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // caseList ::= caseList COMMA condition COLON expression 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(new ExpIf (c, body, body));
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseList",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // caseListE ::= caseList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseListE",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // caseExp ::= CASE LBRACE caseListE RBRACE 
            {
              Exp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> cl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCase(cl); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseExp",41, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ifElseExp ::= IF condition THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp body1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpIf (c, body1, body2) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("ifElseExp",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // character ::= UNI 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString( (char)Integer.parseInt(u.substring(2,6)) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("character",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // character ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString( new Character(c.charAt(2)) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("character",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // string ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp string = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSubStr(start, stop, string); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // string ::= STRING PLUS STRING 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString(s1 + s2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // string ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // literal ::= character 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literal ::= string 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binaryheap ::= INSERT LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int insertleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp insert = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, insert, "insert"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binaryheap ::= DELETEMIN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, "deletemin"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binaryheap ::= GETMIN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, "getmin"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binaryheap ::= HEAPIFY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(v, "heapify"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // loop ::= REPEAT expression UNTIL condition 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(e, c, "repeat"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // loop ::= FOR binding TO expression DO expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(b, e1, e2, "for"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // loop ::= WHILE condition DO expression 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(e, c, "while");  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IOExp ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpReadPrint("readint"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("IOExp",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IOExp ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpReadPrint("read"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("IOExp",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IOExp ::= PRINTLN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpReadPrint(e, "println"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("IOExp",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IOExp ::= PRINT LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpReadPrint(v, "print"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("IOExp",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= IOExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= loop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= binaryheap 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= literal 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= caseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= ifElseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= condition 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= size 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= indexP 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= indexV 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= call 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= concat 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= list 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= BEGIN stmtList END 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= clearExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= plotExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= funDef 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

