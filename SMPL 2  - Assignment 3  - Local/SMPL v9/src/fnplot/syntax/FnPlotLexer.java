/* The following code was generated by JFlex 1.6.1 */

package fnplot.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>FnPlotLexer</tt>
 */
public class FnPlotLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\1\1\0\1\2\1\5\22\0\1\2\1\13"+
    "\1\70\1\24\1\3\1\15\1\3\1\10\1\34\1\35\1\7\1\11"+
    "\1\40\1\12\1\23\1\6\2\55\10\4\1\33\1\67\1\21\1\17"+
    "\1\22\1\20\1\14\6\57\6\3\1\66\15\3\1\52\1\71\1\53"+
    "\1\16\1\3\1\3\1\25\1\54\1\47\1\27\1\50\1\41\1\65"+
    "\1\63\1\51\2\3\1\46\1\43\1\26\1\30\1\44\1\61\1\31"+
    "\1\45\1\32\1\42\1\62\1\3\1\56\1\64\1\60\1\36\1\3"+
    "\1\37\1\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\0\4\3\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\10\3\1\15\1\16\2\3\1\17\1\20\2\21\1\22"+
    "\16\0\1\3\1\0\1\23\1\24\1\3\1\25\1\26"+
    "\1\27\2\0\1\30\2\0\4\3\1\31\1\32\17\3"+
    "\1\33\1\34\1\35\2\3\1\21\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\0\1\45\1\46\1\47"+
    "\1\50\1\51\1\0\1\52\3\0\2\24\1\0\2\3"+
    "\1\0\1\53\1\54\1\55\1\56\1\57\3\3\1\60"+
    "\1\61\7\3\1\62\1\3\1\63\2\3\1\64\7\3"+
    "\2\21\1\65\1\66\1\67\1\0\1\70\1\0\1\3"+
    "\1\24\1\0\1\54\1\55\1\3\1\71\1\72\1\3"+
    "\1\73\1\74\1\3\1\75\1\3\1\76\1\77\1\100"+
    "\1\101\1\3\1\102\1\3\1\103\3\3\1\21\1\24"+
    "\1\104\1\0\1\54\1\55\3\3\1\105\1\106\1\3"+
    "\1\107\4\3\1\110\1\54\1\55\3\3\1\111\1\112"+
    "\1\113\1\3\1\114\1\54\1\55\1\3\1\115\1\116"+
    "\1\117\1\54\1\55\1\3\1\54\1\55\1\120\1\54"+
    "\1\55\30\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\164\0\256\0\350\0\u0122\0\u015c"+
    "\0\256\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u02f2\0\u02f2\0\u02f2\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da"+
    "\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u02f2\0\u0536\0\u0570"+
    "\0\u02f2\0\u02f2\0\u05aa\0\u05e4\0\u02f2\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\256\0\u0984\0\u09be\0\u09f8"+
    "\0\u094a\0\u02f2\0\u02f2\0\u0a32\0\u0a6c\0\u02f2\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u02f2\0\u02f2\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u094a\0\u02f2"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u02f2\0\u02f2\0\u02f2\0\u02f2\0\u02f2"+
    "\0\u02f2\0\u02f2\0\u1050\0\u02f2\0\u02f2\0\u02f2\0\u02f2\0\u02f2"+
    "\0\u108a\0\u02f2\0\u10c4\0\u10fe\0\u1138\0\u02f2\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u02f2\0\u1294\0\u12ce\0\u094a\0\u094a"+
    "\0\u1308\0\u1342\0\u137c\0\u094a\0\u094a\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u094a\0\u154c\0\u094a\0\u1586"+
    "\0\u15c0\0\u094a\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u02f2\0\u02f2\0\u02f2\0\u1804\0\u02f2"+
    "\0\u183e\0\u1878\0\u094a\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u094a\0\u19d4\0\u1a0e\0\u094a\0\u1a48\0\u094a\0\u1a82\0\u094a"+
    "\0\u094a\0\u094a\0\u094a\0\u1abc\0\u094a\0\u1af6\0\u094a\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u05aa\0\u02f2\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\u1d3a\0\u094a\0\u1d74\0\u1dae\0\u094a\0\u1de8"+
    "\0\u1e22\0\u1e5c\0\u1e96\0\u02f2\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u094a\0\u094a\0\u094a\0\u1ff2\0\u094a\0\u202c\0\u2066"+
    "\0\u20a0\0\u094a\0\u094a\0\u094a\0\u20da\0\u2114\0\u214e\0\u2188"+
    "\0\u21c2\0\u094a\0\u21fc\0\u02f2\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4"+
    "\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u26f8\0\u2732\0\u02f2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\3\1\7\1\5"+
    "\1\0\1\5\1\10\5\5\1\11\3\5\1\12\1\5"+
    "\1\13\1\14\1\5\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\5\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\5\1\6"+
    "\5\5\1\37\1\5\1\40\1\5\1\41\1\42\1\0"+
    "\1\43\1\0\3\43\1\0\1\44\61\43\1\45\1\46"+
    "\6\0\1\47\1\50\1\0\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\0\1\60\1\61\2\0\1\62"+
    "\2\0\1\63\44\0\1\64\1\65\1\0\2\64\1\0"+
    "\22\64\6\0\11\64\2\0\1\64\1\65\11\64\6\0"+
    "\1\64\1\6\1\0\2\64\1\0\12\64\1\66\7\64"+
    "\6\0\11\64\2\0\1\64\1\6\11\64\6\0\1\64"+
    "\1\65\1\0\1\67\1\70\1\0\22\64\6\0\11\64"+
    "\2\0\1\64\1\65\11\64\6\0\1\64\1\65\1\0"+
    "\2\64\1\0\11\64\1\71\10\64\6\0\11\64\2\0"+
    "\1\64\1\65\11\64\35\0\1\72\6\0\1\73\1\74"+
    "\4\0\1\75\1\76\3\0\1\77\1\0\1\100\16\0"+
    "\1\64\1\65\1\0\2\64\1\0\17\64\1\101\2\64"+
    "\6\0\11\64\2\0\1\64\1\65\11\64\6\0\1\64"+
    "\1\65\1\0\2\64\1\0\22\64\6\0\7\64\1\102"+
    "\1\64\2\0\1\64\1\65\11\64\6\0\1\64\1\65"+
    "\1\0\2\64\1\0\22\64\6\0\7\64\1\103\1\64"+
    "\2\0\1\64\1\65\11\64\6\0\1\64\1\65\1\0"+
    "\2\64\1\0\22\64\6\0\11\64\2\0\1\64\1\65"+
    "\5\64\1\104\3\64\22\0\1\105\33\0\1\106\113\0"+
    "\1\64\1\65\1\0\2\64\1\0\17\64\1\107\2\64"+
    "\6\0\1\64\1\110\7\64\2\0\1\64\1\65\11\64"+
    "\6\0\1\64\1\65\1\0\2\64\1\0\14\64\1\111"+
    "\5\64\6\0\11\64\2\0\1\64\1\65\11\64\6\0"+
    "\1\64\1\65\1\0\2\64\1\0\14\64\1\112\3\64"+
    "\1\113\1\64\6\0\5\64\1\114\3\64\2\0\1\64"+
    "\1\65\11\64\6\0\1\64\1\65\1\0\2\64\1\0"+
    "\22\64\6\0\1\64\1\115\6\64\1\116\2\0\1\64"+
    "\1\65\11\64\6\0\1\64\1\65\1\0\2\64\1\0"+
    "\22\64\6\0\7\64\1\117\1\120\2\0\1\64\1\65"+
    "\11\64\6\0\1\64\1\65\1\0\2\64\1\0\14\64"+
    "\1\121\1\64\1\122\3\64\6\0\5\64\1\123\3\64"+
    "\2\0\1\64\1\65\11\64\6\0\1\64\1\65\1\0"+
    "\2\64\1\0\22\64\6\0\5\64\1\124\3\64\2\0"+
    "\1\64\1\65\3\64\1\125\5\64\6\0\1\64\1\65"+
    "\1\0\2\64\1\0\15\64\1\126\4\64\6\0\1\127"+
    "\10\64\2\0\1\64\1\65\11\64\36\0\1\130\41\0"+
    "\1\64\1\65\1\0\2\64\1\0\22\64\6\0\7\64"+
    "\1\131\1\64\2\0\1\64\1\65\11\64\6\0\1\64"+
    "\1\65\1\0\2\64\1\0\22\64\6\0\7\64\1\132"+
    "\1\64\2\0\1\64\1\65\11\64\3\0\1\43\1\0"+
    "\3\43\1\0\62\43\2\0\1\43\1\0\3\43\1\0"+
    "\1\67\1\133\60\43\30\0\1\134\3\0\1\135\35\0"+
    "\1\136\2\0\2\137\2\0\1\137\65\0\2\140\2\0"+
    "\1\140\65\0\2\141\2\0\1\141\65\0\2\142\2\0"+
    "\1\142\103\0\1\143\53\0\2\144\2\0\1\144\65\0"+
    "\2\145\2\0\1\145\65\0\2\146\2\0\1\146\65\0"+
    "\2\147\2\0\1\147\65\0\2\150\2\0\1\150\11\0"+
    "\1\151\53\0\2\152\2\0\1\152\11\0\1\153\100\0"+
    "\1\154\74\0\1\155\43\0\2\64\1\0\2\64\1\0"+
    "\22\64\6\0\11\64\2\0\13\64\6\0\1\64\1\66"+
    "\1\0\2\64\1\0\22\64\6\0\11\64\2\0\1\64"+
    "\1\66\11\64\3\0\1\67\1\156\3\67\1\157\64\67"+
    "\3\160\2\161\1\160\1\161\1\162\1\160\22\161\6\160"+
    "\11\161\2\160\13\161\3\160\4\0\1\163\20\0\1\163"+
    "\1\0\1\163\11\0\1\163\5\0\2\163\3\0\2\163"+
    "\1\0\1\163\12\0\10\164\1\0\61\164\55\0\1\165"+
    "\20\0\1\166\20\0\1\166\1\0\1\166\11\0\1\166"+
    "\5\0\2\166\3\0\2\166\1\0\1\166\15\0\2\64"+
    "\1\0\2\64\1\0\21\64\1\167\6\0\11\64\2\0"+
    "\13\64\6\0\2\64\1\0\2\64\1\0\22\64\6\0"+
    "\1\170\4\64\1\171\3\64\2\0\13\64\6\0\2\64"+
    "\1\0\2\64\1\0\14\64\1\172\5\64\6\0\11\64"+
    "\2\0\13\64\6\0\2\64\1\0\2\64\1\0\22\64"+
    "\6\0\7\64\1\173\1\64\2\0\13\64\6\0\2\64"+
    "\1\0\2\64\1\0\20\64\1\174\1\64\6\0\11\64"+
    "\2\0\13\64\6\0\2\64\1\0\2\64\1\0\15\64"+
    "\1\175\4\64\6\0\11\64\2\0\13\64\6\0\2\64"+
    "\1\0\2\64\1\0\22\64\6\0\3\64\1\176\5\64"+
    "\2\0\13\64\6\0\2\64\1\0\2\64\1\0\22\64"+
    "\6\0\10\64\1\177\2\0\13\64\6\0\2\64\1\0"+
    "\2\64\1\0\17\64\1\200\2\64\6\0\10\64\1\201"+
    "\2\0\13\64\6\0\2\64\1\0\2\64\1\0\17\64"+
    "\1\202\2\64\6\0\11\64\2\0\13\64\6\0\2\64"+
    "\1\0\2\64\1\0\22\64\6\0\11\64\2\0\1\203"+
    "\12\64\6\0\2\64\1\0\2\64\1\0\22\64\6\0"+
    "\11\64\2\0\4\64\1\204\6\64\6\0\2\64\1\0"+
    "\2\64\1\0\21\64\1\205\6\0\11\64\2\0\13\64"+
    "\6\0\2\64\1\0\2\64\1\0\22\64\6\0\4\64"+
    "\1\206\4\64\2\0\13\64\6\0\2\64\1\0\2\64"+
    "\1\0\20\64\1\207\1\64\6\0\4\64\1\210\1\211"+
    "\3\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\20\64\1\212\1\64\6\0\11\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\22\64\6\0\7\64\1\213"+
    "\1\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\22\64\6\0\4\64\1\214\4\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\22\64\6\0\1\64\1\215"+
    "\7\64\2\0\6\64\1\216\4\64\6\0\2\64\1\0"+
    "\2\64\1\0\22\64\6\0\4\64\1\217\4\64\2\0"+
    "\13\64\6\0\2\64\1\0\2\64\1\0\14\64\1\220"+
    "\5\64\6\0\11\64\2\0\13\64\6\0\2\64\1\0"+
    "\2\64\1\0\21\64\1\221\6\0\11\64\2\0\13\64"+
    "\3\0\1\222\1\160\3\222\1\160\1\222\1\223\60\222"+
    "\2\160\1\0\2\224\2\0\1\224\65\0\2\225\2\0"+
    "\1\225\65\0\2\226\2\0\1\226\113\0\1\227\43\0"+
    "\2\230\2\0\1\230\65\0\1\156\70\0\7\160\1\231"+
    "\65\160\2\161\1\160\1\161\1\232\1\160\22\161\6\160"+
    "\11\161\2\160\13\161\3\160\3\0\2\64\1\0\1\233"+
    "\1\162\1\0\22\64\6\0\11\64\2\0\13\64\7\0"+
    "\1\234\20\0\1\234\1\0\1\234\11\0\1\234\5\0"+
    "\2\234\3\0\2\234\1\0\1\234\67\0\1\235\20\0"+
    "\1\236\20\0\1\236\1\0\1\236\11\0\1\236\5\0"+
    "\2\236\3\0\2\236\1\0\1\236\15\0\2\64\1\0"+
    "\2\64\1\0\22\64\6\0\7\64\1\237\1\64\2\0"+
    "\13\64\6\0\2\64\1\0\2\64\1\0\16\64\1\240"+
    "\3\64\6\0\11\64\2\0\13\64\6\0\2\64\1\0"+
    "\2\64\1\0\15\64\1\241\4\64\6\0\11\64\2\0"+
    "\13\64\6\0\2\64\1\0\2\64\1\0\22\64\6\0"+
    "\4\64\1\242\4\64\2\0\13\64\6\0\2\64\1\0"+
    "\2\64\1\0\20\64\1\243\1\64\6\0\11\64\2\0"+
    "\13\64\6\0\2\64\1\0\2\64\1\0\22\64\6\0"+
    "\6\64\1\244\2\64\2\0\13\64\6\0\2\64\1\0"+
    "\2\64\1\0\15\64\1\245\4\64\6\0\11\64\2\0"+
    "\13\64\6\0\2\64\1\0\2\64\1\0\21\64\1\246"+
    "\6\0\11\64\2\0\13\64\6\0\2\64\1\0\2\64"+
    "\1\0\22\64\6\0\4\64\1\247\4\64\2\0\13\64"+
    "\6\0\2\64\1\0\2\64\1\0\22\64\6\0\7\64"+
    "\1\250\1\64\2\0\13\64\6\0\2\64\1\0\2\64"+
    "\1\0\21\64\1\251\6\0\11\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\22\64\6\0\7\64\1\252"+
    "\1\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\22\64\6\0\5\64\1\253\3\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\14\64\1\254\5\64\6\0"+
    "\11\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\22\64\6\0\7\64\1\255\1\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\14\64\1\256\5\64\6\0"+
    "\11\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\7\64\1\257\12\64\6\0\11\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\22\64\6\0\7\64\1\260"+
    "\1\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\22\64\6\0\3\64\1\261\5\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\22\64\6\0\11\64\2\0"+
    "\12\64\1\262\3\0\1\222\1\160\3\222\1\160\1\222"+
    "\1\263\60\222\2\160\1\43\1\0\3\43\1\0\1\264"+
    "\1\223\60\43\3\0\2\265\2\0\1\265\64\0\6\160"+
    "\1\156\1\231\65\160\2\161\1\160\1\233\1\232\1\160"+
    "\22\161\6\160\11\161\2\160\13\161\3\160\4\0\1\266"+
    "\20\0\1\266\1\0\1\266\11\0\1\266\5\0\2\266"+
    "\3\0\2\266\1\0\1\266\67\0\1\267\20\0\1\270"+
    "\20\0\1\270\1\0\1\270\11\0\1\270\5\0\2\270"+
    "\3\0\2\270\1\0\1\270\15\0\2\64\1\0\2\64"+
    "\1\0\21\64\1\271\6\0\11\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\22\64\6\0\10\64\1\272"+
    "\2\0\13\64\6\0\2\64\1\0\2\64\1\0\21\64"+
    "\1\273\6\0\11\64\2\0\13\64\6\0\2\64\1\0"+
    "\2\64\1\0\7\64\1\274\12\64\6\0\11\64\2\0"+
    "\13\64\6\0\2\64\1\0\2\64\1\0\21\64\1\275"+
    "\6\0\11\64\2\0\13\64\6\0\2\64\1\0\2\64"+
    "\1\0\21\64\1\276\6\0\11\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\20\64\1\277\1\64\6\0"+
    "\11\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\22\64\6\0\5\64\1\300\3\64\2\0\13\64\6\0"+
    "\2\64\1\0\2\64\1\0\20\64\1\301\1\64\6\0"+
    "\11\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\22\64\6\0\10\64\1\302\2\0\13\64\6\0\2\64"+
    "\1\0\2\64\1\0\22\64\6\0\10\64\1\303\2\0"+
    "\13\64\3\0\1\222\1\160\3\222\1\160\1\264\1\263"+
    "\60\222\2\160\4\0\1\304\20\0\1\304\1\0\1\304"+
    "\11\0\1\304\5\0\2\304\3\0\2\304\1\0\1\304"+
    "\67\0\1\305\20\0\1\306\20\0\1\306\1\0\1\306"+
    "\11\0\1\306\5\0\2\306\3\0\2\306\1\0\1\306"+
    "\15\0\2\64\1\0\2\64\1\0\22\64\6\0\7\64"+
    "\1\307\1\64\2\0\13\64\6\0\2\64\1\0\2\64"+
    "\1\0\15\64\1\310\4\64\6\0\11\64\2\0\13\64"+
    "\6\0\2\64\1\0\2\64\1\0\17\64\1\71\2\64"+
    "\6\0\11\64\2\0\13\64\6\0\2\64\1\0\2\64"+
    "\1\0\22\64\6\0\5\64\1\311\3\64\2\0\13\64"+
    "\6\0\2\64\1\0\2\64\1\0\20\64\1\312\1\64"+
    "\6\0\11\64\2\0\13\64\6\0\2\64\1\0\2\64"+
    "\1\0\7\64\1\313\12\64\6\0\11\64\2\0\13\64"+
    "\6\0\2\64\1\0\2\64\1\0\21\64\1\314\6\0"+
    "\11\64\2\0\13\64\6\0\2\64\1\0\2\64\1\0"+
    "\22\64\6\0\1\315\10\64\2\0\13\64\6\0\2\64"+
    "\1\0\2\64\1\0\15\64\1\316\4\64\6\0\11\64"+
    "\2\0\13\64\60\0\1\317\20\0\1\320\20\0\1\320"+
    "\1\0\1\320\11\0\1\320\5\0\2\320\3\0\2\320"+
    "\1\0\1\320\15\0\2\64\1\0\2\64\1\0\22\64"+
    "\6\0\11\64\2\0\12\64\1\321\6\0\2\64\1\0"+
    "\2\64\1\0\21\64\1\322\6\0\11\64\2\0\13\64"+
    "\6\0\2\64\1\0\2\64\1\0\15\64\1\323\4\64"+
    "\6\0\11\64\2\0\13\64\6\0\2\64\1\0\2\64"+
    "\1\0\22\64\6\0\11\64\2\0\10\64\1\324\2\64"+
    "\60\0\1\325\20\0\1\326\20\0\1\326\1\0\1\326"+
    "\11\0\1\326\5\0\2\326\3\0\2\326\1\0\1\326"+
    "\15\0\2\64\1\0\2\64\1\0\22\64\6\0\10\64"+
    "\1\327\2\0\13\64\60\0\1\330\20\0\1\331\20\0"+
    "\1\331\1\0\1\331\11\0\1\331\5\0\2\331\3\0"+
    "\2\331\1\0\1\331\15\0\2\64\1\0\2\64\1\0"+
    "\15\64\1\332\4\64\6\0\11\64\2\0\13\64\60\0"+
    "\1\333\20\0\1\334\20\0\1\334\1\0\1\334\11\0"+
    "\1\334\5\0\2\334\3\0\2\334\1\0\1\334\67\0"+
    "\1\335\71\0\1\336\71\0\1\337\71\0\1\340\71\0"+
    "\1\341\71\0\1\342\71\0\1\343\71\0\1\344\71\0"+
    "\1\345\71\0\1\346\71\0\1\347\71\0\1\350\71\0"+
    "\1\351\71\0\1\352\71\0\1\353\71\0\1\354\71\0"+
    "\1\355\71\0\1\356\71\0\1\357\71\0\1\360\71\0"+
    "\1\361\71\0\1\362\71\0\1\363\71\0\1\364\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10092];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\7\1\1\0\5\1\5\11\11\1\1\11\2\1"+
    "\2\11\2\1\1\11\16\0\1\1\1\0\4\1\2\11"+
    "\2\0\1\11\2\0\4\1\2\11\21\1\1\11\3\1"+
    "\7\11\1\0\5\11\1\0\1\11\3\0\1\11\1\1"+
    "\1\0\2\1\1\0\1\11\37\1\3\11\1\0\1\11"+
    "\1\0\2\1\1\0\30\1\1\11\1\0\15\1\1\11"+
    "\27\1\1\11\27\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }

    StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FnPlotLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //skip newline, but reset char counter
			yycolumn = 0;
            }
          case 81: break;
          case 2: 
            { //skip whitespace
            }
          case 82: break;
          case 3: 
            { // VARIABLE
	    				return new Symbol(sym.VARIABLE, yytext());
            }
          case 83: break;
          case 4: 
            { // INTEGER
	       			return new Symbol(sym.INTEGER, new Double(yytext()));
            }
          case 84: break;
          case 5: 
            { return new Symbol(sym.MINUS);
            }
          case 85: break;
          case 6: 
            { return new Symbol(sym.QUESTION);
            }
          case 86: break;
          case 7: 
            { return new Symbol(sym.COLON);
            }
          case 87: break;
          case 8: 
            { return new Symbol(sym.LPAREN);
            }
          case 88: break;
          case 9: 
            { return new Symbol(sym.RPAREN);
            }
          case 89: break;
          case 10: 
            { return new Symbol(sym.LBRACE);
            }
          case 90: break;
          case 11: 
            { return new Symbol(sym.RBRACE);
            }
          case 91: break;
          case 12: 
            { return new Symbol(sym.COMMA);
            }
          case 92: break;
          case 13: 
            { return new Symbol(sym.LSQR);
            }
          case 93: break;
          case 14: 
            { return new Symbol(sym.RSQR);
            }
          case 94: break;
          case 15: 
            { return new Symbol(sym.SEMI);
            }
          case 95: break;
          case 16: 
            { string.setLength(0); yybegin(STRING);
            }
          case 96: break;
          case 17: 
            { string.append( yytext() );
            }
          case 97: break;
          case 18: 
            { yybegin(YYINITIAL); return new Symbol(sym.STRING, string.toString());
            }
          case 98: break;
          case 19: 
            { // FLOAT
	       			return new Symbol(sym.INTEGER, 
				new Double(yytext()));
            }
          case 99: break;
          case 20: 
            { /* ignore */
            }
          case 100: break;
          case 21: 
            { return new Symbol(sym.MAPS);
            }
          case 101: break;
          case 22: 
            { return new Symbol(sym.BOOL, new Boolean(true));
            }
          case 102: break;
          case 23: 
            { return new Symbol(sym.BOOL, new Boolean(false));
            }
          case 103: break;
          case 24: 
            { return new Symbol(sym.EMPTY);
            }
          case 104: break;
          case 25: 
            { return new Symbol(sym.ASSIGN);
            }
          case 105: break;
          case 26: 
            { return new Symbol(sym.RVEC);
            }
          case 106: break;
          case 27: 
            { return new Symbol(sym.IN);
            }
          case 107: break;
          case 28: 
            { return new Symbol(sym.IF);
            }
          case 108: break;
          case 29: 
            { return new Symbol(sym.LVEC);
            }
          case 109: break;
          case 30: 
            { string.append('\n');
            }
          case 110: break;
          case 31: 
            { string.append('\t');
            }
          case 111: break;
          case 32: 
            { string.append('\"');
            }
          case 112: break;
          case 33: 
            { return new Symbol(sym.DIV);
            }
          case 113: break;
          case 34: 
            { return new Symbol(sym.MUL);
            }
          case 114: break;
          case 35: 
            { return new Symbol(sym.PLUS);
            }
          case 115: break;
          case 36: 
            { return new Symbol(sym.SUBTRACT);
            }
          case 116: break;
          case 37: 
            { return new Symbol(sym.CONCAT);
            }
          case 117: break;
          case 38: 
            { return new Symbol(sym.MOD);
            }
          case 118: break;
          case 39: 
            { return new Symbol(sym.POW);
            }
          case 119: break;
          case 40: 
            { return new Symbol(sym.COMPARE, "=");
            }
          case 120: break;
          case 41: 
            { return new Symbol(sym.COMPARE, "<");
            }
          case 121: break;
          case 42: 
            { return new Symbol(sym.COMPARE, ">");
            }
          case 122: break;
          case 43: 
            { return new Symbol(sym.CHAR, yytext());
            }
          case 123: break;
          case 44: 
            { return new Symbol(sym.BIN, yytext());
            }
          case 124: break;
          case 45: 
            { return new Symbol(sym.HEX, yytext());
            }
          case 125: break;
          case 46: 
            { return new Symbol(sym.LOGOP, "not");
            }
          case 126: break;
          case 47: 
            { return new Symbol(sym.DEF);
            }
          case 127: break;
          case 48: 
            { return new Symbol(sym.FOR);
            }
          case 128: break;
          case 49: 
            { return new Symbol(sym.FUN);
            }
          case 129: break;
          case 50: 
            { return new Symbol(sym.LET);
            }
          case 130: break;
          case 51: 
            { return new Symbol(sym.CAR);
            }
          case 131: break;
          case 52: 
            { return new Symbol(sym.CDR);
            }
          case 132: break;
          case 53: 
            { return new Symbol(sym.COMPARE, "!=");
            }
          case 133: break;
          case 54: 
            { return new Symbol(sym.COMPARE, "<=");
            }
          case 134: break;
          case 55: 
            { return new Symbol(sym.COMPARE, ">=");
            }
          case 135: break;
          case 56: 
            { return new Symbol(sym.LOGOP, "or");
            }
          case 136: break;
          case 57: 
            { return new Symbol(sym.READ);
            }
          case 137: break;
          case 58: 
            { return new Symbol(sym.THEN);
            }
          case 138: break;
          case 59: 
            { return new Symbol(sym.PAIR);
            }
          case 139: break;
          case 60: 
            { return new Symbol(sym.PROC);
            }
          case 140: break;
          case 61: 
            { return new Symbol(sym.PLOT);
            }
          case 141: break;
          case 62: 
            { return new Symbol(sym.SIZE);
            }
          case 142: break;
          case 63: 
            { return new Symbol(sym.LIST);
            }
          case 143: break;
          case 64: 
            { return new Symbol(sym.CASE);
            }
          case 144: break;
          case 65: 
            { return new Symbol(sym.CALL);
            }
          case 145: break;
          case 66: 
            { return new Symbol(sym.ELSE);
            }
          case 146: break;
          case 67: 
            { return new Symbol(sym.EQV);
            }
          case 147: break;
          case 68: 
            { return new Symbol(sym.LOGOP, "and");
            }
          case 148: break;
          case 69: 
            { return new Symbol(sym.PAIRQ);
            }
          case 149: break;
          case 70: 
            { return new Symbol(sym.PRINT);
            }
          case 150: break;
          case 71: 
            { return new Symbol(sym.CLEAR);
            }
          case 151: break;
          case 72: 
            { return new Symbol(sym.UNI, yytext());
            }
          case 152: break;
          case 73: 
            { return new Symbol(sym.SUBSTR);
            }
          case 153: break;
          case 74: 
            { return new Symbol(sym.EQUAL);
            }
          case 154: break;
          case 75: 
            { return new Symbol(sym.INSERT);
            }
          case 155: break;
          case 76: 
            { return new Symbol(sym.GETMIN);
            }
          case 156: break;
          case 77: 
            { return new Symbol(sym.READINT);
            }
          case 157: break;
          case 78: 
            { return new Symbol(sym.PRINTLN);
            }
          case 158: break;
          case 79: 
            { return new Symbol(sym.HEAPIFY);
            }
          case 159: break;
          case 80: 
            { return new Symbol(sym.DELETEMIN);
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
