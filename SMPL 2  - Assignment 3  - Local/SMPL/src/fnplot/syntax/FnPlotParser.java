
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 02 05:54:10 EST 2020
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 02 05:54:10 EST 2020
  */
public class FnPlotParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\057\006\000\002\057\006" +
    "\000\002\057\006\000\002\057\010\000\002\032\003\000" +
    "\002\032\005\000\002\032\012\000\002\033\003\000\002" +
    "\033\003\000\002\046\003\000\002\040\010\000\002\040" +
    "\003\000\002\037\006\000\002\037\005\000\002\045\005" +
    "\000\002\045\005\000\002\034\005\000\002\036\005\000" +
    "\002\036\003\000\002\035\005\000\002\035\003\000\002" +
    "\035\016\000\002\035\014\000\002\053\010\000\002\054" +
    "\006\000\002\056\003\000\002\055\007\000\002\055\005" +
    "\000\002\041\006\000\002\041\006\000\002\042\006\000" +
    "\002\042\006\000\002\043\006\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\051\005\000\002\051" +
    "\004\000\002\050\005\000\002\050\010\000\002\050\010" +
    "\000\002\050\006\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\047\003\000\002" +
    "\061\006\000\002\061\006\000\002\061\005\000\002\061" +
    "\005\000\002\060\006\000\002\060\010\000\002\060\006" +
    "\000\002\027\014\000\002\030\003\000\002\025\010\000" +
    "\002\025\007\000\002\021\003\000\002\022\005\000\002" +
    "\022\006\000\002\022\003\000\002\022\004\000\002\022" +
    "\003\000\002\044\010\000\002\026\006\000\002\026\010" +
    "\000\002\023\003\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\006\006\000\002\011\005\000\002" +
    "\007\004\000\002\007\003\000\002\010\005\000\002\010" +
    "\003\000\002\005\006\000\002\005\006\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\020\005\000\002\020\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\005\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\136\004\030\006\060\010\045\011\022\021" +
    "\073\022\124\024\026\031\105\033\043\034\101\035\115" +
    "\036\044\040\102\041\114\042\023\043\050\044\061\045" +
    "\036\046\125\047\034\050\103\052\057\053\107\054\067" +
    "\055\042\056\010\057\035\061\076\063\123\064\004\065" +
    "\070\066\066\067\053\070\111\071\055\072\071\074\047" +
    "\076\106\102\024\103\054\105\032\106\112\107\051\110" +
    "\033\111\065\112\012\001\002\000\042\005\uffda\023\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\032\uffda\051\uffda\052" +
    "\uffda\062\uffda\071\uffda\073\uffda\075\uffda\100\uffda\105\uffda" +
    "\113\uffda\001\002\000\036\005\uffc0\023\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\032\uffc0\051\uffc0\052\uffc0\062\uffc0" +
    "\071\uffc0\073\uffc0\075\uffc0\100\uffc0\001\002\000\144\002" +
    "\ufffe\004\ufffe\006\ufffe\010\ufffe\011\ufffe\021\ufffe\022\ufffe" +
    "\024\ufffe\025\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\052\ufffe\053\ufffe\054\ufffe\055" +
    "\ufffe\056\ufffe\057\ufffe\061\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\074\ufffe\076" +
    "\ufffe\077\ufffe\102\ufffe\103\ufffe\105\ufffe\106\ufffe\107\ufffe" +
    "\110\ufffe\111\ufffe\112\ufffe\001\002\000\060\005\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\023\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\051\uff8e\052" +
    "\uff8e\062\uff8e\071\uff8e\073\uff8e\075\uff8e\100\uff8e\104\uff8e" +
    "\105\uff8e\113\uff8e\001\002\000\004\004\u0131\001\002\000" +
    "\036\005\ufff2\023\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\032\ufff2\051\ufff2\052\ufff2\062\ufff2\071\ufff2\073\ufff2\075" +
    "\ufff2\100\ufff2\001\002\000\064\005\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\020\uff89\023\uff89\025\uff89\026" +
    "\uff89\027\uff89\030\uff89\031\uff89\032\uff89\051\uff89\052\uff89" +
    "\060\uff89\062\uff89\071\uff89\073\uff89\075\uff89\100\uff89\104" +
    "\uff89\105\uff89\113\uff89\001\002\000\036\005\uffee\023\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\032\uffee\051\uffee\052" +
    "\uffee\062\uffee\071\uffee\073\uffee\075\uffee\100\uffee\001\002" +
    "\000\042\005\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\032\uffe7\051\uffe7\052\uffe7\062\uffe7\071\uffe7\073\uffe7" +
    "\075\uffe7\100\uffe7\105\uffe7\113\uffe7\001\002\000\036\005" +
    "\ufff9\023\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\032\ufff9" +
    "\051\ufff9\052\ufff9\062\ufff9\071\ufff9\073\ufff9\075\ufff9\100" +
    "\ufff9\001\002\000\042\005\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\032\uffe6\051\uffe6\052\uffe6\062\uffe6\071" +
    "\uffe6\073\uffe6\075\uffe6\100\uffe6\105\uffe6\113\uffe6\001\002" +
    "\000\036\005\ufff1\023\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\032\ufff1\051\ufff1\052\ufff1\062\ufff1\071\ufff1\073\ufff1" +
    "\075\ufff1\100\ufff1\001\002\000\042\005\uffe4\023\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\051\uffe4\052\uffe4" +
    "\062\uffe4\071\uffe4\073\uffe4\075\uffe4\100\uffe4\105\uffe4\113" +
    "\uffe4\001\002\000\042\005\uffe5\023\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\032\uffe5\051\uffe5\052\uffe5\062\uffe5\071" +
    "\uffe5\073\uffe5\075\uffe5\100\uffe5\105\uffe5\113\uffe5\001\002" +
    "\000\036\005\uffac\023\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\032\uffac\051\uffac\052\uffac\062\uffac\071\uffac\073\uffac" +
    "\075\uffac\100\uffac\001\002\000\004\004\u012c\001\002\000" +
    "\064\005\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\020\uff8b\023\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\051\uff8b\052\uff8b\060\uff8b\062\uff8b\071\uff8b" +
    "\073\uff8b\075\uff8b\100\uff8b\104\uff8b\105\uff8b\113\uff8b\001" +
    "\002\000\042\005\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\032\uffeb\051\uffeb\052\uffeb\062\uffeb\071\uffeb\073" +
    "\uffeb\075\uffeb\100\uffeb\105\uffeb\113\uffeb\001\002\000\136" +
    "\004\030\006\060\010\045\011\022\021\073\022\124\024" +
    "\026\031\105\033\043\034\101\035\115\036\044\040\102" +
    "\041\114\042\023\043\050\044\061\045\036\046\125\047" +
    "\034\050\103\052\057\053\107\054\067\055\042\056\010" +
    "\057\035\061\076\063\123\064\004\065\070\066\066\067" +
    "\053\070\111\071\055\072\071\074\047\076\106\102\024" +
    "\103\054\105\032\106\112\107\051\110\033\111\065\112" +
    "\012\001\002\000\042\005\uffe9\023\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\032\uffe9\051\uffe9\052\uffe9\060\u0128\062" +
    "\uffe9\071\uffe9\073\uffe9\075\uffe9\100\uffe9\113\uffe9\001\002" +
    "\000\134\004\030\006\060\010\045\011\022\021\073\022" +
    "\124\024\026\031\105\033\043\034\101\035\115\036\044" +
    "\040\102\041\114\042\023\043\050\044\061\045\036\046" +
    "\125\050\103\052\057\053\107\054\067\055\042\056\010" +
    "\057\035\061\076\063\123\064\004\065\070\066\066\067" +
    "\053\070\111\071\055\072\071\074\047\076\106\102\024" +
    "\103\127\105\032\106\112\107\051\110\033\111\065\112" +
    "\012\001\002\000\042\005\uffe8\023\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\032\uffe8\051\uffe8\052\uffe8\062\uffe8\071" +
    "\uffe8\073\uffe8\075\uffe8\100\uffe8\105\uffe8\113\uffe8\001\002" +
    "\000\066\004\030\021\073\031\105\033\043\034\101\035" +
    "\115\036\044\040\102\041\114\042\023\043\050\044\061" +
    "\061\076\063\123\064\004\065\070\066\066\067\053\070" +
    "\111\102\024\103\127\106\112\107\051\110\033\111\065" +
    "\112\012\001\002\000\042\005\uffdb\023\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\032\uffdb\051\uffdb\052\uffdb\062\uffdb" +
    "\071\uffdb\073\uffdb\075\uffdb\100\uffdb\105\uffdb\113\uffdb\001" +
    "\002\000\004\103\u011f\001\002\000\004\004\u011d\001\002" +
    "\000\004\004\u0119\001\002\000\036\005\uffc2\023\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\032\uffc2\051\uffc2\052\uffc2" +
    "\062\uffc2\071\uffc2\073\uffc2\075\uffc2\100\uffc2\001\002\000" +
    "\042\005\uffec\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\032\uffec\051\uffec\052\uffec\062\uffec\071\uffec\073\uffec\075" +
    "\uffec\100\uffec\105\uffec\113\uffec\001\002\000\064\005\uff85" +
    "\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\020\uff85\023" +
    "\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85" +
    "\051\uff85\052\uff85\060\uff85\062\uff85\071\uff85\073\uff85\075" +
    "\uff85\100\uff85\104\uff85\105\uff85\113\uff85\001\002\000\004" +
    "\004\u0116\001\002\000\042\005\uffd8\023\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\032\uffd8\051\uffd8\052\uffd8\062\uffd8" +
    "\071\uffd8\073\uffd8\075\uffd8\100\uffd8\105\uffd8\113\uffd8\001" +
    "\002\000\004\004\u0113\001\002\000\134\004\030\006\060" +
    "\010\045\011\022\021\073\022\124\024\026\031\105\033" +
    "\043\034\101\035\115\036\044\040\102\041\114\042\023" +
    "\043\050\044\061\045\036\046\125\050\103\052\057\053" +
    "\107\054\067\055\042\056\010\057\035\061\076\063\123" +
    "\064\004\065\070\066\066\067\053\070\111\071\055\072" +
    "\071\074\047\076\106\102\024\103\127\105\032\106\112" +
    "\107\051\110\033\111\065\112\012\001\002\000\036\005" +
    "\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4" +
    "\051\ufff4\052\ufff4\062\ufff4\071\ufff4\073\ufff4\075\ufff4\100" +
    "\ufff4\001\002\000\134\004\030\006\060\010\045\011\022" +
    "\021\073\022\124\024\026\031\105\033\043\034\101\035" +
    "\115\036\044\040\102\041\114\042\023\043\050\044\061" +
    "\045\036\046\125\050\103\052\057\053\107\054\067\055" +
    "\042\056\010\057\035\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\071\055\072\071\074\047\076" +
    "\106\102\024\103\127\105\032\106\112\107\051\110\033" +
    "\111\065\112\012\001\002\000\004\004\u0102\001\002\000" +
    "\042\005\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\032\uffdc\051\uffdc\052\uffdc\062\uffdc\071\uffdc\073\uffdc\075" +
    "\uffdc\100\uffdc\105\uffdc\113\uffdc\001\002\000\036\005\ufff3" +
    "\023\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\051" +
    "\ufff3\052\ufff3\062\ufff3\071\ufff3\073\ufff3\075\ufff3\100\ufff3" +
    "\001\002\000\004\004\377\001\002\000\034\004\134\012" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\374\020\uff87" +
    "\027\uff87\031\uff87\060\uff87\104\uff87\113\uff87\001\002\000" +
    "\004\103\146\001\002\000\140\002\001\004\030\006\060" +
    "\010\045\011\022\021\073\022\124\024\026\031\105\033" +
    "\043\034\101\035\115\036\044\040\102\041\114\042\023" +
    "\043\050\044\061\045\036\046\125\047\034\050\103\052" +
    "\057\053\107\054\067\055\042\056\010\057\035\061\076" +
    "\063\123\064\004\065\070\066\066\067\053\070\111\071" +
    "\055\072\071\074\047\076\106\102\024\103\054\105\032" +
    "\106\112\107\051\110\033\111\065\112\012\001\002\000" +
    "\036\005\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\032\uffb5\051\uffb5\052\uffb5\062\uffb5\071\uffb5\073\uffb5\075" +
    "\uffb5\100\uffb5\001\002\000\004\004\351\001\002\000\004" +
    "\004\346\001\002\000\144\002\ufffd\004\ufffd\006\ufffd\010" +
    "\ufffd\011\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd\031\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\061" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\074\ufffd\076\ufffd\077\ufffd\102\ufffd\103" +
    "\ufffd\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\112\ufffd" +
    "\001\002\000\036\005\ufff8\023\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\032\ufff8\051\ufff8\052\ufff8\062\ufff8\071\ufff8" +
    "\073\ufff8\075\ufff8\100\ufff8\001\002\000\036\005\ufffb\023" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\032\ufffb\051\ufffb" +
    "\052\ufffb\062\ufffb\071\ufffb\073\ufffb\075\ufffb\100\ufffb\001" +
    "\002\000\064\005\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\020\uff8a\023\uff8a\025\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\032\uff8a\051\uff8a\052\uff8a\060\uff8a\062\uff8a" +
    "\071\uff8a\073\uff8a\075\uff8a\100\uff8a\104\uff8a\105\uff8a\113" +
    "\uff8a\001\002\000\004\004\343\001\002\000\004\004\340" +
    "\001\002\000\004\004\335\001\002\000\134\004\030\006" +
    "\060\010\045\011\022\021\073\022\124\024\026\031\105" +
    "\033\043\034\101\035\115\036\044\040\102\041\114\042" +
    "\023\043\050\044\061\045\036\046\125\050\103\052\057" +
    "\053\107\054\067\055\042\056\010\057\035\061\076\063" +
    "\123\064\004\065\070\066\066\067\053\070\111\071\055" +
    "\072\071\074\047\076\106\102\024\103\127\105\032\106" +
    "\112\107\051\110\033\111\065\112\012\001\002\000\004" +
    "\002\331\001\002\000\020\004\030\021\073\041\114\102" +
    "\024\103\127\111\065\112\012\001\002\000\044\005\uffea" +
    "\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\325\032" +
    "\uffea\051\uffea\052\uffea\062\uffea\071\uffea\073\uffea\075\uffea" +
    "\100\uffea\105\uffea\113\uffea\001\002\000\036\005\uffef\023" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\051\uffef" +
    "\052\uffef\062\uffef\071\uffef\073\uffef\075\uffef\100\uffef\001" +
    "\002\000\134\004\030\006\060\010\045\011\022\021\073" +
    "\022\124\024\026\031\105\033\043\034\101\035\115\036" +
    "\044\040\102\041\114\042\023\043\050\044\061\045\036" +
    "\046\125\050\103\052\057\053\107\054\067\055\042\056" +
    "\010\057\035\061\076\063\123\064\004\065\070\066\066" +
    "\067\053\070\111\071\055\072\071\074\047\076\106\102" +
    "\024\103\127\105\032\106\112\107\051\110\033\111\065" +
    "\112\012\001\002\000\004\027\301\001\002\000\036\005" +
    "\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa" +
    "\051\ufffa\052\ufffa\062\ufffa\071\ufffa\073\ufffa\075\ufffa\100" +
    "\ufffa\001\002\000\004\004\274\001\002\000\004\004\271" +
    "\001\002\000\134\004\030\006\060\010\045\011\022\021" +
    "\073\022\124\024\026\031\105\033\043\034\101\035\115" +
    "\036\044\040\102\041\114\042\023\043\050\044\061\045" +
    "\036\046\125\050\103\052\057\053\107\054\067\055\042" +
    "\056\010\057\035\061\076\063\123\064\004\065\070\066" +
    "\066\067\053\070\111\071\055\072\071\074\047\076\106" +
    "\102\024\103\127\105\032\106\112\107\051\110\033\111" +
    "\065\112\012\001\002\000\060\005\uff92\012\uff92\013\uff92" +
    "\014\213\015\214\016\212\023\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\032\uff92\051\uff92\052\uff92\062\uff92" +
    "\071\uff92\073\uff92\075\uff92\100\uff92\104\uff92\105\uff92\113" +
    "\uff92\001\002\000\140\004\030\006\060\010\045\011\022" +
    "\021\073\022\124\024\026\026\uff82\031\105\032\uff82\033" +
    "\043\034\101\035\115\036\044\040\102\041\114\042\023" +
    "\043\050\044\061\045\036\046\125\050\103\052\057\053" +
    "\107\054\067\055\042\056\010\057\035\061\076\063\123" +
    "\064\004\065\070\066\066\067\053\070\111\071\055\072" +
    "\071\074\047\076\106\102\024\103\127\105\032\106\112" +
    "\107\051\110\033\111\065\112\012\001\002\000\136\004" +
    "\030\006\060\010\045\011\022\021\073\022\124\024\026" +
    "\031\105\033\043\034\101\035\115\036\044\040\102\041" +
    "\114\042\023\043\050\044\061\045\036\046\125\047\034" +
    "\050\103\052\057\053\107\054\067\055\042\056\010\057" +
    "\035\061\076\063\123\064\004\065\070\066\066\067\053" +
    "\070\111\071\055\072\071\074\047\076\106\102\024\103" +
    "\054\105\032\106\112\107\051\110\033\111\065\112\012" +
    "\001\002\000\004\024\244\001\002\000\064\005\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\020\uff88\023\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\051" +
    "\uff88\052\uff88\060\uff88\062\uff88\071\uff88\073\uff88\075\uff88" +
    "\100\uff88\104\uff88\105\uff88\113\uff88\001\002\000\004\004" +
    "\237\001\002\000\044\005\uffdf\012\235\023\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\032\uffdf\051\uffdf\052\uffdf\062" +
    "\uffdf\071\uffdf\073\uffdf\075\uffdf\100\uffdf\105\uffdf\113\uffdf" +
    "\001\002\000\050\005\uffed\012\205\013\204\023\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\203\032\uffed\051\uffed" +
    "\052\uffed\062\uffed\071\uffed\073\uffed\075\uffed\100\uffed\104" +
    "\202\113\206\001\002\000\004\004\232\001\002\000\004" +
    "\004\227\001\002\000\036\005\ufff5\023\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\032\ufff5\051\ufff5\052\ufff5\062\ufff5" +
    "\071\ufff5\073\ufff5\075\ufff5\100\ufff5\001\002\000\040\005" +
    "\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\032\ufff0" +
    "\051\ufff0\052\ufff0\062\ufff0\071\ufff0\073\ufff0\075\ufff0\100" +
    "\ufff0\113\224\001\002\000\040\005\uffc1\023\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\032\uffc1\051\uffc1\052\uffc1\062" +
    "\uffc1\071\uffc1\073\uffc1\075\uffc1\100\uffc1\105\175\001\002" +
    "\000\064\005\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\020\uff86\023\uff86\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\051\uff86\052\uff86\060\uff86\062\uff86\071" +
    "\uff86\073\uff86\075\uff86\100\uff86\104\uff86\105\uff86\113\uff86" +
    "\001\002\000\062\005\uff8c\012\uff8c\013\uff8c\014\uff8c\015" +
    "\uff8c\016\uff8c\020\170\023\uff8c\025\uff8c\026\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\051\uff8c\052\uff8c\060\171\062" +
    "\uff8c\071\uff8c\073\uff8c\075\uff8c\100\uff8c\104\uff8c\113\uff8c" +
    "\001\002\000\004\004\161\001\002\000\006\023\uff82\103" +
    "\146\001\002\000\004\004\126\001\002\000\134\004\030" +
    "\006\060\010\045\011\022\021\073\022\124\024\026\031" +
    "\105\033\043\034\101\035\115\036\044\040\102\041\114" +
    "\042\023\043\050\044\061\045\036\046\125\050\103\052" +
    "\057\053\107\054\067\055\042\056\010\057\035\061\076" +
    "\063\123\064\004\065\070\066\066\067\053\070\111\071" +
    "\055\072\071\074\047\076\106\102\024\103\127\105\032" +
    "\106\112\107\051\110\033\111\065\112\012\001\002\000" +
    "\066\004\134\005\uff87\012\uff87\013\uff87\014\uff87\015\uff87" +
    "\016\uff87\020\uff87\023\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\051\uff87\052\uff87\060\uff87\062\uff87" +
    "\071\uff87\073\uff87\075\uff87\100\uff87\104\uff87\105\uff87\113" +
    "\uff87\001\002\000\004\026\131\001\002\000\134\004\030" +
    "\006\060\010\045\011\022\021\073\022\124\024\026\031" +
    "\105\033\043\034\101\035\115\036\044\040\102\041\114" +
    "\042\023\043\050\044\061\045\036\046\125\050\103\052" +
    "\057\053\107\054\067\055\042\056\010\057\035\061\076" +
    "\063\123\064\004\065\070\066\066\067\053\070\111\071" +
    "\055\072\071\074\047\076\106\102\024\103\127\105\032" +
    "\106\112\107\051\110\033\111\065\112\012\001\002\000" +
    "\004\005\133\001\002\000\036\005\uffa3\023\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\032\uffa3\051\uffa3\052\uffa3\062" +
    "\uffa3\071\uffa3\073\uffa3\075\uffa3\100\uffa3\001\002\000\140" +
    "\004\030\005\uff82\006\060\010\045\011\022\021\073\022" +
    "\124\024\026\026\uff82\031\105\033\043\034\101\035\115" +
    "\036\044\040\102\041\114\042\023\043\050\044\061\045" +
    "\036\046\125\050\103\052\057\053\107\054\067\055\042" +
    "\056\010\057\035\061\076\063\123\064\004\065\070\066" +
    "\066\067\053\070\111\071\055\072\071\074\047\076\106" +
    "\102\024\103\127\105\032\106\112\107\051\110\033\111" +
    "\065\112\012\001\002\000\010\005\uffa0\026\142\032\uffa0" +
    "\001\002\000\010\005\uff9e\026\uff9e\032\uff9e\001\002\000" +
    "\004\005\141\001\002\000\010\005\uff9d\026\uff9d\032\uff9d" +
    "\001\002\000\064\005\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\020\uffa2\023\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\051\uffa2\052\uffa2\060\uffa2\062" +
    "\uffa2\071\uffa2\073\uffa2\075\uffa2\100\uffa2\104\uffa2\105\uffa2" +
    "\113\uffa2\001\002\000\134\004\030\006\060\010\045\011" +
    "\022\021\073\022\124\024\026\031\105\033\043\034\101" +
    "\035\115\036\044\040\102\041\114\042\023\043\050\044" +
    "\061\045\036\046\125\050\103\052\057\053\107\054\067" +
    "\055\042\056\010\057\035\061\076\063\123\064\004\065" +
    "\070\066\066\067\053\070\111\071\055\072\071\074\047" +
    "\076\106\102\024\103\127\105\032\106\112\107\051\110" +
    "\033\111\065\112\012\001\002\000\010\005\uff9f\026\uff9f" +
    "\032\uff9f\001\002\000\004\023\uff99\001\002\000\006\023" +
    "\uff82\026\154\001\002\000\004\017\152\001\002\000\004" +
    "\023\150\001\002\000\134\004\030\006\060\010\045\011" +
    "\022\021\073\022\124\024\026\031\105\033\043\034\101" +
    "\035\115\036\044\040\102\041\114\042\023\043\050\044" +
    "\061\045\036\046\125\050\103\052\057\053\107\054\067" +
    "\055\042\056\010\057\035\061\076\063\123\064\004\065" +
    "\070\066\066\067\053\070\111\071\055\072\071\074\047" +
    "\076\106\102\024\103\127\105\032\106\112\107\051\110" +
    "\033\111\065\112\012\001\002\000\036\005\uff9c\023\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\030\uff9c\032\uff9c\051\uff9c\052" +
    "\uff9c\062\uff9c\071\uff9c\073\uff9c\075\uff9c\100\uff9c\001\002" +
    "\000\134\004\030\006\060\010\045\011\022\021\073\022" +
    "\124\024\026\031\105\033\043\034\101\035\115\036\044" +
    "\040\102\041\114\042\023\043\050\044\061\045\036\046" +
    "\125\050\103\052\057\053\107\054\067\055\042\056\010" +
    "\057\035\061\076\063\123\064\004\065\070\066\066\067" +
    "\053\070\111\071\055\072\071\074\047\076\106\102\024" +
    "\103\127\105\032\106\112\107\051\110\033\111\065\112" +
    "\012\001\002\000\010\023\uff9b\026\uff9b\100\uff9b\001\002" +
    "\000\004\103\146\001\002\000\004\023\uff97\001\002\000" +
    "\004\023\uff9a\001\002\000\006\023\uff82\026\154\001\002" +
    "\000\004\023\uff98\001\002\000\134\004\030\006\060\010" +
    "\045\011\022\021\073\022\124\024\026\031\105\033\043" +
    "\034\101\035\115\036\044\040\102\041\114\042\023\043" +
    "\050\044\061\045\036\046\125\050\103\052\057\053\107" +
    "\054\067\055\042\056\010\057\035\061\076\063\123\064" +
    "\004\065\070\066\066\067\053\070\111\071\055\072\071" +
    "\074\047\076\106\102\024\103\127\105\032\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\004\026\163" +
    "\001\002\000\134\004\030\006\060\010\045\011\022\021" +
    "\073\022\124\024\026\031\105\033\043\034\101\035\115" +
    "\036\044\040\102\041\114\042\023\043\050\044\061\045" +
    "\036\046\125\050\103\052\057\053\107\054\067\055\042" +
    "\056\010\057\035\061\076\063\123\064\004\065\070\066" +
    "\066\067\053\070\111\071\055\072\071\074\047\076\106" +
    "\102\024\103\127\105\032\106\112\107\051\110\033\111" +
    "\065\112\012\001\002\000\004\026\165\001\002\000\134" +
    "\004\030\006\060\010\045\011\022\021\073\022\124\024" +
    "\026\031\105\033\043\034\101\035\115\036\044\040\102" +
    "\041\114\042\023\043\050\044\061\045\036\046\125\050" +
    "\103\052\057\053\107\054\067\055\042\056\010\057\035" +
    "\061\076\063\123\064\004\065\070\066\066\067\053\070" +
    "\111\071\055\072\071\074\047\076\106\102\024\103\127" +
    "\105\032\106\112\107\051\110\033\111\065\112\012\001" +
    "\002\000\004\005\167\001\002\000\042\005\uffdd\023\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\032\uffdd\051\uffdd\052" +
    "\uffdd\062\uffdd\071\uffdd\073\uffdd\075\uffdd\100\uffdd\105\uffdd" +
    "\113\uffdd\001\002\000\020\004\030\021\073\041\114\102" +
    "\024\103\127\111\065\112\012\001\002\000\134\004\030" +
    "\006\060\010\045\011\022\021\073\022\124\024\026\031" +
    "\105\033\043\034\101\035\115\036\044\040\102\041\114" +
    "\042\023\043\050\044\061\045\036\046\125\050\103\052" +
    "\057\053\107\054\067\055\042\056\010\057\035\061\076" +
    "\063\123\064\004\065\070\066\066\067\053\070\111\071" +
    "\055\072\071\074\047\076\106\102\024\103\127\105\032" +
    "\106\112\107\051\110\033\111\065\112\012\001\002\000" +
    "\036\005\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\032\uffd5\051\uffd5\052\uffd5\062\uffd5\071\uffd5\073\uffd5\075" +
    "\uffd5\100\uffd5\001\002\000\060\005\uff8d\012\uff8d\013\uff8d" +
    "\014\uff8d\015\uff8d\016\uff8d\023\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\051\uff8d\052\uff8d\062\uff8d" +
    "\071\uff8d\073\uff8d\075\uff8d\100\uff8d\104\uff8d\105\uff8d\113" +
    "\uff8d\001\002\000\062\005\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\016\uff8c\020\170\023\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\051\uff8c\052\uff8c\062\uff8c" +
    "\071\uff8c\073\uff8c\075\uff8c\100\uff8c\104\uff8c\105\uff8c\113" +
    "\uff8c\001\002\000\066\004\030\021\073\031\105\033\043" +
    "\034\101\035\115\036\044\040\102\041\114\042\023\043" +
    "\050\044\061\061\076\063\123\064\004\065\070\066\066" +
    "\067\053\070\111\102\024\103\127\106\112\107\051\110" +
    "\033\111\065\112\012\001\002\000\036\005\uffbf\023\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\051\uffbf\052" +
    "\uffbf\062\uffbf\071\uffbf\073\uffbf\075\uffbf\100\uffbf\001\002" +
    "\000\004\113\224\001\002\000\042\005\uffe9\023\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9\051\uffe9\052\uffe9" +
    "\062\uffe9\071\uffe9\073\uffe9\075\uffe9\100\uffe9\105\uffe9\113" +
    "\uffe9\001\002\000\014\012\205\013\204\031\203\104\202" +
    "\113\206\001\002\000\020\004\030\021\073\041\114\102" +
    "\024\103\127\111\065\112\012\001\002\000\020\004\030" +
    "\021\073\041\114\102\024\103\127\111\065\112\012\001" +
    "\002\000\020\004\030\021\073\041\114\102\024\103\127" +
    "\111\065\112\012\001\002\000\020\004\030\021\073\041" +
    "\114\102\024\103\127\111\065\112\012\001\002\000\060" +
    "\004\030\021\073\031\105\033\043\034\101\035\115\036" +
    "\044\040\102\041\114\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\102\024\103\127\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\040\005\uffb8" +
    "\023\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\051" +
    "\uffb8\052\uffb8\062\uffb8\071\uffb8\073\uffb8\075\uffb8\100\uffb8" +
    "\105\uffb8\001\002\000\046\005\uffb6\012\205\013\204\023" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\203\032\uffb6" +
    "\051\uffb6\052\uffb6\062\uffb6\071\uffb6\073\uffb6\075\uffb6\100" +
    "\uffb6\105\uffb6\001\002\000\060\005\uff94\012\uff94\013\uff94" +
    "\014\213\015\214\016\212\023\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\032\uff94\051\uff94\052\uff94\062\uff94" +
    "\071\uff94\073\uff94\075\uff94\100\uff94\104\uff94\105\uff94\113" +
    "\uff94\001\002\000\020\004\030\021\073\041\114\102\024" +
    "\103\127\111\065\112\012\001\002\000\020\004\030\021" +
    "\073\041\114\102\024\103\127\111\065\112\012\001\002" +
    "\000\020\004\030\021\073\041\114\102\024\103\127\111" +
    "\065\112\012\001\002\000\060\005\uff90\012\uff90\013\uff90" +
    "\014\uff90\015\uff90\016\uff90\023\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\051\uff90\052\uff90\062\uff90" +
    "\071\uff90\073\uff90\075\uff90\100\uff90\104\uff90\105\uff90\113" +
    "\uff90\001\002\000\060\005\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\023\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\032\uff91\051\uff91\052\uff91\062\uff91\071\uff91" +
    "\073\uff91\075\uff91\100\uff91\104\uff91\105\uff91\113\uff91\001" +
    "\002\000\060\005\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\023\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\051\uff8f\052\uff8f\062\uff8f\071\uff8f\073\uff8f" +
    "\075\uff8f\100\uff8f\104\uff8f\105\uff8f\113\uff8f\001\002\000" +
    "\060\005\uff93\012\uff93\013\uff93\014\213\015\214\016\212" +
    "\023\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\051\uff93\052\uff93\062\uff93\071\uff93\073\uff93\075\uff93" +
    "\100\uff93\104\uff93\105\uff93\113\uff93\001\002\000\010\012" +
    "\205\013\204\032\222\001\002\000\042\005\uffc6\023\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6\051\uffc6\052" +
    "\uffc6\062\uffc6\071\uffc6\073\uffc6\075\uffc6\100\uffc6\105\uffc6" +
    "\113\uffc6\001\002\000\044\005\uffbd\012\205\013\204\023" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd\051\uffbd" +
    "\052\uffbd\062\uffbd\071\uffbd\073\uffbd\075\uffbd\100\uffbd\105" +
    "\uffbd\001\002\000\060\004\030\021\073\031\105\033\043" +
    "\034\101\035\115\036\044\040\102\041\114\061\076\063" +
    "\123\064\004\065\070\066\066\067\053\070\111\102\024" +
    "\103\127\106\112\107\051\110\033\111\065\112\012\001" +
    "\002\000\040\005\uffb7\023\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\032\uffb7\051\uffb7\052\uffb7\062\uffb7\071\uffb7\073" +
    "\uffb7\075\uffb7\100\uffb7\105\uffb7\001\002\000\046\005\uffb9" +
    "\012\205\013\204\023\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\203\032\uffb9\051\uffb9\052\uffb9\062\uffb9\071\uffb9" +
    "\073\uffb9\075\uffb9\100\uffb9\105\uffb9\001\002\000\134\004" +
    "\030\006\060\010\045\011\022\021\073\022\124\024\026" +
    "\031\105\033\043\034\101\035\115\036\044\040\102\041" +
    "\114\042\023\043\050\044\061\045\036\046\125\050\103" +
    "\052\057\053\107\054\067\055\042\056\010\057\035\061" +
    "\076\063\123\064\004\065\070\066\066\067\053\070\111" +
    "\071\055\072\071\074\047\076\106\102\024\103\127\105" +
    "\032\106\112\107\051\110\033\111\065\112\012\001\002" +
    "\000\004\005\231\001\002\000\042\005\uffc5\023\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\051\uffc5\052\uffc5" +
    "\062\uffc5\071\uffc5\073\uffc5\075\uffc5\100\uffc5\105\uffc5\113" +
    "\uffc5\001\002\000\134\004\030\006\060\010\045\011\022" +
    "\021\073\022\124\024\026\031\105\033\043\034\101\035" +
    "\115\036\044\040\102\041\114\042\023\043\050\044\061" +
    "\045\036\046\125\050\103\052\057\053\107\054\067\055" +
    "\042\056\010\057\035\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\071\055\072\071\074\047\076" +
    "\106\102\024\103\127\105\032\106\112\107\051\110\033" +
    "\111\065\112\012\001\002\000\004\005\234\001\002\000" +
    "\064\005\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\020\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\051\uffc3\052\uffc3\060\uffc3\062\uffc3\071\uffc3" +
    "\073\uffc3\075\uffc3\100\uffc3\104\uffc3\105\uffc3\113\uffc3\001" +
    "\002\000\004\106\236\001\002\000\042\005\uffde\023\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\032\uffde\051\uffde\052" +
    "\uffde\062\uffde\071\uffde\073\uffde\075\uffde\100\uffde\105\uffde" +
    "\113\uffde\001\002\000\134\004\030\006\060\010\045\011" +
    "\022\021\073\022\124\024\026\031\105\033\043\034\101" +
    "\035\115\036\044\040\102\041\114\042\023\043\050\044" +
    "\061\045\036\046\125\050\103\052\057\053\107\054\067" +
    "\055\042\056\010\057\035\061\076\063\123\064\004\065" +
    "\070\066\066\067\053\070\111\071\055\072\071\074\047" +
    "\076\106\102\024\103\127\105\032\106\112\107\051\110" +
    "\033\111\065\112\012\001\002\000\004\026\241\001\002" +
    "\000\134\004\030\006\060\010\045\011\022\021\073\022" +
    "\124\024\026\031\105\033\043\034\101\035\115\036\044" +
    "\040\102\041\114\042\023\043\050\044\061\045\036\046" +
    "\125\050\103\052\057\053\107\054\067\055\042\056\010" +
    "\057\035\061\076\063\123\064\004\065\070\066\066\067" +
    "\053\070\111\071\055\072\071\074\047\076\106\102\024" +
    "\103\127\105\032\106\112\107\051\110\033\111\065\112" +
    "\012\001\002\000\004\005\243\001\002\000\042\005\uffe0" +
    "\023\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\032\uffe0\051" +
    "\uffe0\052\uffe0\062\uffe0\071\uffe0\073\uffe0\075\uffe0\100\uffe0" +
    "\105\uffe0\113\uffe0\001\002\000\134\004\030\006\060\010" +
    "\045\011\022\021\073\022\124\024\026\031\105\033\043" +
    "\034\101\035\115\036\044\040\102\041\114\042\023\043" +
    "\050\044\061\045\036\046\125\050\103\052\057\053\107" +
    "\054\067\055\042\056\010\057\035\061\076\063\123\064" +
    "\004\065\070\066\066\067\053\070\111\071\055\072\071" +
    "\074\047\076\106\102\024\103\127\105\032\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\006\025\uffca" +
    "\026\253\001\002\000\004\025\252\001\002\000\004\030" +
    "\250\001\002\000\134\004\030\006\060\010\045\011\022" +
    "\021\073\022\124\024\026\031\105\033\043\034\101\035" +
    "\115\036\044\040\102\041\114\042\023\043\050\044\061" +
    "\045\036\046\125\050\103\052\057\053\107\054\067\055" +
    "\042\056\010\057\035\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\071\055\072\071\074\047\076" +
    "\106\102\024\103\127\105\032\106\112\107\051\110\033" +
    "\111\065\112\012\001\002\000\006\025\uffc8\026\uffc8\001" +
    "\002\000\036\005\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\032\uffcb\051\uffcb\052\uffcb\062\uffcb\071\uffcb\073" +
    "\uffcb\075\uffcb\100\uffcb\001\002\000\134\004\030\006\060" +
    "\010\045\011\022\021\073\022\124\024\026\031\105\033" +
    "\043\034\101\035\115\036\044\040\102\041\114\042\023" +
    "\043\050\044\061\045\036\046\125\050\103\052\057\053" +
    "\107\054\067\055\042\056\010\057\035\061\076\063\123" +
    "\064\004\065\070\066\066\067\053\070\111\071\055\072" +
    "\071\074\047\076\106\102\024\103\127\105\032\106\112" +
    "\107\051\110\033\111\065\112\012\001\002\000\004\030" +
    "\255\001\002\000\134\004\030\006\060\010\045\011\022" +
    "\021\073\022\124\024\026\031\105\033\043\034\101\035" +
    "\115\036\044\040\102\041\114\042\023\043\050\044\061" +
    "\045\036\046\125\050\103\052\057\053\107\054\067\055" +
    "\042\056\010\057\035\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\071\055\072\071\074\047\076" +
    "\106\102\024\103\127\105\032\106\112\107\051\110\033" +
    "\111\065\112\012\001\002\000\006\025\uffc9\026\uffc9\001" +
    "\002\000\140\004\030\006\060\010\045\011\022\021\073" +
    "\022\124\024\026\031\105\033\043\034\101\035\115\036" +
    "\044\040\102\041\114\042\023\043\050\044\061\045\036" +
    "\046\125\047\034\050\103\052\057\053\107\054\067\055" +
    "\042\056\010\057\035\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\071\055\072\071\074\047\076" +
    "\106\077\261\102\024\103\054\105\032\106\112\107\051" +
    "\110\033\111\065\112\012\001\002\000\144\002\uffff\004" +
    "\uffff\006\uffff\010\uffff\011\uffff\021\uffff\022\uffff\024\uffff" +
    "\025\uffff\031\uffff\033\uffff\034\uffff\035\uffff\036\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056" +
    "\uffff\057\uffff\061\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\072\uffff\074\uffff\076\uffff\077" +
    "\uffff\102\uffff\103\uffff\105\uffff\106\uffff\107\uffff\110\uffff" +
    "\111\uffff\112\uffff\001\002\000\036\005\ufff6\023\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6\051\ufff6\052\ufff6" +
    "\062\ufff6\071\ufff6\073\ufff6\075\ufff6\100\ufff6\001\002\000" +
    "\004\032\263\001\002\000\044\005\uffd6\023\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\032\uffd6\051\uffd6\052\uffd6\060" +
    "\uffd6\062\uffd6\071\uffd6\073\uffd6\075\uffd6\100\uffd6\105\uffd6" +
    "\113\uffd6\001\002\000\004\051\265\001\002\000\134\004" +
    "\030\006\060\010\045\011\022\021\073\022\124\024\026" +
    "\031\105\033\043\034\101\035\115\036\044\040\102\041" +
    "\114\042\023\043\050\044\061\045\036\046\125\050\103" +
    "\052\057\053\107\054\067\055\042\056\010\057\035\061" +
    "\076\063\123\064\004\065\070\066\066\067\053\070\111" +
    "\071\055\072\071\074\047\076\106\102\024\103\127\105" +
    "\032\106\112\107\051\110\033\111\065\112\012\001\002" +
    "\000\004\052\267\001\002\000\134\004\030\006\060\010" +
    "\045\011\022\021\073\022\124\024\026\031\105\033\043" +
    "\034\101\035\115\036\044\040\102\041\114\042\023\043" +
    "\050\044\061\045\036\046\125\050\103\052\057\053\107" +
    "\054\067\055\042\056\010\057\035\061\076\063\123\064" +
    "\004\065\070\066\066\067\053\070\111\071\055\072\071" +
    "\074\047\076\106\102\024\103\127\105\032\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\036\005\uffcc" +
    "\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\051" +
    "\uffcc\052\uffcc\062\uffcc\071\uffcc\073\uffcc\075\uffcc\100\uffcc" +
    "\001\002\000\140\004\030\005\uff82\006\060\010\045\011" +
    "\022\021\073\022\124\024\026\026\uff82\031\105\033\043" +
    "\034\101\035\115\036\044\040\102\041\114\042\023\043" +
    "\050\044\061\045\036\046\125\050\103\052\057\053\107" +
    "\054\067\055\042\056\010\057\035\061\076\063\123\064" +
    "\004\065\070\066\066\067\053\070\111\071\055\072\071" +
    "\074\047\076\106\102\024\103\127\105\032\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\004\005\273" +
    "\001\002\000\044\005\uffd7\023\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\032\uffd7\051\uffd7\052\uffd7\060\uffd7\062\uffd7" +
    "\071\uffd7\073\uffd7\075\uffd7\100\uffd7\105\uffd7\113\uffd7\001" +
    "\002\000\134\004\030\006\060\010\045\011\022\021\073" +
    "\022\124\024\026\031\105\033\043\034\101\035\115\036" +
    "\044\040\102\041\114\042\023\043\050\044\061\045\036" +
    "\046\125\050\103\052\057\053\107\054\067\055\042\056" +
    "\010\057\035\061\076\063\123\064\004\065\070\066\066" +
    "\067\053\070\111\071\055\072\071\074\047\076\106\102" +
    "\024\103\127\105\032\106\112\107\051\110\033\111\065" +
    "\112\012\001\002\000\004\026\276\001\002\000\134\004" +
    "\030\006\060\010\045\011\022\021\073\022\124\024\026" +
    "\031\105\033\043\034\101\035\115\036\044\040\102\041" +
    "\114\042\023\043\050\044\061\045\036\046\125\050\103" +
    "\052\057\053\107\054\067\055\042\056\010\057\035\061" +
    "\076\063\123\064\004\065\070\066\066\067\053\070\111" +
    "\071\055\072\071\074\047\076\106\102\024\103\127\105" +
    "\032\106\112\107\051\110\033\111\065\112\012\001\002" +
    "\000\004\005\300\001\002\000\042\005\uffd9\023\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\051\uffd9\052\uffd9" +
    "\062\uffd9\071\uffd9\073\uffd9\075\uffd9\100\uffd9\105\uffd9\113" +
    "\uffd9\001\002\000\144\002\ufffc\004\ufffc\006\ufffc\010\ufffc" +
    "\011\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\031\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\040\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\074\ufffc\076\ufffc\077\ufffc\102\ufffc\103\ufffc" +
    "\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\001" +
    "\002\000\006\026\322\062\323\001\002\000\006\026\uffd1" +
    "\062\uffd1\001\002\000\012\026\uffcf\030\306\062\uffcf\071" +
    "\305\001\002\000\004\103\310\001\002\000\134\004\030" +
    "\006\060\010\045\011\022\021\073\022\124\024\026\031" +
    "\105\033\043\034\101\035\115\036\044\040\102\041\114" +
    "\042\023\043\050\044\061\045\036\046\125\050\103\052" +
    "\057\053\107\054\067\055\042\056\010\057\035\061\076" +
    "\063\123\064\004\065\070\066\066\067\053\070\111\071" +
    "\055\072\071\074\047\076\106\102\024\103\127\105\032" +
    "\106\112\107\051\110\033\111\065\112\012\001\002\000" +
    "\006\026\uffd0\062\uffd0\001\002\000\004\023\311\001\002" +
    "\000\004\101\312\001\002\000\004\004\313\001\002\000" +
    "\134\004\030\006\060\010\045\011\022\021\073\022\124" +
    "\024\026\031\105\033\043\034\101\035\115\036\044\040" +
    "\102\041\114\042\023\043\050\044\061\045\036\046\125" +
    "\050\103\052\057\053\107\054\067\055\042\056\010\057" +
    "\035\061\076\063\123\064\004\065\070\066\066\067\053" +
    "\070\111\071\055\072\071\074\047\076\106\102\024\103" +
    "\127\105\032\106\112\107\051\110\033\111\065\112\012" +
    "\001\002\000\004\026\315\001\002\000\134\004\030\006" +
    "\060\010\045\011\022\021\073\022\124\024\026\031\105" +
    "\033\043\034\101\035\115\036\044\040\102\041\114\042" +
    "\023\043\050\044\061\045\036\046\125\050\103\052\057" +
    "\053\107\054\067\055\042\056\010\057\035\061\076\063" +
    "\123\064\004\065\070\066\066\067\053\070\111\071\055" +
    "\072\071\074\047\076\106\102\024\103\127\105\032\106" +
    "\112\107\051\110\033\111\065\112\012\001\002\000\004" +
    "\005\317\001\002\000\010\026\uffcd\050\320\062\uffcd\001" +
    "\002\000\072\004\030\021\073\031\105\033\043\034\101" +
    "\035\115\036\044\040\102\041\114\042\023\043\050\044" +
    "\061\052\057\061\076\063\123\064\004\065\070\066\066" +
    "\067\053\070\111\102\024\103\127\105\032\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\006\026\uffce" +
    "\062\uffce\001\002\000\134\004\030\006\060\010\045\011" +
    "\022\021\073\022\124\024\026\031\105\033\043\034\101" +
    "\035\115\036\044\040\102\041\114\042\023\043\050\044" +
    "\061\045\036\046\125\050\103\052\057\053\107\054\067" +
    "\055\042\056\010\057\035\061\076\063\123\064\004\065" +
    "\070\066\066\067\053\070\111\071\055\072\071\074\047" +
    "\076\106\102\024\103\127\105\032\106\112\107\051\110" +
    "\033\111\065\112\012\001\002\000\044\005\uffd3\023\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\051" +
    "\uffd3\052\uffd3\062\uffd3\071\uffd3\073\uffd3\075\uffd3\100\uffd3" +
    "\105\uffd3\113\uffd3\001\002\000\006\026\uffd2\062\uffd2\001" +
    "\002\000\020\004\030\021\073\041\114\102\024\103\127" +
    "\111\065\112\012\001\002\000\010\012\205\013\204\032" +
    "\327\001\002\000\042\005\uffc7\023\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\032\uffc7\051\uffc7\052\uffc7\062\uffc7\071" +
    "\uffc7\073\uffc7\075\uffc7\100\uffc7\105\uffc7\113\uffc7\001\002" +
    "\000\064\005\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016" +
    "\uff84\020\uff84\023\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\051\uff84\052\uff84\060\uff84\062\uff84\071" +
    "\uff84\073\uff84\075\uff84\100\uff84\104\uff84\105\uff84\113\uff84" +
    "\001\002\000\004\002\000\001\002\000\004\073\333\001" +
    "\002\000\134\004\030\006\060\010\045\011\022\021\073" +
    "\022\124\024\026\031\105\033\043\034\101\035\115\036" +
    "\044\040\102\041\114\042\023\043\050\044\061\045\036" +
    "\046\125\050\103\052\057\053\107\054\067\055\042\056" +
    "\010\057\035\061\076\063\123\064\004\065\070\066\066" +
    "\067\053\070\111\071\055\072\071\074\047\076\106\102" +
    "\024\103\127\105\032\106\112\107\051\110\033\111\065" +
    "\112\012\001\002\000\036\005\uffae\023\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\032\uffae\051\uffae\052\uffae\062\uffae" +
    "\071\uffae\073\uffae\075\uffae\100\uffae\001\002\000\134\004" +
    "\030\006\060\010\045\011\022\021\073\022\124\024\026" +
    "\031\105\033\043\034\101\035\115\036\044\040\102\041" +
    "\114\042\023\043\050\044\061\045\036\046\125\050\103" +
    "\052\057\053\107\054\067\055\042\056\010\057\035\061" +
    "\076\063\123\064\004\065\070\066\066\067\053\070\111" +
    "\071\055\072\071\074\047\076\106\102\024\103\127\105" +
    "\032\106\112\107\051\110\033\111\065\112\012\001\002" +
    "\000\004\005\337\001\002\000\042\005\uffe3\023\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\051\uffe3\052\uffe3" +
    "\062\uffe3\071\uffe3\073\uffe3\075\uffe3\100\uffe3\105\uffe3\113" +
    "\uffe3\001\002\000\134\004\030\006\060\010\045\011\022" +
    "\021\073\022\124\024\026\031\105\033\043\034\101\035" +
    "\115\036\044\040\102\041\114\042\023\043\050\044\061" +
    "\045\036\046\125\050\103\052\057\053\107\054\067\055" +
    "\042\056\010\057\035\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\071\055\072\071\074\047\076" +
    "\106\102\024\103\127\105\032\106\112\107\051\110\033" +
    "\111\065\112\012\001\002\000\004\005\342\001\002\000" +
    "\036\005\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\032\uffb4\051\uffb4\052\uffb4\062\uffb4\071\uffb4\073\uffb4\075" +
    "\uffb4\100\uffb4\001\002\000\134\004\030\006\060\010\045" +
    "\011\022\021\073\022\124\024\026\031\105\033\043\034" +
    "\101\035\115\036\044\040\102\041\114\042\023\043\050" +
    "\044\061\045\036\046\125\050\103\052\057\053\107\054" +
    "\067\055\042\056\010\057\035\061\076\063\123\064\004" +
    "\065\070\066\066\067\053\070\111\071\055\072\071\074" +
    "\047\076\106\102\024\103\127\105\032\106\112\107\051" +
    "\110\033\111\065\112\012\001\002\000\004\005\345\001" +
    "\002\000\042\005\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\032\uffe2\051\uffe2\052\uffe2\062\uffe2\071\uffe2\073" +
    "\uffe2\075\uffe2\100\uffe2\105\uffe2\113\uffe2\001\002\000\134" +
    "\004\030\006\060\010\045\011\022\021\073\022\124\024" +
    "\026\031\105\033\043\034\101\035\115\036\044\040\102" +
    "\041\114\042\023\043\050\044\061\045\036\046\125\050" +
    "\103\052\057\053\107\054\067\055\042\056\010\057\035" +
    "\061\076\063\123\064\004\065\070\066\066\067\053\070" +
    "\111\071\055\072\071\074\047\076\106\102\024\103\127" +
    "\105\032\106\112\107\051\110\033\111\065\112\012\001" +
    "\002\000\004\005\350\001\002\000\040\005\uffba\023\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\032\uffba\051\uffba\052" +
    "\uffba\062\uffba\071\uffba\073\uffba\075\uffba\100\uffba\105\uffba" +
    "\001\002\000\012\005\uff82\026\uff82\103\356\114\355\001" +
    "\002\000\004\005\364\001\002\000\006\005\uffa9\026\360" +
    "\001\002\000\006\005\uffa4\026\uffa4\001\002\000\004\103" +
    "\357\001\002\000\006\005\uffa6\026\uffa6\001\002\000\006" +
    "\005\uffa5\026\uffa5\001\002\000\006\103\362\114\361\001" +
    "\002\000\004\103\363\001\002\000\006\005\uffa8\026\uffa8" +
    "\001\002\000\006\005\uffa7\026\uffa7\001\002\000\004\007" +
    "\365\001\002\000\134\004\030\006\060\010\045\011\022" +
    "\021\073\022\124\024\026\031\105\033\043\034\101\035" +
    "\115\036\044\040\102\041\114\042\023\043\050\044\061" +
    "\045\036\046\125\050\103\052\057\053\107\054\067\055" +
    "\042\056\010\057\035\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\071\055\072\071\074\047\076" +
    "\106\102\024\103\127\105\032\106\112\107\051\110\033" +
    "\111\065\112\012\001\002\000\036\005\uffab\023\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\032\uffab\051\uffab\052\uffab" +
    "\062\uffab\071\uffab\073\uffab\075\uffab\100\uffab\001\002\000" +
    "\004\100\370\001\002\000\134\004\030\006\060\010\045" +
    "\011\022\021\073\022\124\024\026\031\105\033\043\034" +
    "\101\035\115\036\044\040\102\041\114\042\023\043\050" +
    "\044\061\045\036\046\125\050\103\052\057\053\107\054" +
    "\067\055\042\056\010\057\035\061\076\063\123\064\004" +
    "\065\070\066\066\067\053\070\111\071\055\072\071\074" +
    "\047\076\106\102\024\103\127\105\032\106\112\107\051" +
    "\110\033\111\065\112\012\001\002\000\004\075\372\001" +
    "\002\000\134\004\030\006\060\010\045\011\022\021\073" +
    "\022\124\024\026\031\105\033\043\034\101\035\115\036" +
    "\044\040\102\041\114\042\023\043\050\044\061\045\036" +
    "\046\125\050\103\052\057\053\107\054\067\055\042\056" +
    "\010\057\035\061\076\063\123\064\004\065\070\066\066" +
    "\067\053\070\111\071\055\072\071\074\047\076\106\102" +
    "\024\103\127\105\032\106\112\107\051\110\033\111\065" +
    "\112\012\001\002\000\036\005\uffaf\023\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\032\uffaf\051\uffaf\052\uffaf\062\uffaf" +
    "\071\uffaf\073\uffaf\075\uffaf\100\uffaf\001\002\000\134\004" +
    "\030\006\060\010\045\011\022\021\073\022\124\024\026" +
    "\031\105\033\043\034\101\035\115\036\044\040\102\041" +
    "\114\042\023\043\050\044\061\045\036\046\125\050\103" +
    "\052\057\053\107\054\067\055\042\056\010\057\035\061" +
    "\076\063\123\064\004\065\070\066\066\067\053\070\111" +
    "\071\055\072\071\074\047\076\106\102\024\103\127\105" +
    "\032\106\112\107\051\110\033\111\065\112\012\001\002" +
    "\000\004\027\376\001\002\000\144\002\uff96\004\uff96\006" +
    "\uff96\010\uff96\011\uff96\021\uff96\022\uff96\024\uff96\025\uff96" +
    "\031\uff96\033\uff96\034\uff96\035\uff96\036\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\050\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\uff96\061\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
    "\070\uff96\071\uff96\072\uff96\074\uff96\076\uff96\077\uff96\102" +
    "\uff96\103\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96" +
    "\112\uff96\001\002\000\134\004\030\006\060\010\045\011" +
    "\022\021\073\022\124\024\026\031\105\033\043\034\101" +
    "\035\115\036\044\040\102\041\114\042\023\043\050\044" +
    "\061\045\036\046\125\050\103\052\057\053\107\054\067" +
    "\055\042\056\010\057\035\061\076\063\123\064\004\065" +
    "\070\066\066\067\053\070\111\071\055\072\071\074\047" +
    "\076\106\102\024\103\127\105\032\106\112\107\051\110" +
    "\033\111\065\112\012\001\002\000\004\005\u0101\001\002" +
    "\000\042\005\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\032\uffe1\051\uffe1\052\uffe1\062\uffe1\071\uffe1\073\uffe1" +
    "\075\uffe1\100\uffe1\105\uffe1\113\uffe1\001\002\000\134\004" +
    "\030\006\060\010\045\011\022\021\073\022\124\024\026" +
    "\031\105\033\043\034\101\035\115\036\044\040\102\041" +
    "\114\042\023\043\050\044\061\045\036\046\125\050\103" +
    "\052\057\053\107\054\067\055\042\056\010\057\035\061" +
    "\076\063\123\064\004\065\070\066\066\067\053\070\111" +
    "\071\055\072\071\074\047\076\106\102\024\103\127\105" +
    "\032\106\112\107\051\110\033\111\065\112\012\001\002" +
    "\000\004\026\u0104\001\002\000\134\004\030\006\060\010" +
    "\045\011\022\021\073\022\124\024\026\031\105\033\043" +
    "\034\101\035\115\036\044\040\102\041\114\042\023\043" +
    "\050\044\061\045\036\046\125\050\103\052\057\053\107" +
    "\054\067\055\042\056\010\057\035\061\076\063\123\064" +
    "\004\065\070\066\066\067\053\070\111\071\055\072\071" +
    "\074\047\076\106\102\024\103\127\105\032\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\004\005\u0106" +
    "\001\002\000\040\005\uffbb\023\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\032\uffbb\051\uffbb\052\uffbb\062\uffbb\071\uffbb" +
    "\073\uffbb\075\uffbb\100\uffbb\105\uffbb\001\002\000\004\075" +
    "\u0108\001\002\000\134\004\030\006\060\010\045\011\022" +
    "\021\073\022\124\024\026\031\105\033\043\034\101\035" +
    "\115\036\044\040\102\041\114\042\023\043\050\044\061" +
    "\045\036\046\125\050\103\052\057\053\107\054\067\055" +
    "\042\056\010\057\035\061\076\063\123\064\004\065\070" +
    "\066\066\067\053\070\111\071\055\072\071\074\047\076" +
    "\106\102\024\103\127\105\032\106\112\107\051\110\033" +
    "\111\065\112\012\001\002\000\036\005\uffb0\023\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\032\uffb0\051\uffb0\052\uffb0" +
    "\062\uffb0\071\uffb0\073\uffb0\075\uffb0\100\uffb0\001\002\000" +
    "\004\071\u010b\001\002\000\004\103\u010c\001\002\000\004" +
    "\023\u010d\001\002\000\004\031\u010e\001\002\000\020\004" +
    "\030\021\073\041\114\102\024\103\127\111\065\112\012" +
    "\001\002\000\004\030\u0110\001\002\000\020\004\030\021" +
    "\073\041\114\102\024\103\127\111\065\112\012\001\002" +
    "\000\004\032\u0112\001\002\000\036\005\uffad\023\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\032\uffad\051\uffad\052\uffad" +
    "\062\uffad\071\uffad\073\uffad\075\uffad\100\uffad\001\002\000" +
    "\134\004\030\006\060\010\045\011\022\021\073\022\124" +
    "\024\026\031\105\033\043\034\101\035\115\036\044\040" +
    "\102\041\114\042\023\043\050\044\061\045\036\046\125" +
    "\050\103\052\057\053\107\054\067\055\042\056\010\057" +
    "\035\061\076\063\123\064\004\065\070\066\066\067\053" +
    "\070\111\071\055\072\071\074\047\076\106\102\024\103" +
    "\127\105\032\106\112\107\051\110\033\111\065\112\012" +
    "\001\002\000\004\005\u0115\001\002\000\042\005\uffc4\023" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\032\uffc4\051\uffc4" +
    "\052\uffc4\062\uffc4\071\uffc4\073\uffc4\075\uffc4\100\uffc4\105" +
    "\uffc4\113\uffc4\001\002\000\134\004\030\006\060\010\045" +
    "\011\022\021\073\022\124\024\026\031\105\033\043\034" +
    "\101\035\115\036\044\040\102\041\114\042\023\043\050" +
    "\044\061\045\036\046\125\050\103\052\057\053\107\054" +
    "\067\055\042\056\010\057\035\061\076\063\123\064\004" +
    "\065\070\066\066\067\053\070\111\071\055\072\071\074" +
    "\047\076\106\102\024\103\127\105\032\106\112\107\051" +
    "\110\033\111\065\112\012\001\002\000\004\005\u0118\001" +
    "\002\000\036\005\uffb3\023\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\032\uffb3\051\uffb3\052\uffb3\062\uffb3\071\uffb3\073" +
    "\uffb3\075\uffb3\100\uffb3\001\002\000\012\005\uff82\026\uff82" +
    "\103\356\114\355\001\002\000\004\005\u011b\001\002\000" +
    "\134\004\030\006\060\010\045\011\022\021\073\022\124" +
    "\024\026\031\105\033\043\034\101\035\115\036\044\040" +
    "\102\041\114\042\023\043\050\044\061\045\036\046\125" +
    "\050\103\052\057\053\107\054\067\055\042\056\010\057" +
    "\035\061\076\063\123\064\004\065\070\066\066\067\053" +
    "\070\111\071\055\072\071\074\047\076\106\102\024\103" +
    "\127\105\032\106\112\107\051\110\033\111\065\112\012" +
    "\001\002\000\036\005\uffaa\023\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\032\uffaa\051\uffaa\052\uffaa\062\uffaa\071\uffaa" +
    "\073\uffaa\075\uffaa\100\uffaa\001\002\000\004\005\u011e\001" +
    "\002\000\036\005\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\032\uffb1\051\uffb1\052\uffb1\062\uffb1\071\uffb1\073" +
    "\uffb1\075\uffb1\100\uffb1\001\002\000\134\004\030\006\060" +
    "\010\045\011\022\021\073\022\124\024\026\031\105\033" +
    "\043\034\101\035\115\036\044\040\102\041\114\042\023" +
    "\043\050\044\061\045\036\046\125\050\103\052\057\053" +
    "\107\054\067\055\042\056\010\057\035\061\076\063\123" +
    "\064\004\065\070\066\066\067\053\070\111\071\055\072" +
    "\071\074\047\076\106\102\024\103\127\105\032\106\112" +
    "\107\051\110\033\111\065\112\012\001\002\000\004\027" +
    "\u0121\001\002\000\144\002\uff95\004\uff95\006\uff95\010\uff95" +
    "\011\uff95\021\uff95\022\uff95\024\uff95\025\uff95\031\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\061\uff95" +
    "\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071" +
    "\uff95\072\uff95\074\uff95\076\uff95\077\uff95\102\uff95\103\uff95" +
    "\105\uff95\106\uff95\107\uff95\110\uff95\111\uff95\112\uff95\001" +
    "\002\000\036\005\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\032\uffbe\051\uffbe\052\uffbe\062\uffbe\071\uffbe\073" +
    "\uffbe\075\uffbe\100\uffbe\001\002\000\004\005\u0124\001\002" +
    "\000\066\004\u0125\005\uff83\012\uff83\013\uff83\014\uff83\015" +
    "\uff83\016\uff83\020\uff83\023\uff83\025\uff83\026\uff83\027\uff83" +
    "\030\uff83\031\uff83\032\uff83\051\uff83\052\uff83\060\uff83\062" +
    "\uff83\071\uff83\073\uff83\075\uff83\100\uff83\104\uff83\105\uff83" +
    "\113\uff83\001\002\000\140\004\030\005\uff82\006\060\010" +
    "\045\011\022\021\073\022\124\024\026\026\uff82\031\105" +
    "\033\043\034\101\035\115\036\044\040\102\041\114\042" +
    "\023\043\050\044\061\045\036\046\125\050\103\052\057" +
    "\053\107\054\067\055\042\056\010\057\035\061\076\063" +
    "\123\064\004\065\070\066\066\067\053\070\111\071\055" +
    "\072\071\074\047\076\106\102\024\103\127\105\032\106" +
    "\112\107\051\110\033\111\065\112\012\001\002\000\004" +
    "\005\u0127\001\002\000\064\005\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\016\uffa1\020\uffa1\023\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\051\uffa1\052\uffa1\060" +
    "\uffa1\062\uffa1\071\uffa1\073\uffa1\075\uffa1\100\uffa1\104\uffa1" +
    "\105\uffa1\113\uffa1\001\002\000\134\004\030\006\060\010" +
    "\045\011\022\021\073\022\124\024\026\031\105\033\043" +
    "\034\101\035\115\036\044\040\102\041\114\042\023\043" +
    "\050\044\061\045\036\046\125\050\103\052\057\053\107" +
    "\054\067\055\042\056\010\057\035\061\076\063\123\064" +
    "\004\065\070\066\066\067\053\070\111\071\055\072\071" +
    "\074\047\076\106\102\024\103\127\105\032\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\036\005\uffd4" +
    "\023\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\051" +
    "\uffd4\052\uffd4\062\uffd4\071\uffd4\073\uffd4\075\uffd4\100\uffd4" +
    "\001\002\000\140\004\030\006\060\010\045\011\022\021" +
    "\073\022\124\024\026\025\u012b\031\105\033\043\034\101" +
    "\035\115\036\044\040\102\041\114\042\023\043\050\044" +
    "\061\045\036\046\125\047\034\050\103\052\057\053\107" +
    "\054\067\055\042\056\010\057\035\061\076\063\123\064" +
    "\004\065\070\066\066\067\053\070\111\071\055\072\071" +
    "\074\047\076\106\102\024\103\054\105\032\106\112\107" +
    "\051\110\033\111\065\112\012\001\002\000\036\005\ufff7" +
    "\023\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7\051" +
    "\ufff7\052\ufff7\062\ufff7\071\ufff7\073\ufff7\075\ufff7\100\ufff7" +
    "\001\002\000\134\004\030\006\060\010\045\011\022\021" +
    "\073\022\124\024\026\031\105\033\043\034\101\035\115" +
    "\036\044\040\102\041\114\042\023\043\050\044\061\045" +
    "\036\046\125\050\103\052\057\053\107\054\067\055\042" +
    "\056\010\057\035\061\076\063\123\064\004\065\070\066" +
    "\066\067\053\070\111\071\055\072\071\074\047\076\106" +
    "\102\024\103\127\105\032\106\112\107\051\110\033\111" +
    "\065\112\012\001\002\000\004\026\u012e\001\002\000\134" +
    "\004\030\006\060\010\045\011\022\021\073\022\124\024" +
    "\026\031\105\033\043\034\101\035\115\036\044\040\102" +
    "\041\114\042\023\043\050\044\061\045\036\046\125\050" +
    "\103\052\057\053\107\054\067\055\042\056\010\057\035" +
    "\061\076\063\123\064\004\065\070\066\066\067\053\070" +
    "\111\071\055\072\071\074\047\076\106\102\024\103\127" +
    "\105\032\106\112\107\051\110\033\111\065\112\012\001" +
    "\002\000\004\005\u0130\001\002\000\040\005\uffbc\023\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\051\uffbc\052" +
    "\uffbc\062\uffbc\071\uffbc\073\uffbc\075\uffbc\100\uffbc\105\uffbc" +
    "\001\002\000\004\005\u0132\001\002\000\036\005\uffb2\023" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\032\uffb2\051\uffb2" +
    "\052\uffb2\062\uffb2\071\uffb2\073\uffb2\075\uffb2\100\uffb2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\112\002\071\003\055\004\005\005\061\006" +
    "\062\012\076\013\112\014\103\015\121\016\107\020\006" +
    "\025\063\026\120\027\077\030\014\031\116\032\037\033" +
    "\013\034\073\037\026\040\024\041\015\042\020\043\040" +
    "\044\045\045\115\046\017\047\004\050\117\051\036\052" +
    "\051\053\010\054\016\057\030\060\074\061\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\110\003\u0129\004\005" +
    "\005\061\006\062\012\076\013\112\014\103\015\121\016" +
    "\107\020\006\025\063\026\120\027\077\030\014\031\116" +
    "\032\037\033\013\034\073\037\026\040\024\041\015\042" +
    "\020\043\040\044\045\045\115\046\017\047\004\050\117" +
    "\051\036\052\051\053\010\054\016\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\102\006\062\012\u0122" +
    "\013\112\014\103\015\121\016\107\020\006\025\063\026" +
    "\120\027\077\030\014\031\116\032\037\033\013\034\073" +
    "\037\026\040\024\041\015\042\020\043\040\044\045\045" +
    "\115\046\017\047\004\050\117\051\036\052\051\053\010" +
    "\054\016\057\030\060\074\061\012\001\001\000\002\001" +
    "\001\000\046\013\200\014\103\015\173\016\107\020\006" +
    "\026\120\031\176\032\037\033\013\034\073\037\177\040" +
    "\024\041\015\042\020\043\040\046\017\050\u0121\057\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\006\062\012\u0109\013\112\014\103" +
    "\015\121\016\107\020\006\025\063\026\120\027\077\030" +
    "\014\031\116\032\037\033\013\034\073\037\026\040\024" +
    "\041\015\042\020\043\040\044\045\045\115\046\017\047" +
    "\004\050\117\051\036\052\051\053\010\054\016\057\030" +
    "\060\074\061\012\001\001\000\002\001\001\000\102\006" +
    "\062\012\u0106\013\112\014\103\015\121\016\107\020\006" +
    "\025\063\026\120\027\077\030\014\031\116\032\037\033" +
    "\013\034\073\037\026\040\024\041\015\042\020\043\040" +
    "\044\045\045\115\046\017\047\004\050\117\051\036\052" +
    "\051\053\010\054\016\057\030\060\074\061\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\366\001\001" +
    "\000\106\004\257\005\061\006\062\012\076\013\112\014" +
    "\103\015\121\016\107\020\006\025\063\026\120\027\077" +
    "\030\014\031\116\032\037\033\013\034\073\037\026\040" +
    "\024\041\015\042\020\043\040\044\045\045\115\046\017" +
    "\047\004\050\117\051\036\052\051\053\010\054\016\057" +
    "\030\060\074\061\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\102\006\062\012" +
    "\331\013\112\014\103\015\121\016\107\020\006\025\063" +
    "\026\120\027\077\030\014\031\116\032\037\033\013\034" +
    "\073\037\026\040\024\041\015\042\020\043\040\044\045" +
    "\045\115\046\017\047\004\050\117\051\036\052\051\053" +
    "\010\054\016\057\030\060\074\061\012\001\001\000\002" +
    "\001\001\000\012\015\327\016\107\026\120\043\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\006\062" +
    "\012\303\013\112\014\103\015\121\016\107\020\006\025" +
    "\063\026\120\027\077\030\014\031\116\032\037\033\013" +
    "\034\073\035\302\036\301\037\026\040\024\041\015\042" +
    "\020\043\040\044\045\045\115\046\017\047\004\050\117" +
    "\051\036\052\051\053\010\054\016\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\006\062\012\263\013" +
    "\112\014\103\015\121\016\107\020\006\025\063\026\120" +
    "\027\077\030\014\031\116\032\037\033\013\034\073\037" +
    "\026\040\024\041\015\042\020\043\040\044\045\045\115" +
    "\046\017\047\004\050\117\051\036\052\051\053\010\054" +
    "\016\057\030\060\074\061\012\001\001\000\002\001\001" +
    "\000\110\006\062\012\135\013\112\014\103\015\121\016" +
    "\107\017\137\020\006\023\261\024\134\025\063\026\120" +
    "\027\077\030\014\031\116\032\037\033\013\034\073\037" +
    "\026\040\024\041\015\042\020\043\040\044\045\045\115" +
    "\046\017\047\004\050\117\051\036\052\051\053\010\054" +
    "\016\057\030\060\074\061\012\001\001\000\110\003\256" +
    "\004\005\005\061\006\062\012\076\013\112\014\103\015" +
    "\121\016\107\020\006\025\063\026\120\027\077\030\014" +
    "\031\116\032\037\033\013\034\073\037\026\040\024\041" +
    "\015\042\020\043\040\044\045\045\115\046\017\047\004" +
    "\050\117\051\036\052\051\053\010\054\016\057\030\060" +
    "\074\061\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\146\011\144\017\143" +
    "\001\001\000\002\001\001\000\102\006\062\012\127\013" +
    "\112\014\103\015\121\016\107\020\006\025\063\026\120" +
    "\027\077\030\014\031\116\032\037\033\013\034\073\037" +
    "\026\040\024\041\015\042\020\043\040\044\045\045\115" +
    "\046\017\047\004\050\117\051\036\052\051\053\010\054" +
    "\016\057\030\060\074\061\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\102\006\062\012\131\013\112\014" +
    "\103\015\121\016\107\020\006\025\063\026\120\027\077" +
    "\030\014\031\116\032\037\033\013\034\073\037\026\040" +
    "\024\041\015\042\020\043\040\044\045\045\115\046\017" +
    "\047\004\050\117\051\036\052\051\053\010\054\016\057" +
    "\030\060\074\061\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\006\062\012\135\013\112\014\103\015" +
    "\121\016\107\017\137\020\006\023\136\024\134\025\063" +
    "\026\120\027\077\030\014\031\116\032\037\033\013\034" +
    "\073\037\026\040\024\041\015\042\020\043\040\044\045" +
    "\045\115\046\017\047\004\050\117\051\036\052\051\053" +
    "\010\054\016\057\030\060\074\061\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\102\006\062\012\142\013\112" +
    "\014\103\015\121\016\107\020\006\025\063\026\120\027" +
    "\077\030\014\031\116\032\037\033\013\034\073\037\026" +
    "\040\024\041\015\042\020\043\040\044\045\045\115\046" +
    "\017\047\004\050\117\051\036\052\051\053\010\054\016" +
    "\057\030\060\074\061\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\155\017\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\006\062\012\150\013" +
    "\112\014\103\015\121\016\107\020\006\025\063\026\120" +
    "\027\077\030\014\031\116\032\037\033\013\034\073\037" +
    "\026\040\024\041\015\042\020\043\040\044\045\045\115" +
    "\046\017\047\004\050\117\051\036\052\051\053\010\054" +
    "\016\057\030\060\074\061\012\001\001\000\002\001\001" +
    "\000\102\006\062\012\152\013\112\014\103\015\121\016" +
    "\107\020\006\025\063\026\120\027\077\030\014\031\116" +
    "\032\037\033\013\034\073\037\026\040\024\041\015\042" +
    "\020\043\040\044\045\045\115\046\017\047\004\050\117" +
    "\051\036\052\051\053\010\054\016\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\004\011\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\157\017" +
    "\154\001\001\000\002\001\001\000\102\006\062\012\161" +
    "\013\112\014\103\015\121\016\107\020\006\025\063\026" +
    "\120\027\077\030\014\031\116\032\037\033\013\034\073" +
    "\037\026\040\024\041\015\042\020\043\040\044\045\045" +
    "\115\046\017\047\004\050\117\051\036\052\051\053\010" +
    "\054\016\057\030\060\074\061\012\001\001\000\002\001" +
    "\001\000\102\006\062\012\163\013\112\014\103\015\121" +
    "\016\107\020\006\025\063\026\120\027\077\030\014\031" +
    "\116\032\037\033\013\034\073\037\026\040\024\041\015" +
    "\042\020\043\040\044\045\045\115\046\017\047\004\050" +
    "\117\051\036\052\051\053\010\054\016\057\030\060\074" +
    "\061\012\001\001\000\002\001\001\000\102\006\062\012" +
    "\165\013\112\014\103\015\121\016\107\020\006\025\063" +
    "\026\120\027\077\030\014\031\116\032\037\033\013\034" +
    "\073\037\026\040\024\041\015\042\020\043\040\044\045" +
    "\045\115\046\017\047\004\050\117\051\036\052\051\053" +
    "\010\054\016\057\030\060\074\061\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\173\016\107\020" +
    "\172\026\120\043\040\001\001\000\102\006\062\012\171" +
    "\013\112\014\103\015\121\016\107\020\006\025\063\026" +
    "\120\027\077\030\014\031\116\032\037\033\013\034\073" +
    "\037\026\040\024\041\015\042\020\043\040\044\045\045" +
    "\115\046\017\047\004\050\117\051\036\052\051\053\010" +
    "\054\016\057\030\060\074\061\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\013\200" +
    "\014\103\015\173\016\107\020\006\026\120\031\176\032" +
    "\037\033\013\034\073\037\177\040\024\041\015\042\020" +
    "\043\040\046\017\050\175\057\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\222\014\103\015\173\016\107\020\006\026" +
    "\120\043\040\001\001\000\020\013\220\014\103\015\173" +
    "\016\107\020\006\026\120\043\040\001\001\000\016\014" +
    "\217\015\173\016\107\020\006\026\120\043\040\001\001" +
    "\000\016\014\210\015\173\016\107\020\006\026\120\043" +
    "\040\001\001\000\044\013\207\014\103\015\173\016\107" +
    "\020\006\026\120\031\206\032\037\033\013\034\073\037" +
    "\177\040\024\041\015\042\020\043\040\046\017\057\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\173\016\107\020\216\026\120\043\040" +
    "\001\001\000\014\015\173\016\107\020\215\026\120\043" +
    "\040\001\001\000\014\015\173\016\107\020\214\026\120" +
    "\043\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\013\225\014\103\015" +
    "\173\016\107\020\006\026\120\031\224\032\037\033\013" +
    "\034\073\037\177\040\024\041\015\042\020\043\040\046" +
    "\017\057\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\006\062\012\227\013\112\014\103\015\121\016" +
    "\107\020\006\025\063\026\120\027\077\030\014\031\116" +
    "\032\037\033\013\034\073\037\026\040\024\041\015\042" +
    "\020\043\040\044\045\045\115\046\017\047\004\050\117" +
    "\051\036\052\051\053\010\054\016\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\006\062\012\232\013\112\014\103\015\121\016\107\020" +
    "\006\025\063\026\120\027\077\030\014\031\116\032\037" +
    "\033\013\034\073\037\026\040\024\041\015\042\020\043" +
    "\040\044\045\045\115\046\017\047\004\050\117\051\036" +
    "\052\051\053\010\054\016\057\030\060\074\061\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\102\006\062\012\237\013\112\014" +
    "\103\015\121\016\107\020\006\025\063\026\120\027\077" +
    "\030\014\031\116\032\037\033\013\034\073\037\026\040" +
    "\024\041\015\042\020\043\040\044\045\045\115\046\017" +
    "\047\004\050\117\051\036\052\051\053\010\054\016\057" +
    "\030\060\074\061\012\001\001\000\002\001\001\000\102" +
    "\006\062\012\241\013\112\014\103\015\121\016\107\020" +
    "\006\025\063\026\120\027\077\030\014\031\116\032\037" +
    "\033\013\034\073\037\026\040\024\041\015\042\020\043" +
    "\040\044\045\045\115\046\017\047\004\050\117\051\036" +
    "\052\051\053\010\054\016\057\030\060\074\061\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\106\006\062" +
    "\012\246\013\112\014\103\015\121\016\107\020\006\025" +
    "\063\026\120\027\077\030\014\031\116\032\037\033\013" +
    "\034\073\037\026\040\024\041\015\042\020\043\040\044" +
    "\045\045\115\046\017\047\004\050\117\051\036\052\051" +
    "\053\010\054\016\055\244\056\245\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\006\062\012\250\013\112\014\103\015" +
    "\121\016\107\020\006\025\063\026\120\027\077\030\014" +
    "\031\116\032\037\033\013\034\073\037\026\040\024\041" +
    "\015\042\020\043\040\044\045\045\115\046\017\047\004" +
    "\050\117\051\036\052\051\053\010\054\016\057\030\060" +
    "\074\061\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\006\062\012\253\013\112\014\103\015\121\016" +
    "\107\020\006\025\063\026\120\027\077\030\014\031\116" +
    "\032\037\033\013\034\073\037\026\040\024\041\015\042" +
    "\020\043\040\044\045\045\115\046\017\047\004\050\117" +
    "\051\036\052\051\053\010\054\016\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\102\006\062\012\255" +
    "\013\112\014\103\015\121\016\107\020\006\025\063\026" +
    "\120\027\077\030\014\031\116\032\037\033\013\034\073" +
    "\037\026\040\024\041\015\042\020\043\040\044\045\045" +
    "\115\046\017\047\004\050\117\051\036\052\051\053\010" +
    "\054\016\057\030\060\074\061\012\001\001\000\002\001" +
    "\001\000\106\004\257\005\061\006\062\012\076\013\112" +
    "\014\103\015\121\016\107\020\006\025\063\026\120\027" +
    "\077\030\014\031\116\032\037\033\013\034\073\037\026" +
    "\040\024\041\015\042\020\043\040\044\045\045\115\046" +
    "\017\047\004\050\117\051\036\052\051\053\010\054\016" +
    "\057\030\060\074\061\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\006\062\012\265\013\112\014\103\015" +
    "\121\016\107\020\006\025\063\026\120\027\077\030\014" +
    "\031\116\032\037\033\013\034\073\037\026\040\024\041" +
    "\015\042\020\043\040\044\045\045\115\046\017\047\004" +
    "\050\117\051\036\052\051\053\010\054\016\057\030\060" +
    "\074\061\012\001\001\000\002\001\001\000\102\006\062" +
    "\012\267\013\112\014\103\015\121\016\107\020\006\025" +
    "\063\026\120\027\077\030\014\031\116\032\037\033\013" +
    "\034\073\037\026\040\024\041\015\042\020\043\040\044" +
    "\045\045\115\046\017\047\004\050\117\051\036\052\051" +
    "\053\010\054\016\057\030\060\074\061\012\001\001\000" +
    "\002\001\001\000\110\006\062\012\135\013\112\014\103" +
    "\015\121\016\107\017\137\020\006\023\271\024\134\025" +
    "\063\026\120\027\077\030\014\031\116\032\037\033\013" +
    "\034\073\037\026\040\024\041\015\042\020\043\040\044" +
    "\045\045\115\046\017\047\004\050\117\051\036\052\051" +
    "\053\010\054\016\057\030\060\074\061\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\102\006\062\012\274" +
    "\013\112\014\103\015\121\016\107\020\006\025\063\026" +
    "\120\027\077\030\014\031\116\032\037\033\013\034\073" +
    "\037\026\040\024\041\015\042\020\043\040\044\045\045" +
    "\115\046\017\047\004\050\117\051\036\052\051\053\010" +
    "\054\016\057\030\060\074\061\012\001\001\000\002\001" +
    "\001\000\102\006\062\012\276\013\112\014\103\015\121" +
    "\016\107\020\006\025\063\026\120\027\077\030\014\031" +
    "\116\032\037\033\013\034\073\037\026\040\024\041\015" +
    "\042\020\043\040\044\045\045\115\046\017\047\004\050" +
    "\117\051\036\052\051\053\010\054\016\057\030\060\074" +
    "\061\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\006\062\012\306\013" +
    "\112\014\103\015\121\016\107\020\006\025\063\026\120" +
    "\027\077\030\014\031\116\032\037\033\013\034\073\037" +
    "\026\040\024\041\015\042\020\043\040\044\045\045\115" +
    "\046\017\047\004\050\117\051\036\052\051\053\010\054" +
    "\016\057\030\060\074\061\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\102\006\062\012\313\013\112\014\103\015\121\016\107" +
    "\020\006\025\063\026\120\027\077\030\014\031\116\032" +
    "\037\033\013\034\073\037\026\040\024\041\015\042\020" +
    "\043\040\044\045\045\115\046\017\047\004\050\117\051" +
    "\036\052\051\053\010\054\016\057\030\060\074\061\012" +
    "\001\001\000\002\001\001\000\102\006\062\012\315\013" +
    "\112\014\103\015\121\016\107\020\006\025\063\026\120" +
    "\027\077\030\014\031\116\032\037\033\013\034\073\037" +
    "\026\040\024\041\015\042\020\043\040\044\045\045\115" +
    "\046\017\047\004\050\117\051\036\052\051\053\010\054" +
    "\016\057\030\060\074\061\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\013\200\014\103\015\173\016" +
    "\107\020\006\026\120\031\176\032\037\033\013\034\073" +
    "\037\177\040\024\041\015\042\020\043\040\046\017\047" +
    "\004\050\117\051\036\052\320\057\030\001\001\000\002" +
    "\001\001\000\104\006\062\012\303\013\112\014\103\015" +
    "\121\016\107\020\006\025\063\026\120\027\077\030\014" +
    "\031\116\032\037\033\013\034\073\035\323\037\026\040" +
    "\024\041\015\042\020\043\040\044\045\045\115\046\017" +
    "\047\004\050\117\051\036\052\051\053\010\054\016\057" +
    "\030\060\074\061\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\325\014\103\015\173\016\107\020" +
    "\006\026\120\043\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\102\006\062\012\333\013\112\014\103\015\121" +
    "\016\107\020\006\025\063\026\120\027\077\030\014\031" +
    "\116\032\037\033\013\034\073\037\026\040\024\041\015" +
    "\042\020\043\040\044\045\045\115\046\017\047\004\050" +
    "\117\051\036\052\051\053\010\054\016\057\030\060\074" +
    "\061\012\001\001\000\002\001\001\000\102\006\062\012" +
    "\335\013\112\014\103\015\121\016\107\020\006\025\063" +
    "\026\120\027\077\030\014\031\116\032\037\033\013\034" +
    "\073\037\026\040\024\041\015\042\020\043\040\044\045" +
    "\045\115\046\017\047\004\050\117\051\036\052\051\053" +
    "\010\054\016\057\030\060\074\061\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\006\062\012\340\013" +
    "\112\014\103\015\121\016\107\020\006\025\063\026\120" +
    "\027\077\030\014\031\116\032\037\033\013\034\073\037" +
    "\026\040\024\041\015\042\020\043\040\044\045\045\115" +
    "\046\017\047\004\050\117\051\036\052\051\053\010\054" +
    "\016\057\030\060\074\061\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\102\006\062\012\343\013\112\014" +
    "\103\015\121\016\107\020\006\025\063\026\120\027\077" +
    "\030\014\031\116\032\037\033\013\034\073\037\026\040" +
    "\024\041\015\042\020\043\040\044\045\045\115\046\017" +
    "\047\004\050\117\051\036\052\051\053\010\054\016\057" +
    "\030\060\074\061\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\006\062\012\346\013\112\014\103\015" +
    "\121\016\107\020\006\025\063\026\120\027\077\030\014" +
    "\031\116\032\037\033\013\034\073\037\026\040\024\041" +
    "\015\042\020\043\040\044\045\045\115\046\017\047\004" +
    "\050\117\051\036\052\051\053\010\054\016\057\030\060" +
    "\074\061\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\353\021\351\022\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\006\062\012\365\013\112\014\103\015" +
    "\121\016\107\020\006\025\063\026\120\027\077\030\014" +
    "\031\116\032\037\033\013\034\073\037\026\040\024\041" +
    "\015\042\020\043\040\044\045\045\115\046\017\047\004" +
    "\050\117\051\036\052\051\053\010\054\016\057\030\060" +
    "\074\061\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\006\062\012\370\013\112\014\103\015\121\016" +
    "\107\020\006\025\063\026\120\027\077\030\014\031\116" +
    "\032\037\033\013\034\073\037\026\040\024\041\015\042" +
    "\020\043\040\044\045\045\115\046\017\047\004\050\117" +
    "\051\036\052\051\053\010\054\016\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\102\006\062\012\372" +
    "\013\112\014\103\015\121\016\107\020\006\025\063\026" +
    "\120\027\077\030\014\031\116\032\037\033\013\034\073" +
    "\037\026\040\024\041\015\042\020\043\040\044\045\045" +
    "\115\046\017\047\004\050\117\051\036\052\051\053\010" +
    "\054\016\057\030\060\074\061\012\001\001\000\002\001" +
    "\001\000\102\006\062\012\374\013\112\014\103\015\121" +
    "\016\107\020\006\025\063\026\120\027\077\030\014\031" +
    "\116\032\037\033\013\034\073\037\026\040\024\041\015" +
    "\042\020\043\040\044\045\045\115\046\017\047\004\050" +
    "\117\051\036\052\051\053\010\054\016\057\030\060\074" +
    "\061\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\102\006\062\012\377\013\112\014\103\015\121\016\107" +
    "\020\006\025\063\026\120\027\077\030\014\031\116\032" +
    "\037\033\013\034\073\037\026\040\024\041\015\042\020" +
    "\043\040\044\045\045\115\046\017\047\004\050\117\051" +
    "\036\052\051\053\010\054\016\057\030\060\074\061\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\102\006" +
    "\062\012\u0102\013\112\014\103\015\121\016\107\020\006" +
    "\025\063\026\120\027\077\030\014\031\116\032\037\033" +
    "\013\034\073\037\026\040\024\041\015\042\020\043\040" +
    "\044\045\045\115\046\017\047\004\050\117\051\036\052" +
    "\051\053\010\054\016\057\030\060\074\061\012\001\001" +
    "\000\002\001\001\000\102\006\062\012\u0104\013\112\014" +
    "\103\015\121\016\107\020\006\025\063\026\120\027\077" +
    "\030\014\031\116\032\037\033\013\034\073\037\026\040" +
    "\024\041\015\042\020\043\040\044\045\045\115\046\017" +
    "\047\004\050\117\051\036\052\051\053\010\054\016\057" +
    "\030\060\074\061\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\006\062\012\u0108\013" +
    "\112\014\103\015\121\016\107\020\006\025\063\026\120" +
    "\027\077\030\014\031\116\032\037\033\013\034\073\037" +
    "\026\040\024\041\015\042\020\043\040\044\045\045\115" +
    "\046\017\047\004\050\117\051\036\052\051\053\010\054" +
    "\016\057\030\060\074\061\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\u010e\016\107\026\120\043\040" +
    "\001\001\000\002\001\001\000\012\015\u0110\016\107\026" +
    "\120\043\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\006\062\012\u0113\013\112\014\103\015\121\016" +
    "\107\020\006\025\063\026\120\027\077\030\014\031\116" +
    "\032\037\033\013\034\073\037\026\040\024\041\015\042" +
    "\020\043\040\044\045\045\115\046\017\047\004\050\117" +
    "\051\036\052\051\053\010\054\016\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\006\062\012\u0116\013\112\014\103\015\121\016\107\020" +
    "\006\025\063\026\120\027\077\030\014\031\116\032\037" +
    "\033\013\034\073\037\026\040\024\041\015\042\020\043" +
    "\040\044\045\045\115\046\017\047\004\050\117\051\036" +
    "\052\051\053\010\054\016\057\030\060\074\061\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\353" +
    "\021\u0119\022\352\001\001\000\002\001\001\000\102\006" +
    "\062\012\u011b\013\112\014\103\015\121\016\107\020\006" +
    "\025\063\026\120\027\077\030\014\031\116\032\037\033" +
    "\013\034\073\037\026\040\024\041\015\042\020\043\040" +
    "\044\045\045\115\046\017\047\004\050\117\051\036\052" +
    "\051\053\010\054\016\057\030\060\074\061\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\102\006\062\012\u011f\013\112\014\103\015\121\016\107" +
    "\020\006\025\063\026\120\027\077\030\014\031\116\032" +
    "\037\033\013\034\073\037\026\040\024\041\015\042\020" +
    "\043\040\044\045\045\115\046\017\047\004\050\117\051" +
    "\036\052\051\053\010\054\016\057\030\060\074\061\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\006\062" +
    "\012\135\013\112\014\103\015\121\016\107\017\137\020" +
    "\006\023\u0125\024\134\025\063\026\120\027\077\030\014" +
    "\031\116\032\037\033\013\034\073\037\026\040\024\041" +
    "\015\042\020\043\040\044\045\045\115\046\017\047\004" +
    "\050\117\051\036\052\051\053\010\054\016\057\030\060" +
    "\074\061\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\006\062\012\u0128\013\112\014\103\015\121\016" +
    "\107\020\006\025\063\026\120\027\077\030\014\031\116" +
    "\032\037\033\013\034\073\037\026\040\024\041\015\042" +
    "\020\043\040\044\045\045\115\046\017\047\004\050\117" +
    "\051\036\052\051\053\010\054\016\057\030\060\074\061" +
    "\012\001\001\000\002\001\001\000\106\004\257\005\061" +
    "\006\062\012\076\013\112\014\103\015\121\016\107\020" +
    "\006\025\063\026\120\027\077\030\014\031\116\032\037" +
    "\033\013\034\073\037\026\040\024\041\015\042\020\043" +
    "\040\044\045\045\115\046\017\047\004\050\117\051\036" +
    "\052\051\053\010\054\016\057\030\060\074\061\012\001" +
    "\001\000\002\001\001\000\102\006\062\012\u012c\013\112" +
    "\014\103\015\121\016\107\020\006\025\063\026\120\027" +
    "\077\030\014\031\116\032\037\033\013\034\073\037\026" +
    "\040\024\041\015\042\020\043\040\044\045\045\115\046" +
    "\017\047\004\050\117\051\036\052\051\053\010\054\016" +
    "\057\030\060\074\061\012\001\001\000\002\001\001\000" +
    "\102\006\062\012\u012e\013\112\014\103\015\121\016\107" +
    "\020\006\025\063\026\120\027\077\030\014\031\116\032" +
    "\037\033\013\034\073\037\026\040\024\041\015\042\020" +
    "\043\040\044\045\045\115\046\017\047\004\050\117\051" +
    "\036\052\051\053\010\054\016\057\030\060\074\061\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // factor ::= MINUS factor 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpMul(new ExpLit(FnPlotValue.make(-1.0)), a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // factor ::= size 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // factor ::= funCall 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // number ::= HEX 
            {
              FnPlotValue< ? > RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 String hex = h.substring(2, h.length());
			RESULT = FnPlotValue.make((int) Long.parseLong(hex, 16)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // number ::= BIN 
            {
              FnPlotValue< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 String bin = b.substring(2, b.length());
			RESULT = FnPlotValue.make((int) Long.parseLong(bin, 2)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // power ::= factor POW power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpPow(f, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // term ::= term MOD power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // term ::= term DIV power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // term ::= term MUL power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arithExp ::= arithExp SUBTRACT term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // definition ::= DEF VARIABLE expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // letExp ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
            
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expL ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expL ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(e);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expL ::= expL COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(e);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expListE ::= expL 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funCall ::= LPAREN expression RPAREN LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp fd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCall(fd, el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funCall ::= VARIABLE LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCall(v, el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp proc = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp list = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpListCall(proc, list); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("call",34, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // paramL ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramL ::= PARAMETER VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <String> ls = new ArrayList<>();
			ls.add(p +" "+ v);
		  	RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramL ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <String> ls = new ArrayList<>();
			ls.add(v);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramL ::= paramL COMMA PARAMETER VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(p +" "+ v);
		  	RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramL ::= paramL COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(v);
		  RESULT = ls;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramListE ::= paramL 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // funDef ::= PROC LPAREN paramListE RPAREN expression 
            {
              Exp RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpFunction (pl, body) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funDef",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // funDef ::= FUN LPAREN paramListE RPAREN MAPS expression 
            {
              Exp RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpFunction (pl, body) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funDef",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // clearExp ::= CLEAR 
            {
              Exp RESULT =null;
		RESULT = new ExpClear(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("clearExp",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // plotExp ::= PLOT expression FOR VARIABLE IN LSQR factor COLON factor RSQR 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp low = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp high = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
					RESULT = new ExpPlot(body, v, low, high);
					
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("plotExp",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // loop ::= REPEAT expression UNTIL expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(e, c, "repeat"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // loop ::= FOR binding TO expression DO expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(b, e1, e2, "for"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // loop ::= WHILE expression DO expression 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(e, c, "while");  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IOExp ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpReadPrint("readint"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("IOExp",47, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IOExp ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		 RESULT = new ExpReadPrint("read"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("IOExp",47, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IOExp ::= PRINTLN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpReadPrint(e, "println"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("IOExp",47, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IOExp ::= PRINT LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpReadPrint(v, "print"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("IOExp",47, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else ::= ELSE 
            {
              Exp RESULT =null;
		 RESULT = new ExpBool(new Boolean(true)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("else",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // compare ::= arithExp COMPARISON arithExp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpSize(e1, e2, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // compare ::= literal COMPARISON literal 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpSize(e1, e2, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // compare ::= arithExp COMPARISON literal 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpSize(e1, e2, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // compare ::= literal COMPARISON arithExp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpSize(e1, e2, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // compare ::= PAIRQ LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e, e, "type"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // compare ::= EQUAL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e1, e2, "equal"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // compare ::= EQV LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e1, e2, "eqv"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // compare ::= arithExp COMPARE arithExp 
            {
              Exp RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpCompare(a1, a2, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logops ::= LOGOP compare 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLogOp(c, c, l); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // logops ::= compare LOGOP compare 
            {
              Exp RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLogOp(c1, c2, l); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condition ::= else 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("condition",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condition ::= compare 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("condition",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condition ::= logops 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("condition",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // size ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(v, "size"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("size",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // indexP ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(p, new ExpLit(FnPlotValue.make(1))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexP",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // indexP ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(p, new ExpLit(FnPlotValue.make(0))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexP",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // indexV ::= arithExp LSQR arithExp RSQR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new 		ExpIndex(v , a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexV",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // indexV ::= vector LSQR arithExp RSQR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(v , a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexV",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // caseList ::= expression COLON expression 
            {
              ArrayList<Exp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(new ExpIf (c, body, body));
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseList",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // caseList ::= caseList COMMA expression COLON expression 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(new ExpIf (c, body, body));
		  RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseList",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // caseListE ::= caseList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseListE",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // caseExp ::= CASE LBRACE caseListE RBRACE 
            {
              Exp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> cl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCase(cl); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseExp",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ifElseExp ::= IF expression THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp body1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpIf (c, body1, body2) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("ifElseExp",41, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // subvector ::= expression FOR VARIABLE IN RANGE LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).right;
		Exp val = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
	RESULT = new ExpVecComp(v, val, start, stop, new ExpBool(new Boolean(true))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // subvector ::= expression FOR VARIABLE IN RANGE LPAREN expression COMMA expression RPAREN IF condition 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).right;
		Exp val = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
	RESULT = new ExpVecComp(v, val, start, stop, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // subvector ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // subvector ::= expression COLON expression 
            {
              Exp RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpSubVector(size, e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vectorExpL ::= subvector 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(e);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vectorExpL",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vectorExpL ::= vectorExpL COMMA subvector 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(e);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vectorExpL",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vector ::= LVEC vectorExpL RVEC 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpVector(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vector",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // concat ::= list CONCAT expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new 		   ExpConcat(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // concat ::= factor CONCAT expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpConcat(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list ::= LSQR expListE RSQR 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list ::= LIST LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pair ::= EMPTY 
            {
              Exp RESULT =null;
		 RESULT = new 			ExpPair(new ExpNull(), new ExpNull()); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpPair(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolean ::= BOOL 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpBool((Boolean) b); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("boolean",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // character ::= UNI 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString( (char)Integer.parseInt(u.substring(2,6)) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("character",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // character ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString( new Character(c.charAt(2)) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("character",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // string ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp string = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
		RESULT = new ExpSubStr(start, stop, string); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // string ::= STRING PLUS STRING 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString(s1 + s2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // string ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binaryheap ::= INSERT LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int insertleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp insert = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, insert, "insert"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binaryheap ::= DELETEMIN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, "deletemin"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binaryheap ::= GETMIN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, "getmin"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binaryheap ::= HEAPIFY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(v, "heapify"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literal ::= boolean 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = b; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literal ::= indexP 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literal ::= indexV 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literal ::= character 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal ::= binaryheap 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= list 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // literal ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= string 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= IOExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= loop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= literal 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= caseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= ifElseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= condition 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= call 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= concat 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= BEGIN stmtList END 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= clearExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= plotExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= funDef 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

