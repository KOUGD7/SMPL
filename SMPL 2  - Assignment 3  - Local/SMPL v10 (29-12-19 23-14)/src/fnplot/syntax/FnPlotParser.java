
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 29 21:25:11 EST 2019
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 29 21:25:11 EST 2019
  */
public class FnPlotParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\057\006\000\002\057" +
    "\010\000\002\057\006\000\002\056\006\000\002\056\006" +
    "\000\002\056\006\000\002\056\010\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\005\000\002" +
    "\032\012\000\002\033\003\000\002\033\003\000\002\052" +
    "\010\000\002\053\006\000\002\055\003\000\002\054\007" +
    "\000\002\054\005\000\002\034\005\000\002\036\005\000" +
    "\002\036\003\000\002\035\005\000\002\035\003\000\002" +
    "\035\016\000\002\035\014\000\002\040\010\000\002\040" +
    "\003\000\002\041\006\000\002\041\006\000\002\042\006" +
    "\000\002\042\006\000\002\043\006\000\002\037\006\000" +
    "\002\037\005\000\002\044\010\000\002\045\005\000\002" +
    "\045\005\000\002\051\003\000\002\051\003\000\002\046" +
    "\003\000\002\046\003\000\002\050\005\000\002\050\004" +
    "\000\002\050\010\000\002\050\010\000\002\050\006\000" +
    "\002\047\005\000\002\047\003\000\002\025\010\000\002" +
    "\025\007\000\002\021\003\000\002\022\005\000\002\022" +
    "\003\000\002\022\003\000\002\026\006\000\002\026\010" +
    "\000\002\023\003\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\027\014\000\002\030\003\000\002" +
    "\006\006\000\002\011\005\000\002\007\004\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\005\006" +
    "\000\002\005\006\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\020\005\000\002\020" +
    "\003\000\002\016\003\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\005\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\126\004\025\006\054\010\040\011\017\021" +
    "\065\022\116\024\023\031\077\033\036\034\073\035\107" +
    "\036\037\040\074\041\106\042\020\043\043\044\053\045" +
    "\032\046\117\047\031\050\075\052\052\053\101\061\070" +
    "\063\115\064\004\066\062\067\061\070\046\071\103\072" +
    "\050\073\063\075\042\077\100\103\021\104\047\106\027" +
    "\107\104\110\044\111\030\112\060\113\010\001\002\000" +
    "\040\005\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\032\uffbe\051\uffbe\052\uffbe\062\uffbe\072\uffbe\074\uffbe\076" +
    "\uffbe\101\uffbe\106\uffbe\001\002\000\056\005\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\023\uff99\025\uff99\026" +
    "\uff99\027\uff99\030\uff99\031\uff99\032\uff99\051\uff99\052\uff99" +
    "\062\uff99\072\uff99\074\uff99\076\uff99\101\uff99\105\uff99\106" +
    "\uff99\001\002\000\134\002\ufffe\004\ufffe\006\ufffe\010\ufffe" +
    "\011\ufffe\021\ufffe\022\ufffe\024\ufffe\025\ufffe\031\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\052" +
    "\ufffe\053\ufffe\061\ufffe\063\ufffe\064\ufffe\066\ufffe\067\ufffe" +
    "\070\ufffe\071\ufffe\072\ufffe\073\ufffe\075\ufffe\077\ufffe\100" +
    "\ufffe\103\ufffe\104\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe" +
    "\112\ufffe\113\ufffe\001\002\000\034\005\uffec\023\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\032\uffec\052\uffec\062\uffec" +
    "\072\uffec\074\uffec\076\uffec\101\uffec\001\002\000\062\005" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\020\uff93" +
    "\023\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\051\uff93\052\uff93\060\uff93\062\uff93\072\uff93\074\uff93" +
    "\076\uff93\101\uff93\105\uff93\106\uff93\001\002\000\034\005" +
    "\uffde\023\uffde\025\uffde\026\uffde\027\uffde\030\uffde\032\uffde" +
    "\052\uffde\062\uffde\072\uffde\074\uffde\076\uffde\101\uffde\001" +
    "\002\000\034\005\ufff9\023\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\032\ufff9\052\ufff9\062\ufff9\072\ufff9\074\ufff9\076" +
    "\ufff9\101\ufff9\001\002\000\034\005\ufff0\023\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\032\ufff0\052\ufff0\062\ufff0\072" +
    "\ufff0\074\ufff0\076\ufff0\101\ufff0\001\002\000\034\005\uffeb" +
    "\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\052" +
    "\uffeb\062\uffeb\072\uffeb\074\uffeb\076\uffeb\101\uffeb\001\002" +
    "\000\040\005\uffb6\023\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\032\uffb6\051\uffb6\052\uffb6\062\uffb6\072\uffb6\074\uffb6" +
    "\076\uffb6\101\uffb6\106\uffb6\001\002\000\034\005\uffef\023" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\052\uffef" +
    "\062\uffef\072\uffef\074\uffef\076\uffef\101\uffef\001\002\000" +
    "\034\005\uffa8\023\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\032\uffa8\052\uffa8\062\uffa8\072\uffa8\074\uffa8\076\uffa8\101" +
    "\uffa8\001\002\000\004\004\u0112\001\002\000\062\005\uff96" +
    "\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\020\uff96\023" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\051\uff96\052\uff96\060\uff96\062\uff96\072\uff96\074\uff96\076" +
    "\uff96\101\uff96\105\uff96\106\uff96\001\002\000\034\005\ufff1" +
    "\023\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\052" +
    "\ufff1\062\ufff1\072\ufff1\074\ufff1\076\ufff1\101\ufff1\001\002" +
    "\000\126\004\025\006\054\010\040\011\017\021\065\022" +
    "\116\024\023\031\077\033\036\034\073\035\107\036\037" +
    "\040\074\041\106\042\020\043\043\044\053\045\032\046" +
    "\117\047\031\050\075\052\052\053\101\061\070\063\115" +
    "\064\004\066\062\067\061\070\046\071\103\072\050\073" +
    "\063\075\042\077\100\103\021\104\047\106\027\107\104" +
    "\110\044\111\030\112\060\113\010\001\002\000\036\005" +
    "\ufff4\023\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4" +
    "\052\ufff4\060\u010e\062\ufff4\072\ufff4\074\ufff4\076\ufff4\101" +
    "\ufff4\001\002\000\124\004\025\006\054\010\040\011\017" +
    "\021\065\022\116\024\023\031\077\033\036\034\073\035" +
    "\107\036\037\040\074\041\106\042\020\043\043\044\053" +
    "\045\032\046\117\050\075\052\052\053\101\061\070\063" +
    "\115\064\004\066\062\067\061\070\046\071\103\072\050" +
    "\073\063\075\042\077\100\103\021\104\122\106\027\107" +
    "\104\110\044\111\030\112\060\113\010\001\002\000\034" +
    "\005\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032" +
    "\uffe9\052\uffe9\062\uffe9\072\uffe9\074\uffe9\076\uffe9\101\uffe9" +
    "\001\002\000\022\004\025\021\065\052\052\064\004\103" +
    "\021\104\122\112\060\113\010\001\002\000\034\005\uffd9" +
    "\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\052" +
    "\uffd9\062\uffd9\072\uffd9\074\uffd9\076\uffd9\101\uffd9\001\002" +
    "\000\004\104\u0105\001\002\000\004\004\u0101\001\002\000" +
    "\036\005\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\032\uffc0\051\uffc0\052\uffc0\062\uffc0\072\uffc0\074\uffc0\076" +
    "\uffc0\101\uffc0\001\002\000\034\005\uffdf\023\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\032\uffdf\052\uffdf\062\uffdf\072" +
    "\uffdf\074\uffdf\076\uffdf\101\uffdf\001\002\000\034\005\uffee" +
    "\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee\032\uffee\052" +
    "\uffee\062\uffee\072\uffee\074\uffee\076\uffee\101\uffee\001\002" +
    "\000\034\005\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\032\uffcb\052\uffcb\062\uffcb\072\uffcb\074\uffcb\076\uffcb" +
    "\101\uffcb\001\002\000\004\004\376\001\002\000\124\004" +
    "\025\006\054\010\040\011\017\021\065\022\116\024\023" +
    "\031\077\033\036\034\073\035\107\036\037\040\074\041" +
    "\106\042\020\043\043\044\053\045\032\046\117\050\075" +
    "\052\052\053\101\061\070\063\115\064\004\066\062\067" +
    "\061\070\046\071\103\072\050\073\063\075\042\077\100" +
    "\103\021\104\122\106\027\107\104\110\044\111\030\112" +
    "\060\113\010\001\002\000\034\005\ufff2\023\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\032\ufff2\052\ufff2\062\ufff2\072" +
    "\ufff2\074\ufff2\076\ufff2\101\ufff2\001\002\000\032\004\025" +
    "\021\065\042\020\043\043\044\053\052\052\064\004\103" +
    "\021\104\122\106\027\112\060\113\010\001\002\000\004" +
    "\004\355\001\002\000\034\005\uffda\023\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\032\uffda\052\uffda\062\uffda\072\uffda" +
    "\074\uffda\076\uffda\101\uffda\001\002\000\034\005\uffed\023" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed\052\uffed" +
    "\062\uffed\072\uffed\074\uffed\076\uffed\101\uffed\001\002\000" +
    "\004\004\352\001\002\000\032\004\123\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\347\020\uff91\027\uff91\031" +
    "\uff91\060\uff91\105\uff91\001\002\000\004\104\140\001\002" +
    "\000\130\002\001\004\025\006\054\010\040\011\017\021" +
    "\065\022\116\024\023\031\077\033\036\034\073\035\107" +
    "\036\037\040\074\041\106\042\020\043\043\044\053\045" +
    "\032\046\117\047\031\050\075\052\052\053\101\061\070" +
    "\063\115\064\004\066\062\067\061\070\046\071\103\072" +
    "\050\073\063\075\042\077\100\103\021\104\047\106\027" +
    "\107\104\110\044\111\030\112\060\113\010\001\002\000" +
    "\040\005\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\032\uffbd\051\uffbd\052\uffbd\062\uffbd\072\uffbd\074\uffbd\076" +
    "\uffbd\101\uffbd\106\uffbd\001\002\000\004\004\337\001\002" +
    "\000\004\004\325\001\002\000\134\002\ufffd\004\ufffd\006" +
    "\ufffd\010\ufffd\011\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd" +
    "\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\052\ufffd\053\ufffd\061\ufffd\063\ufffd\064\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\075\ufffd" +
    "\077\ufffd\100\ufffd\103\ufffd\104\ufffd\106\ufffd\107\ufffd\110" +
    "\ufffd\111\ufffd\112\ufffd\113\ufffd\001\002\000\034\005\ufff8" +
    "\023\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8\052" +
    "\ufff8\062\ufff8\072\ufff8\074\ufff8\076\ufff8\101\ufff8\001\002" +
    "\000\034\005\ufffb\023\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\032\ufffb\052\ufffb\062\ufffb\072\ufffb\074\ufffb\076\ufffb" +
    "\101\ufffb\001\002\000\062\005\uff94\012\uff94\013\uff94\014" +
    "\uff94\015\uff94\016\uff94\020\uff94\023\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\051\uff94\052\uff94\060" +
    "\uff94\062\uff94\072\uff94\074\uff94\076\uff94\101\uff94\105\uff94" +
    "\106\uff94\001\002\000\004\004\322\001\002\000\004\004" +
    "\317\001\002\000\124\004\025\006\054\010\040\011\017" +
    "\021\065\022\116\024\023\031\077\033\036\034\073\035" +
    "\107\036\037\040\074\041\106\042\020\043\043\044\053" +
    "\045\032\046\117\050\075\052\052\053\101\061\070\063" +
    "\115\064\004\066\062\067\061\070\046\071\103\072\050" +
    "\073\063\075\042\077\100\103\021\104\122\106\027\107" +
    "\104\110\044\111\030\112\060\113\010\001\002\000\004" +
    "\002\313\001\002\000\004\103\312\001\002\000\036\005" +
    "\ufff5\023\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\307" +
    "\032\ufff5\052\ufff5\062\ufff5\072\ufff5\074\ufff5\076\ufff5\101" +
    "\ufff5\001\002\000\034\005\uffe8\023\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\032\uffe8\052\uffe8\062\uffe8\072\uffe8\074" +
    "\uffe8\076\uffe8\101\uffe8\001\002\000\124\004\025\006\054" +
    "\010\040\011\017\021\065\022\116\024\023\031\077\033" +
    "\036\034\073\035\107\036\037\040\074\041\106\042\020" +
    "\043\043\044\053\045\032\046\117\050\075\052\052\053" +
    "\101\061\070\063\115\064\004\066\062\067\061\070\046" +
    "\071\103\072\050\073\063\075\042\077\100\103\021\104" +
    "\122\106\027\107\104\110\044\111\030\112\060\113\010" +
    "\001\002\000\004\027\263\001\002\000\034\005\ufffa\023" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa\052\ufffa" +
    "\062\ufffa\072\ufffa\074\ufffa\076\ufffa\101\ufffa\001\002\000" +
    "\004\004\256\001\002\000\004\004\253\001\002\000\032" +
    "\004\025\021\065\042\020\043\043\044\053\052\052\064" +
    "\004\103\021\104\122\106\027\112\060\113\010\001\002" +
    "\000\056\005\uff9d\012\uff9d\013\uff9d\014\177\015\200\016" +
    "\176\023\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\051\uff9d\052\uff9d\062\uff9d\072\uff9d\074\uff9d\076" +
    "\uff9d\101\uff9d\105\uff9d\106\uff9d\001\002\000\130\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\026" +
    "\uff8e\031\077\032\uff8e\033\036\034\073\035\107\036\037" +
    "\040\074\041\106\042\020\043\043\044\053\045\032\046" +
    "\117\050\075\052\052\053\101\061\070\063\115\064\004" +
    "\066\062\067\061\070\046\071\103\072\050\073\063\075" +
    "\042\077\100\103\021\104\122\106\027\107\104\110\044" +
    "\111\030\112\060\113\010\001\002\000\126\004\025\006" +
    "\054\010\040\011\017\021\065\022\116\024\023\031\077" +
    "\033\036\034\073\035\107\036\037\040\074\041\106\042" +
    "\020\043\043\044\053\045\032\046\117\047\031\050\075" +
    "\052\052\053\101\061\070\063\115\064\004\066\062\067" +
    "\061\070\046\071\103\072\050\073\063\075\042\077\100" +
    "\103\021\104\047\106\027\107\104\110\044\111\030\112" +
    "\060\113\010\001\002\000\004\024\226\001\002\000\062" +
    "\005\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\020" +
    "\uff92\023\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\051\uff92\052\uff92\060\uff92\062\uff92\072\uff92\074" +
    "\uff92\076\uff92\101\uff92\105\uff92\106\uff92\001\002\000\004" +
    "\004\221\001\002\000\036\005\uffdd\012\217\023\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\032\uffdd\052\uffdd\062\uffdd" +
    "\072\uffdd\074\uffdd\076\uffdd\101\uffdd\001\002\000\044\005" +
    "\uffe7\012\174\013\173\023\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\214\032\uffe7\052\uffe7\062\uffe7\072\uffe7\074" +
    "\uffe7\076\uffe7\101\uffe7\105\172\001\002\000\004\004\211" +
    "\001\002\000\004\004\206\001\002\000\034\005\ufff3\023" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3\052\ufff3" +
    "\062\ufff3\072\ufff3\074\ufff3\076\ufff3\101\ufff3\001\002\000" +
    "\034\005\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\032\uffea\052\uffea\062\uffea\072\uffea\074\uffea\076\uffea\101" +
    "\uffea\001\002\000\040\005\uffbf\023\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\032\uffbf\051\uffbf\052\uffbf\062\uffbf\072" +
    "\uffbf\074\uffbf\076\uffbf\101\uffbf\106\167\001\002\000\062" +
    "\005\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\020" +
    "\uff90\023\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\032\uff90\051\uff90\052\uff90\060\uff90\062\uff90\072\uff90\074" +
    "\uff90\076\uff90\101\uff90\105\uff90\106\uff90\001\002\000\056" +
    "\005\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\020" +
    "\162\023\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\052\uff97\060\163\062\uff97\072\uff97\074\uff97\076" +
    "\uff97\101\uff97\105\uff97\001\002\000\004\004\153\001\002" +
    "\000\006\023\uff8e\104\140\001\002\000\004\004\120\001" +
    "\002\000\124\004\025\006\054\010\040\011\017\021\065" +
    "\022\116\024\023\031\077\033\036\034\073\035\107\036" +
    "\037\040\074\041\106\042\020\043\043\044\053\045\032" +
    "\046\117\050\075\052\052\053\101\061\070\063\115\064" +
    "\004\066\062\067\061\070\046\071\103\072\050\073\063" +
    "\075\042\077\100\103\021\104\122\106\027\107\104\110" +
    "\044\111\030\112\060\113\010\001\002\000\004\026\133" +
    "\001\002\000\064\004\123\005\uff91\012\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\020\uff91\023\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\051\uff91\052\uff91\060" +
    "\uff91\062\uff91\072\uff91\074\uff91\076\uff91\101\uff91\105\uff91" +
    "\106\uff91\001\002\000\130\004\025\005\uff8e\006\054\010" +
    "\040\011\017\021\065\022\116\024\023\026\uff8e\031\077" +
    "\033\036\034\073\035\107\036\037\040\074\041\106\042" +
    "\020\043\043\044\053\045\032\046\117\050\075\052\052" +
    "\053\101\061\070\063\115\064\004\066\062\067\061\070" +
    "\046\071\103\072\050\073\063\075\042\077\100\103\021" +
    "\104\122\106\027\107\104\110\044\111\030\112\060\113" +
    "\010\001\002\000\010\005\uffad\026\131\032\uffad\001\002" +
    "\000\010\005\uffab\026\uffab\032\uffab\001\002\000\004\005" +
    "\130\001\002\000\010\005\uffaa\026\uffaa\032\uffaa\001\002" +
    "\000\062\005\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\020\uffaf\023\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\051\uffaf\052\uffaf\060\uffaf\062\uffaf\072" +
    "\uffaf\074\uffaf\076\uffaf\101\uffaf\105\uffaf\106\uffaf\001\002" +
    "\000\124\004\025\006\054\010\040\011\017\021\065\022" +
    "\116\024\023\031\077\033\036\034\073\035\107\036\037" +
    "\040\074\041\106\042\020\043\043\044\053\045\032\046" +
    "\117\050\075\052\052\053\101\061\070\063\115\064\004" +
    "\066\062\067\061\070\046\071\103\072\050\073\063\075" +
    "\042\077\100\103\021\104\122\106\027\107\104\110\044" +
    "\111\030\112\060\113\010\001\002\000\010\005\uffac\026" +
    "\uffac\032\uffac\001\002\000\124\004\025\006\054\010\040" +
    "\011\017\021\065\022\116\024\023\031\077\033\036\034" +
    "\073\035\107\036\037\040\074\041\106\042\020\043\043" +
    "\044\053\045\032\046\117\050\075\052\052\053\101\061" +
    "\070\063\115\064\004\066\062\067\061\070\046\071\103" +
    "\072\050\073\063\075\042\077\100\103\021\104\122\106" +
    "\027\107\104\110\044\111\030\112\060\113\010\001\002" +
    "\000\004\005\135\001\002\000\034\005\uffc3\023\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3\052\uffc3\062\uffc3" +
    "\072\uffc3\074\uffc3\076\uffc3\101\uffc3\001\002\000\004\023" +
    "\uffa4\001\002\000\006\023\uff8e\026\146\001\002\000\004" +
    "\017\144\001\002\000\004\023\142\001\002\000\124\004" +
    "\025\006\054\010\040\011\017\021\065\022\116\024\023" +
    "\031\077\033\036\034\073\035\107\036\037\040\074\041" +
    "\106\042\020\043\043\044\053\045\032\046\117\050\075" +
    "\052\052\053\101\061\070\063\115\064\004\066\062\067" +
    "\061\070\046\071\103\072\050\073\063\075\042\077\100" +
    "\103\021\104\122\106\027\107\104\110\044\111\030\112" +
    "\060\113\010\001\002\000\034\005\uffa7\023\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\032\uffa7\052\uffa7\062\uffa7\072" +
    "\uffa7\074\uffa7\076\uffa7\101\uffa7\001\002\000\124\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\050\075\052" +
    "\052\053\101\061\070\063\115\064\004\066\062\067\061" +
    "\070\046\071\103\072\050\073\063\075\042\077\100\103" +
    "\021\104\122\106\027\107\104\110\044\111\030\112\060" +
    "\113\010\001\002\000\010\023\uffa6\026\uffa6\101\uffa6\001" +
    "\002\000\004\104\140\001\002\000\004\023\uffa2\001\002" +
    "\000\004\023\uffa5\001\002\000\006\023\uff8e\026\146\001" +
    "\002\000\004\023\uffa3\001\002\000\124\004\025\006\054" +
    "\010\040\011\017\021\065\022\116\024\023\031\077\033" +
    "\036\034\073\035\107\036\037\040\074\041\106\042\020" +
    "\043\043\044\053\045\032\046\117\050\075\052\052\053" +
    "\101\061\070\063\115\064\004\066\062\067\061\070\046" +
    "\071\103\072\050\073\063\075\042\077\100\103\021\104" +
    "\122\106\027\107\104\110\044\111\030\112\060\113\010" +
    "\001\002\000\004\026\155\001\002\000\124\004\025\006" +
    "\054\010\040\011\017\021\065\022\116\024\023\031\077" +
    "\033\036\034\073\035\107\036\037\040\074\041\106\042" +
    "\020\043\043\044\053\045\032\046\117\050\075\052\052" +
    "\053\101\061\070\063\115\064\004\066\062\067\061\070" +
    "\046\071\103\072\050\073\063\075\042\077\100\103\021" +
    "\104\122\106\027\107\104\110\044\111\030\112\060\113" +
    "\010\001\002\000\004\026\157\001\002\000\124\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\050\075\052" +
    "\052\053\101\061\070\063\115\064\004\066\062\067\061" +
    "\070\046\071\103\072\050\073\063\075\042\077\100\103" +
    "\021\104\122\106\027\107\104\110\044\111\030\112\060" +
    "\113\010\001\002\000\004\005\161\001\002\000\034\005" +
    "\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb" +
    "\052\uffdb\062\uffdb\072\uffdb\074\uffdb\076\uffdb\101\uffdb\001" +
    "\002\000\016\004\025\021\065\103\021\104\122\112\060" +
    "\113\010\001\002\000\124\004\025\006\054\010\040\011" +
    "\017\021\065\022\116\024\023\031\077\033\036\034\073" +
    "\035\107\036\037\040\074\041\106\042\020\043\043\044" +
    "\053\045\032\046\117\050\075\052\052\053\101\061\070" +
    "\063\115\064\004\066\062\067\061\070\046\071\103\072" +
    "\050\073\063\075\042\077\100\103\021\104\122\106\027" +
    "\107\104\110\044\111\030\112\060\113\010\001\002\000" +
    "\034\005\uffc2\023\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\032\uffc2\052\uffc2\062\uffc2\072\uffc2\074\uffc2\076\uffc2\101" +
    "\uffc2\001\002\000\056\005\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\023\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\051\uff98\052\uff98\062\uff98\072\uff98" +
    "\074\uff98\076\uff98\101\uff98\105\uff98\106\uff98\001\002\000" +
    "\060\005\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\020\162\023\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\051\uff97\052\uff97\062\uff97\072\uff97\074\uff97" +
    "\076\uff97\101\uff97\105\uff97\106\uff97\001\002\000\022\004" +
    "\025\021\065\052\052\064\004\103\021\104\122\112\060" +
    "\113\010\001\002\000\036\005\uffbc\023\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\032\uffbc\051\uffbc\052\uffbc\062\uffbc" +
    "\072\uffbc\074\uffbc\076\uffbc\101\uffbc\001\002\000\010\012" +
    "\174\013\173\105\172\001\002\000\016\004\025\021\065" +
    "\103\021\104\122\112\060\113\010\001\002\000\016\004" +
    "\025\021\065\103\021\104\122\112\060\113\010\001\002" +
    "\000\016\004\025\021\065\103\021\104\122\112\060\113" +
    "\010\001\002\000\056\005\uff9f\012\uff9f\013\uff9f\014\177" +
    "\015\200\016\176\023\uff9f\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\051\uff9f\052\uff9f\062\uff9f\072\uff9f" +
    "\074\uff9f\076\uff9f\101\uff9f\105\uff9f\106\uff9f\001\002\000" +
    "\016\004\025\021\065\103\021\104\122\112\060\113\010" +
    "\001\002\000\016\004\025\021\065\103\021\104\122\112" +
    "\060\113\010\001\002\000\016\004\025\021\065\103\021" +
    "\104\122\112\060\113\010\001\002\000\056\005\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\023\uff9b\025\uff9b" +
    "\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\051\uff9b\052" +
    "\uff9b\062\uff9b\072\uff9b\074\uff9b\076\uff9b\101\uff9b\105\uff9b" +
    "\106\uff9b\001\002\000\056\005\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\051\uff9c\052\uff9c\062\uff9c\072" +
    "\uff9c\074\uff9c\076\uff9c\101\uff9c\105\uff9c\106\uff9c\001\002" +
    "\000\056\005\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\023\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\051\uff9a\052\uff9a\062\uff9a\072\uff9a\074\uff9a\076" +
    "\uff9a\101\uff9a\105\uff9a\106\uff9a\001\002\000\056\005\uff9e" +
    "\012\uff9e\013\uff9e\014\177\015\200\016\176\023\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\051\uff9e" +
    "\052\uff9e\062\uff9e\072\uff9e\074\uff9e\076\uff9e\101\uff9e\105" +
    "\uff9e\106\uff9e\001\002\000\044\005\uffb7\012\174\013\173" +
    "\023\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\032\uffb7\051" +
    "\uffb7\052\uffb7\062\uffb7\072\uffb7\074\uffb7\076\uffb7\101\uffb7" +
    "\106\uffb7\001\002\000\124\004\025\006\054\010\040\011" +
    "\017\021\065\022\116\024\023\031\077\033\036\034\073" +
    "\035\107\036\037\040\074\041\106\042\020\043\043\044" +
    "\053\045\032\046\117\050\075\052\052\053\101\061\070" +
    "\063\115\064\004\066\062\067\061\070\046\071\103\072" +
    "\050\073\063\075\042\077\100\103\021\104\122\106\027" +
    "\107\104\110\044\111\030\112\060\113\010\001\002\000" +
    "\004\005\210\001\002\000\034\005\uffc8\023\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\032\uffc8\052\uffc8\062\uffc8\072" +
    "\uffc8\074\uffc8\076\uffc8\101\uffc8\001\002\000\124\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\050\075\052" +
    "\052\053\101\061\070\063\115\064\004\066\062\067\061" +
    "\070\046\071\103\072\050\073\063\075\042\077\100\103" +
    "\021\104\122\106\027\107\104\110\044\111\030\112\060" +
    "\113\010\001\002\000\004\005\213\001\002\000\034\005" +
    "\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6" +
    "\052\uffc6\062\uffc6\072\uffc6\074\uffc6\076\uffc6\101\uffc6\001" +
    "\002\000\016\004\025\021\065\103\021\104\122\112\060" +
    "\113\010\001\002\000\010\012\174\013\173\032\216\001" +
    "\002\000\034\005\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\032\uffc9\052\uffc9\062\uffc9\072\uffc9\074\uffc9\076" +
    "\uffc9\101\uffc9\001\002\000\004\107\220\001\002\000\034" +
    "\005\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032" +
    "\uffdc\052\uffdc\062\uffdc\072\uffdc\074\uffdc\076\uffdc\101\uffdc" +
    "\001\002\000\124\004\025\006\054\010\040\011\017\021" +
    "\065\022\116\024\023\031\077\033\036\034\073\035\107" +
    "\036\037\040\074\041\106\042\020\043\043\044\053\045" +
    "\032\046\117\050\075\052\052\053\101\061\070\063\115" +
    "\064\004\066\062\067\061\070\046\071\103\072\050\073" +
    "\063\075\042\077\100\103\021\104\122\106\027\107\104" +
    "\110\044\111\030\112\060\113\010\001\002\000\004\026" +
    "\223\001\002\000\124\004\025\006\054\010\040\011\017" +
    "\021\065\022\116\024\023\031\077\033\036\034\073\035" +
    "\107\036\037\040\074\041\106\042\020\043\043\044\053" +
    "\045\032\046\117\050\075\052\052\053\101\061\070\063" +
    "\115\064\004\066\062\067\061\070\046\071\103\072\050" +
    "\073\063\075\042\077\100\103\021\104\122\106\027\107" +
    "\104\110\044\111\030\112\060\113\010\001\002\000\004" +
    "\005\225\001\002\000\034\005\uffe0\023\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\032\uffe0\052\uffe0\062\uffe0\072\uffe0" +
    "\074\uffe0\076\uffe0\101\uffe0\001\002\000\032\004\025\021" +
    "\065\042\020\043\043\044\053\052\052\064\004\103\021" +
    "\104\122\106\027\112\060\113\010\001\002\000\004\025" +
    "\240\001\002\000\006\025\uffd6\026\234\001\002\000\004" +
    "\030\232\001\002\000\124\004\025\006\054\010\040\011" +
    "\017\021\065\022\116\024\023\031\077\033\036\034\073" +
    "\035\107\036\037\040\074\041\106\042\020\043\043\044" +
    "\053\045\032\046\117\050\075\052\052\053\101\061\070" +
    "\063\115\064\004\066\062\067\061\070\046\071\103\072" +
    "\050\073\063\075\042\077\100\103\021\104\122\106\027" +
    "\107\104\110\044\111\030\112\060\113\010\001\002\000" +
    "\006\025\uffd4\026\uffd4\001\002\000\032\004\025\021\065" +
    "\042\020\043\043\044\053\052\052\064\004\103\021\104" +
    "\122\106\027\112\060\113\010\001\002\000\004\030\236" +
    "\001\002\000\124\004\025\006\054\010\040\011\017\021" +
    "\065\022\116\024\023\031\077\033\036\034\073\035\107" +
    "\036\037\040\074\041\106\042\020\043\043\044\053\045" +
    "\032\046\117\050\075\052\052\053\101\061\070\063\115" +
    "\064\004\066\062\067\061\070\046\071\103\072\050\073" +
    "\063\075\042\077\100\103\021\104\122\106\027\107\104" +
    "\110\044\111\030\112\060\113\010\001\002\000\006\025" +
    "\uffd5\026\uffd5\001\002\000\034\005\uffd7\023\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\032\uffd7\052\uffd7\062\uffd7\072" +
    "\uffd7\074\uffd7\076\uffd7\101\uffd7\001\002\000\130\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\047\031\050" +
    "\075\052\052\053\101\061\070\063\115\064\004\066\062" +
    "\067\061\070\046\071\103\072\050\073\063\075\042\077" +
    "\100\100\243\103\021\104\047\106\027\107\104\110\044" +
    "\111\030\112\060\113\010\001\002\000\134\002\uffff\004" +
    "\uffff\006\uffff\010\uffff\011\uffff\021\uffff\022\uffff\024\uffff" +
    "\025\uffff\031\uffff\033\uffff\034\uffff\035\uffff\036\uffff\040" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\052\uffff\053\uffff\061\uffff\063\uffff\064" +
    "\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff" +
    "\075\uffff\077\uffff\100\uffff\103\uffff\104\uffff\106\uffff\107" +
    "\uffff\110\uffff\111\uffff\112\uffff\113\uffff\001\002\000\034" +
    "\005\ufff6\023\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032" +
    "\ufff6\052\ufff6\062\ufff6\072\ufff6\074\ufff6\076\ufff6\101\ufff6" +
    "\001\002\000\004\032\245\001\002\000\036\005\uffc4\023" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\032\uffc4\052\uffc4" +
    "\060\uffc4\062\uffc4\072\uffc4\074\uffc4\076\uffc4\101\uffc4\001" +
    "\002\000\004\051\247\001\002\000\124\004\025\006\054" +
    "\010\040\011\017\021\065\022\116\024\023\031\077\033" +
    "\036\034\073\035\107\036\037\040\074\041\106\042\020" +
    "\043\043\044\053\045\032\046\117\050\075\052\052\053" +
    "\101\061\070\063\115\064\004\066\062\067\061\070\046" +
    "\071\103\072\050\073\063\075\042\077\100\103\021\104" +
    "\122\106\027\107\104\110\044\111\030\112\060\113\010" +
    "\001\002\000\004\052\251\001\002\000\124\004\025\006" +
    "\054\010\040\011\017\021\065\022\116\024\023\031\077" +
    "\033\036\034\073\035\107\036\037\040\074\041\106\042" +
    "\020\043\043\044\053\045\032\046\117\050\075\052\052" +
    "\053\101\061\070\063\115\064\004\066\062\067\061\070" +
    "\046\071\103\072\050\073\063\075\042\077\100\103\021" +
    "\104\122\106\027\107\104\110\044\111\030\112\060\113" +
    "\010\001\002\000\034\005\uffd8\023\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\032\uffd8\052\uffd8\062\uffd8\072\uffd8\074" +
    "\uffd8\076\uffd8\101\uffd8\001\002\000\130\004\025\005\uff8e" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\026" +
    "\uff8e\031\077\033\036\034\073\035\107\036\037\040\074" +
    "\041\106\042\020\043\043\044\053\045\032\046\117\050" +
    "\075\052\052\053\101\061\070\063\115\064\004\066\062" +
    "\067\061\070\046\071\103\072\050\073\063\075\042\077" +
    "\100\103\021\104\122\106\027\107\104\110\044\111\030" +
    "\112\060\113\010\001\002\000\004\005\255\001\002\000" +
    "\036\005\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\032\uffc5\052\uffc5\060\uffc5\062\uffc5\072\uffc5\074\uffc5\076" +
    "\uffc5\101\uffc5\001\002\000\124\004\025\006\054\010\040" +
    "\011\017\021\065\022\116\024\023\031\077\033\036\034" +
    "\073\035\107\036\037\040\074\041\106\042\020\043\043" +
    "\044\053\045\032\046\117\050\075\052\052\053\101\061" +
    "\070\063\115\064\004\066\062\067\061\070\046\071\103" +
    "\072\050\073\063\075\042\077\100\103\021\104\122\106" +
    "\027\107\104\110\044\111\030\112\060\113\010\001\002" +
    "\000\004\026\260\001\002\000\124\004\025\006\054\010" +
    "\040\011\017\021\065\022\116\024\023\031\077\033\036" +
    "\034\073\035\107\036\037\040\074\041\106\042\020\043" +
    "\043\044\053\045\032\046\117\050\075\052\052\053\101" +
    "\061\070\063\115\064\004\066\062\067\061\070\046\071" +
    "\103\072\050\073\063\075\042\077\100\103\021\104\122" +
    "\106\027\107\104\110\044\111\030\112\060\113\010\001" +
    "\002\000\004\005\262\001\002\000\034\005\uffcc\023\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\032\uffcc\052\uffcc\062" +
    "\uffcc\072\uffcc\074\uffcc\076\uffcc\101\uffcc\001\002\000\134" +
    "\002\ufffc\004\ufffc\006\ufffc\010\ufffc\011\ufffc\021\ufffc\022" +
    "\ufffc\024\ufffc\025\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\052\ufffc\053\ufffc\061\ufffc" +
    "\063\ufffc\064\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\075\ufffc\077\ufffc\100\ufffc\103\ufffc\104\ufffc" +
    "\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc\001" +
    "\002\000\006\026\304\062\305\001\002\000\006\026\uffd1" +
    "\062\uffd1\001\002\000\012\026\uffcf\030\270\062\uffcf\072" +
    "\267\001\002\000\004\104\272\001\002\000\124\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\050\075\052" +
    "\052\053\101\061\070\063\115\064\004\066\062\067\061" +
    "\070\046\071\103\072\050\073\063\075\042\077\100\103" +
    "\021\104\122\106\027\107\104\110\044\111\030\112\060" +
    "\113\010\001\002\000\006\026\uffd0\062\uffd0\001\002\000" +
    "\004\023\273\001\002\000\004\102\274\001\002\000\004" +
    "\004\275\001\002\000\124\004\025\006\054\010\040\011" +
    "\017\021\065\022\116\024\023\031\077\033\036\034\073" +
    "\035\107\036\037\040\074\041\106\042\020\043\043\044" +
    "\053\045\032\046\117\050\075\052\052\053\101\061\070" +
    "\063\115\064\004\066\062\067\061\070\046\071\103\072" +
    "\050\073\063\075\042\077\100\103\021\104\122\106\027" +
    "\107\104\110\044\111\030\112\060\113\010\001\002\000" +
    "\004\026\277\001\002\000\124\004\025\006\054\010\040" +
    "\011\017\021\065\022\116\024\023\031\077\033\036\034" +
    "\073\035\107\036\037\040\074\041\106\042\020\043\043" +
    "\044\053\045\032\046\117\050\075\052\052\053\101\061" +
    "\070\063\115\064\004\066\062\067\061\070\046\071\103" +
    "\072\050\073\063\075\042\077\100\103\021\104\122\106" +
    "\027\107\104\110\044\111\030\112\060\113\010\001\002" +
    "\000\004\005\301\001\002\000\010\026\uffcd\050\302\062" +
    "\uffcd\001\002\000\032\004\025\021\065\042\020\043\043" +
    "\044\053\052\052\064\004\103\021\104\122\106\027\112" +
    "\060\113\010\001\002\000\006\026\uffce\062\uffce\001\002" +
    "\000\124\004\025\006\054\010\040\011\017\021\065\022" +
    "\116\024\023\031\077\033\036\034\073\035\107\036\037" +
    "\040\074\041\106\042\020\043\043\044\053\045\032\046" +
    "\117\050\075\052\052\053\101\061\070\063\115\064\004" +
    "\066\062\067\061\070\046\071\103\072\050\073\063\075" +
    "\042\077\100\103\021\104\122\106\027\107\104\110\044" +
    "\111\030\112\060\113\010\001\002\000\036\005\uffd3\023" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\052\uffd3\062\uffd3\072\uffd3\074\uffd3\076\uffd3\101\uffd3\001" +
    "\002\000\006\026\uffd2\062\uffd2\001\002\000\016\004\025" +
    "\021\065\103\021\104\122\112\060\113\010\001\002\000" +
    "\010\012\174\013\173\032\311\001\002\000\034\005\uffca" +
    "\023\uffca\025\uffca\026\uffca\027\uffca\030\uffca\032\uffca\052" +
    "\uffca\062\uffca\072\uffca\074\uffca\076\uffca\101\uffca\001\002" +
    "\000\062\005\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\020\uff95\023\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\051\uff95\052\uff95\060\uff95\062\uff95\072" +
    "\uff95\074\uff95\076\uff95\101\uff95\105\uff95\106\uff95\001\002" +
    "\000\004\002\000\001\002\000\004\074\315\001\002\000" +
    "\032\004\025\021\065\042\020\043\043\044\053\052\052" +
    "\064\004\103\021\104\122\106\027\112\060\113\010\001" +
    "\002\000\034\005\uffe4\023\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\032\uffe4\052\uffe4\062\uffe4\072\uffe4\074\uffe4\076" +
    "\uffe4\101\uffe4\001\002\000\124\004\025\006\054\010\040" +
    "\011\017\021\065\022\116\024\023\031\077\033\036\034" +
    "\073\035\107\036\037\040\074\041\106\042\020\043\043" +
    "\044\053\045\032\046\117\050\075\052\052\053\101\061" +
    "\070\063\115\064\004\066\062\067\061\070\046\071\103" +
    "\072\050\073\063\075\042\077\100\103\021\104\122\106" +
    "\027\107\104\110\044\111\030\112\060\113\010\001\002" +
    "\000\004\005\321\001\002\000\034\005\uffe3\023\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\052\uffe3\062\uffe3" +
    "\072\uffe3\074\uffe3\076\uffe3\101\uffe3\001\002\000\124\004" +
    "\025\006\054\010\040\011\017\021\065\022\116\024\023" +
    "\031\077\033\036\034\073\035\107\036\037\040\074\041" +
    "\106\042\020\043\043\044\053\045\032\046\117\050\075" +
    "\052\052\053\101\061\070\063\115\064\004\066\062\067" +
    "\061\070\046\071\103\072\050\073\063\075\042\077\100" +
    "\103\021\104\122\106\027\107\104\110\044\111\030\112" +
    "\060\113\010\001\002\000\004\005\324\001\002\000\034" +
    "\005\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032" +
    "\uffe2\052\uffe2\062\uffe2\072\uffe2\074\uffe2\076\uffe2\101\uffe2" +
    "\001\002\000\010\005\uff8e\026\uff8e\104\331\001\002\000" +
    "\006\005\uffb3\026\335\001\002\000\004\005\332\001\002" +
    "\000\006\005\uffb0\026\uffb0\001\002\000\006\005\uffb1\026" +
    "\uffb1\001\002\000\004\007\333\001\002\000\124\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\050\075\052" +
    "\052\053\101\061\070\063\115\064\004\066\062\067\061" +
    "\070\046\071\103\072\050\073\063\075\042\077\100\103" +
    "\021\104\122\106\027\107\104\110\044\111\030\112\060" +
    "\113\010\001\002\000\034\005\uffb5\023\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\032\uffb5\052\uffb5\062\uffb5\072\uffb5" +
    "\074\uffb5\076\uffb5\101\uffb5\001\002\000\004\104\336\001" +
    "\002\000\006\005\uffb2\026\uffb2\001\002\000\124\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\050\075\052" +
    "\052\053\101\061\070\063\115\064\004\066\062\067\061" +
    "\070\046\071\103\072\050\073\063\075\042\077\100\103" +
    "\021\104\122\106\027\107\104\110\044\111\030\112\060" +
    "\113\010\001\002\000\004\005\341\001\002\000\036\005" +
    "\uffb8\023\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8" +
    "\051\uffb8\052\uffb8\062\uffb8\072\uffb8\074\uffb8\076\uffb8\101" +
    "\uffb8\001\002\000\004\101\343\001\002\000\124\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\050\075\052" +
    "\052\053\101\061\070\063\115\064\004\066\062\067\061" +
    "\070\046\071\103\072\050\073\063\075\042\077\100\103" +
    "\021\104\122\106\027\107\104\110\044\111\030\112\060" +
    "\113\010\001\002\000\004\076\345\001\002\000\124\004" +
    "\025\006\054\010\040\011\017\021\065\022\116\024\023" +
    "\031\077\033\036\034\073\035\107\036\037\040\074\041" +
    "\106\042\020\043\043\044\053\045\032\046\117\050\075" +
    "\052\052\053\101\061\070\063\115\064\004\066\062\067" +
    "\061\070\046\071\103\072\050\073\063\075\042\077\100" +
    "\103\021\104\122\106\027\107\104\110\044\111\030\112" +
    "\060\113\010\001\002\000\034\005\uffe5\023\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\032\uffe5\052\uffe5\062\uffe5\072" +
    "\uffe5\074\uffe5\076\uffe5\101\uffe5\001\002\000\124\004\025" +
    "\006\054\010\040\011\017\021\065\022\116\024\023\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\050\075\052" +
    "\052\053\101\061\070\063\115\064\004\066\062\067\061" +
    "\070\046\071\103\072\050\073\063\075\042\077\100\103" +
    "\021\104\122\106\027\107\104\110\044\111\030\112\060" +
    "\113\010\001\002\000\004\027\351\001\002\000\134\002" +
    "\uffa1\004\uffa1\006\uffa1\010\uffa1\011\uffa1\021\uffa1\022\uffa1" +
    "\024\uffa1\025\uffa1\031\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1\061\uffa1\063" +
    "\uffa1\064\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\075\uffa1\077\uffa1\100\uffa1\103\uffa1\104\uffa1\106" +
    "\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\001\002" +
    "\000\124\004\025\006\054\010\040\011\017\021\065\022" +
    "\116\024\023\031\077\033\036\034\073\035\107\036\037" +
    "\040\074\041\106\042\020\043\043\044\053\045\032\046" +
    "\117\050\075\052\052\053\101\061\070\063\115\064\004" +
    "\066\062\067\061\070\046\071\103\072\050\073\063\075" +
    "\042\077\100\103\021\104\122\106\027\107\104\110\044" +
    "\111\030\112\060\113\010\001\002\000\004\005\354\001" +
    "\002\000\034\005\uffe1\023\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\032\uffe1\052\uffe1\062\uffe1\072\uffe1\074\uffe1\076" +
    "\uffe1\101\uffe1\001\002\000\124\004\025\006\054\010\040" +
    "\011\017\021\065\022\116\024\023\031\077\033\036\034" +
    "\073\035\107\036\037\040\074\041\106\042\020\043\043" +
    "\044\053\045\032\046\117\050\075\052\052\053\101\061" +
    "\070\063\115\064\004\066\062\067\061\070\046\071\103" +
    "\072\050\073\063\075\042\077\100\103\021\104\122\106" +
    "\027\107\104\110\044\111\030\112\060\113\010\001\002" +
    "\000\004\026\357\001\002\000\124\004\025\006\054\010" +
    "\040\011\017\021\065\022\116\024\023\031\077\033\036" +
    "\034\073\035\107\036\037\040\074\041\106\042\020\043" +
    "\043\044\053\045\032\046\117\050\075\052\052\053\101" +
    "\061\070\063\115\064\004\066\062\067\061\070\046\071" +
    "\103\072\050\073\063\075\042\077\100\103\021\104\122" +
    "\106\027\107\104\110\044\111\030\112\060\113\010\001" +
    "\002\000\004\005\361\001\002\000\036\005\uffb9\023\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\032\uffb9\051\uffb9\052" +
    "\uffb9\062\uffb9\072\uffb9\074\uffb9\076\uffb9\101\uffb9\001\002" +
    "\000\004\076\363\001\002\000\124\004\025\006\054\010" +
    "\040\011\017\021\065\022\116\024\023\031\077\033\036" +
    "\034\073\035\107\036\037\040\074\041\106\042\020\043" +
    "\043\044\053\045\032\046\117\050\075\052\052\053\101" +
    "\061\070\063\115\064\004\066\062\067\061\070\046\071" +
    "\103\072\050\073\063\075\042\077\100\103\021\104\122" +
    "\106\027\107\104\110\044\111\030\112\060\113\010\001" +
    "\002\000\034\005\uffe6\023\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\032\uffe6\052\uffe6\062\uffe6\072\uffe6\074\uffe6\076" +
    "\uffe6\101\uffe6\001\002\000\004\072\366\001\002\000\004" +
    "\104\367\001\002\000\004\023\370\001\002\000\004\031" +
    "\371\001\002\000\012\021\065\103\021\112\060\113\010" +
    "\001\002\000\004\030\373\001\002\000\012\021\065\103" +
    "\021\112\060\113\010\001\002\000\004\032\375\001\002" +
    "\000\034\005\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\032\uffa9\052\uffa9\062\uffa9\072\uffa9\074\uffa9\076\uffa9" +
    "\101\uffa9\001\002\000\124\004\025\006\054\010\040\011" +
    "\017\021\065\022\116\024\023\031\077\033\036\034\073" +
    "\035\107\036\037\040\074\041\106\042\020\043\043\044" +
    "\053\045\032\046\117\050\075\052\052\053\101\061\070" +
    "\063\115\064\004\066\062\067\061\070\046\071\103\072" +
    "\050\073\063\075\042\077\100\103\021\104\122\106\027" +
    "\107\104\110\044\111\030\112\060\113\010\001\002\000" +
    "\004\005\u0100\001\002\000\034\005\uffc7\023\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\032\uffc7\052\uffc7\062\uffc7\072" +
    "\uffc7\074\uffc7\076\uffc7\101\uffc7\001\002\000\010\005\uff8e" +
    "\026\uff8e\104\331\001\002\000\004\005\u0103\001\002\000" +
    "\124\004\025\006\054\010\040\011\017\021\065\022\116" +
    "\024\023\031\077\033\036\034\073\035\107\036\037\040" +
    "\074\041\106\042\020\043\043\044\053\045\032\046\117" +
    "\050\075\052\052\053\101\061\070\063\115\064\004\066" +
    "\062\067\061\070\046\071\103\072\050\073\063\075\042" +
    "\077\100\103\021\104\122\106\027\107\104\110\044\111" +
    "\030\112\060\113\010\001\002\000\034\005\uffb4\023\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4\052\uffb4\062" +
    "\uffb4\072\uffb4\074\uffb4\076\uffb4\101\uffb4\001\002\000\124" +
    "\004\025\006\054\010\040\011\017\021\065\022\116\024" +
    "\023\031\077\033\036\034\073\035\107\036\037\040\074" +
    "\041\106\042\020\043\043\044\053\045\032\046\117\050" +
    "\075\052\052\053\101\061\070\063\115\064\004\066\062" +
    "\067\061\070\046\071\103\072\050\073\063\075\042\077" +
    "\100\103\021\104\122\106\027\107\104\110\044\111\030" +
    "\112\060\113\010\001\002\000\004\027\u0107\001\002\000" +
    "\134\002\uffa0\004\uffa0\006\uffa0\010\uffa0\011\uffa0\021\uffa0" +
    "\022\uffa0\024\uffa0\025\uffa0\031\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\052\uffa0\053\uffa0\061" +
    "\uffa0\063\uffa0\064\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0" +
    "\072\uffa0\073\uffa0\075\uffa0\077\uffa0\100\uffa0\103\uffa0\104" +
    "\uffa0\106\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0" +
    "\001\002\000\036\005\uffbb\023\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\032\uffbb\051\uffbb\052\uffbb\062\uffbb\072\uffbb" +
    "\074\uffbb\076\uffbb\101\uffbb\001\002\000\004\005\u010a\001" +
    "\002\000\064\004\u010b\005\uff8f\012\uff8f\013\uff8f\014\uff8f" +
    "\015\uff8f\016\uff8f\020\uff8f\023\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\051\uff8f\052\uff8f\060\uff8f" +
    "\062\uff8f\072\uff8f\074\uff8f\076\uff8f\101\uff8f\105\uff8f\106" +
    "\uff8f\001\002\000\130\004\025\005\uff8e\006\054\010\040" +
    "\011\017\021\065\022\116\024\023\026\uff8e\031\077\033" +
    "\036\034\073\035\107\036\037\040\074\041\106\042\020" +
    "\043\043\044\053\045\032\046\117\050\075\052\052\053" +
    "\101\061\070\063\115\064\004\066\062\067\061\070\046" +
    "\071\103\072\050\073\063\075\042\077\100\103\021\104" +
    "\122\106\027\107\104\110\044\111\030\112\060\113\010" +
    "\001\002\000\004\005\u010d\001\002\000\062\005\uffae\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\020\uffae\023\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\051" +
    "\uffae\052\uffae\060\uffae\062\uffae\072\uffae\074\uffae\076\uffae" +
    "\101\uffae\105\uffae\106\uffae\001\002\000\124\004\025\006" +
    "\054\010\040\011\017\021\065\022\116\024\023\031\077" +
    "\033\036\034\073\035\107\036\037\040\074\041\106\042" +
    "\020\043\043\044\053\045\032\046\117\050\075\052\052" +
    "\053\101\061\070\063\115\064\004\066\062\067\061\070" +
    "\046\071\103\072\050\073\063\075\042\077\100\103\021" +
    "\104\122\106\027\107\104\110\044\111\030\112\060\113" +
    "\010\001\002\000\034\005\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\032\uffc1\052\uffc1\062\uffc1\072\uffc1\074" +
    "\uffc1\076\uffc1\101\uffc1\001\002\000\130\004\025\006\054" +
    "\010\040\011\017\021\065\022\116\024\023\025\u0111\031" +
    "\077\033\036\034\073\035\107\036\037\040\074\041\106" +
    "\042\020\043\043\044\053\045\032\046\117\047\031\050" +
    "\075\052\052\053\101\061\070\063\115\064\004\066\062" +
    "\067\061\070\046\071\103\072\050\073\063\075\042\077" +
    "\100\103\021\104\047\106\027\107\104\110\044\111\030" +
    "\112\060\113\010\001\002\000\034\005\ufff7\023\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7\052\ufff7\062\ufff7" +
    "\072\ufff7\074\ufff7\076\ufff7\101\ufff7\001\002\000\124\004" +
    "\025\006\054\010\040\011\017\021\065\022\116\024\023" +
    "\031\077\033\036\034\073\035\107\036\037\040\074\041" +
    "\106\042\020\043\043\044\053\045\032\046\117\050\075" +
    "\052\052\053\101\061\070\063\115\064\004\066\062\067" +
    "\061\070\046\071\103\072\050\073\063\075\042\077\100" +
    "\103\021\104\122\106\027\107\104\110\044\111\030\112" +
    "\060\113\010\001\002\000\004\026\u0114\001\002\000\124" +
    "\004\025\006\054\010\040\011\017\021\065\022\116\024" +
    "\023\031\077\033\036\034\073\035\107\036\037\040\074" +
    "\041\106\042\020\043\043\044\053\045\032\046\117\050" +
    "\075\052\052\053\101\061\070\063\115\064\004\066\062" +
    "\067\061\070\046\071\103\072\050\073\063\075\042\077" +
    "\100\103\021\104\122\106\027\107\104\110\044\111\030" +
    "\112\060\113\010\001\002\000\004\005\u0116\001\002\000" +
    "\036\005\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\032\uffba\051\uffba\052\uffba\062\uffba\072\uffba\074\uffba\076" +
    "\uffba\101\uffba\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\106\002\063\003\050\004\005\005\054\006" +
    "\055\012\070\013\104\014\075\015\113\016\101\020\004" +
    "\025\056\026\112\027\071\030\011\031\110\032\033\033" +
    "\010\034\065\037\023\040\021\041\012\042\015\043\034" +
    "\044\040\045\107\046\014\047\111\050\032\051\044\052" +
    "\006\053\013\056\025\057\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\003\u010f\004\005\005\054\006" +
    "\055\012\070\013\104\014\075\015\113\016\101\020\004" +
    "\025\056\026\112\027\071\030\011\031\110\032\033\033" +
    "\010\034\065\037\023\040\021\041\012\042\015\043\034" +
    "\044\040\045\107\046\014\047\111\050\032\051\044\052" +
    "\006\053\013\056\025\057\066\001\001\000\002\001\001" +
    "\000\076\006\055\012\u0108\013\104\014\075\015\113\016" +
    "\101\020\004\025\056\026\112\027\071\030\011\031\110" +
    "\032\033\033\010\034\065\037\023\040\021\041\012\042" +
    "\015\043\034\044\040\045\107\046\014\047\111\050\032" +
    "\051\044\052\006\053\013\056\025\057\066\001\001\000" +
    "\002\001\001\000\022\013\170\014\075\015\165\016\101" +
    "\020\004\026\112\046\014\047\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\006\055\012\364\013\104\014\075" +
    "\015\113\016\101\020\004\025\056\026\112\027\071\030" +
    "\011\031\110\032\033\033\010\034\065\037\023\040\021" +
    "\041\012\042\015\043\034\044\040\045\107\046\014\047" +
    "\111\050\032\051\044\052\006\053\013\056\025\057\066" +
    "\001\001\000\002\001\001\000\026\013\170\014\075\015" +
    "\165\016\101\020\004\026\112\046\014\047\111\050\032" +
    "\051\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\341\001\001\000\102\004\241\005\054\006\055\012" +
    "\070\013\104\014\075\015\113\016\101\020\004\025\056" +
    "\026\112\027\071\030\011\031\110\032\033\033\010\034" +
    "\065\037\023\040\021\041\012\042\015\043\034\044\040" +
    "\045\107\046\014\047\111\050\032\051\044\052\006\053" +
    "\013\056\025\057\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\006\055\012\313\013\104\014" +
    "\075\015\113\016\101\020\004\025\056\026\112\027\071" +
    "\030\011\031\110\032\033\033\010\034\065\037\023\040" +
    "\021\041\012\042\015\043\034\044\040\045\107\046\014" +
    "\047\111\050\032\051\044\052\006\053\013\056\025\057" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\006\055\012\265\013" +
    "\104\014\075\015\113\016\101\020\004\025\056\026\112" +
    "\027\071\030\011\031\110\032\033\033\010\034\065\035" +
    "\264\036\263\037\023\040\021\041\012\042\015\043\034" +
    "\044\040\045\107\046\014\047\111\050\032\051\044\052" +
    "\006\053\013\056\025\057\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\013\170\014\075\015\165\016\101\020\004\026\112" +
    "\046\014\047\111\050\032\051\245\001\001\000\002\001" +
    "\001\000\104\006\055\012\124\013\104\014\075\015\113" +
    "\016\101\017\126\020\004\023\243\024\123\025\056\026" +
    "\112\027\071\030\011\031\110\032\033\033\010\034\065" +
    "\037\023\040\021\041\012\042\015\043\034\044\040\045" +
    "\107\046\014\047\111\050\032\051\044\052\006\053\013" +
    "\056\025\057\066\001\001\000\104\003\240\004\005\005" +
    "\054\006\055\012\070\013\104\014\075\015\113\016\101" +
    "\020\004\025\056\026\112\027\071\030\011\031\110\032" +
    "\033\033\010\034\065\037\023\040\021\041\012\042\015" +
    "\043\034\044\040\045\107\046\014\047\111\050\032\051" +
    "\044\052\006\053\013\056\025\057\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\140\011\136\017\135\001\001\000\002\001\001\000" +
    "\076\006\055\012\120\013\104\014\075\015\113\016\101" +
    "\020\004\025\056\026\112\027\071\030\011\031\110\032" +
    "\033\033\010\034\065\037\023\040\021\041\012\042\015" +
    "\043\034\044\040\045\107\046\014\047\111\050\032\051" +
    "\044\052\006\053\013\056\025\057\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\104\006\055\012\124\013" +
    "\104\014\075\015\113\016\101\017\126\020\004\023\125" +
    "\024\123\025\056\026\112\027\071\030\011\031\110\032" +
    "\033\033\010\034\065\037\023\040\021\041\012\042\015" +
    "\043\034\044\040\045\107\046\014\047\111\050\032\051" +
    "\044\052\006\053\013\056\025\057\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\006\055\012\131\013\104" +
    "\014\075\015\113\016\101\020\004\025\056\026\112\027" +
    "\071\030\011\031\110\032\033\033\010\034\065\037\023" +
    "\040\021\041\012\042\015\043\034\044\040\045\107\046" +
    "\014\047\111\050\032\051\044\052\006\053\013\056\025" +
    "\057\066\001\001\000\002\001\001\000\076\006\055\012" +
    "\133\013\104\014\075\015\113\016\101\020\004\025\056" +
    "\026\112\027\071\030\011\031\110\032\033\033\010\034" +
    "\065\037\023\040\021\041\012\042\015\043\034\044\040" +
    "\045\107\046\014\047\111\050\032\051\044\052\006\053" +
    "\013\056\025\057\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\147\017\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\006\055" +
    "\012\142\013\104\014\075\015\113\016\101\020\004\025" +
    "\056\026\112\027\071\030\011\031\110\032\033\033\010" +
    "\034\065\037\023\040\021\041\012\042\015\043\034\044" +
    "\040\045\107\046\014\047\111\050\032\051\044\052\006" +
    "\053\013\056\025\057\066\001\001\000\002\001\001\000" +
    "\076\006\055\012\144\013\104\014\075\015\113\016\101" +
    "\020\004\025\056\026\112\027\071\030\011\031\110\032" +
    "\033\033\010\034\065\037\023\040\021\041\012\042\015" +
    "\043\034\044\040\045\107\046\014\047\111\050\032\051" +
    "\044\052\006\053\013\056\025\057\066\001\001\000\002" +
    "\001\001\000\004\011\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\151\017\146\001\001\000\002" +
    "\001\001\000\076\006\055\012\153\013\104\014\075\015" +
    "\113\016\101\020\004\025\056\026\112\027\071\030\011" +
    "\031\110\032\033\033\010\034\065\037\023\040\021\041" +
    "\012\042\015\043\034\044\040\045\107\046\014\047\111" +
    "\050\032\051\044\052\006\053\013\056\025\057\066\001" +
    "\001\000\002\001\001\000\076\006\055\012\155\013\104" +
    "\014\075\015\113\016\101\020\004\025\056\026\112\027" +
    "\071\030\011\031\110\032\033\033\010\034\065\037\023" +
    "\040\021\041\012\042\015\043\034\044\040\045\107\046" +
    "\014\047\111\050\032\051\044\052\006\053\013\056\025" +
    "\057\066\001\001\000\002\001\001\000\076\006\055\012" +
    "\157\013\104\014\075\015\113\016\101\020\004\025\056" +
    "\026\112\027\071\030\011\031\110\032\033\033\010\034" +
    "\065\037\023\040\021\041\012\042\015\043\034\044\040" +
    "\045\107\046\014\047\111\050\032\051\044\052\006\053" +
    "\013\056\025\057\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\165\016\101\020\164\026\112\001" +
    "\001\000\076\006\055\012\163\013\104\014\075\015\113" +
    "\016\101\020\004\025\056\026\112\027\071\030\011\031" +
    "\110\032\033\033\010\034\065\037\023\040\021\041\012" +
    "\042\015\043\034\044\040\045\107\046\014\047\111\050" +
    "\032\051\044\052\006\053\013\056\025\057\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\170\014\075\015\165\016\101\020\004\026\112" +
    "\046\014\047\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\204\014\075\015\165\016\101\020\004" +
    "\026\112\001\001\000\014\014\203\015\165\016\101\020" +
    "\004\026\112\001\001\000\014\014\174\015\165\016\101" +
    "\020\004\026\112\001\001\000\002\001\001\000\012\015" +
    "\165\016\101\020\202\026\112\001\001\000\012\015\165" +
    "\016\101\020\201\026\112\001\001\000\012\015\165\016" +
    "\101\020\200\026\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\006\055\012\206\013\104\014\075\015\113" +
    "\016\101\020\004\025\056\026\112\027\071\030\011\031" +
    "\110\032\033\033\010\034\065\037\023\040\021\041\012" +
    "\042\015\043\034\044\040\045\107\046\014\047\111\050" +
    "\032\051\044\052\006\053\013\056\025\057\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\006\055\012" +
    "\211\013\104\014\075\015\113\016\101\020\004\025\056" +
    "\026\112\027\071\030\011\031\110\032\033\033\010\034" +
    "\065\037\023\040\021\041\012\042\015\043\034\044\040" +
    "\045\107\046\014\047\111\050\032\051\044\052\006\053" +
    "\013\056\025\057\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\214\014\075\015\165\016\101\020" +
    "\004\026\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\006\055\012" +
    "\221\013\104\014\075\015\113\016\101\020\004\025\056" +
    "\026\112\027\071\030\011\031\110\032\033\033\010\034" +
    "\065\037\023\040\021\041\012\042\015\043\034\044\040" +
    "\045\107\046\014\047\111\050\032\051\044\052\006\053" +
    "\013\056\025\057\066\001\001\000\002\001\001\000\076" +
    "\006\055\012\223\013\104\014\075\015\113\016\101\020" +
    "\004\025\056\026\112\027\071\030\011\031\110\032\033" +
    "\033\010\034\065\037\023\040\021\041\012\042\015\043" +
    "\034\044\040\045\107\046\014\047\111\050\032\051\044" +
    "\052\006\053\013\056\025\057\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\013\170\014\075\015\165" +
    "\016\101\020\004\026\112\046\014\047\111\050\032\051" +
    "\230\054\227\055\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\006\055\012\232\013" +
    "\104\014\075\015\113\016\101\020\004\025\056\026\112" +
    "\027\071\030\011\031\110\032\033\033\010\034\065\037" +
    "\023\040\021\041\012\042\015\043\034\044\040\045\107" +
    "\046\014\047\111\050\032\051\044\052\006\053\013\056" +
    "\025\057\066\001\001\000\002\001\001\000\026\013\170" +
    "\014\075\015\165\016\101\020\004\026\112\046\014\047" +
    "\111\050\032\051\234\001\001\000\002\001\001\000\076" +
    "\006\055\012\236\013\104\014\075\015\113\016\101\020" +
    "\004\025\056\026\112\027\071\030\011\031\110\032\033" +
    "\033\010\034\065\037\023\040\021\041\012\042\015\043" +
    "\034\044\040\045\107\046\014\047\111\050\032\051\044" +
    "\052\006\053\013\056\025\057\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\102\004\241\005\054\006\055" +
    "\012\070\013\104\014\075\015\113\016\101\020\004\025" +
    "\056\026\112\027\071\030\011\031\110\032\033\033\010" +
    "\034\065\037\023\040\021\041\012\042\015\043\034\044" +
    "\040\045\107\046\014\047\111\050\032\051\044\052\006" +
    "\053\013\056\025\057\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\006\055\012\247\013\104\014\075\015" +
    "\113\016\101\020\004\025\056\026\112\027\071\030\011" +
    "\031\110\032\033\033\010\034\065\037\023\040\021\041" +
    "\012\042\015\043\034\044\040\045\107\046\014\047\111" +
    "\050\032\051\044\052\006\053\013\056\025\057\066\001" +
    "\001\000\002\001\001\000\076\006\055\012\251\013\104" +
    "\014\075\015\113\016\101\020\004\025\056\026\112\027" +
    "\071\030\011\031\110\032\033\033\010\034\065\037\023" +
    "\040\021\041\012\042\015\043\034\044\040\045\107\046" +
    "\014\047\111\050\032\051\044\052\006\053\013\056\025" +
    "\057\066\001\001\000\002\001\001\000\104\006\055\012" +
    "\124\013\104\014\075\015\113\016\101\017\126\020\004" +
    "\023\253\024\123\025\056\026\112\027\071\030\011\031" +
    "\110\032\033\033\010\034\065\037\023\040\021\041\012" +
    "\042\015\043\034\044\040\045\107\046\014\047\111\050" +
    "\032\051\044\052\006\053\013\056\025\057\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\006\055\012" +
    "\256\013\104\014\075\015\113\016\101\020\004\025\056" +
    "\026\112\027\071\030\011\031\110\032\033\033\010\034" +
    "\065\037\023\040\021\041\012\042\015\043\034\044\040" +
    "\045\107\046\014\047\111\050\032\051\044\052\006\053" +
    "\013\056\025\057\066\001\001\000\002\001\001\000\076" +
    "\006\055\012\260\013\104\014\075\015\113\016\101\020" +
    "\004\025\056\026\112\027\071\030\011\031\110\032\033" +
    "\033\010\034\065\037\023\040\021\041\012\042\015\043" +
    "\034\044\040\045\107\046\014\047\111\050\032\051\044" +
    "\052\006\053\013\056\025\057\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\006\055\012\270\013\104\014\075\015\113\016\101" +
    "\020\004\025\056\026\112\027\071\030\011\031\110\032" +
    "\033\033\010\034\065\037\023\040\021\041\012\042\015" +
    "\043\034\044\040\045\107\046\014\047\111\050\032\051" +
    "\044\052\006\053\013\056\025\057\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\006\055\012\275\013\104\014\075\015\113" +
    "\016\101\020\004\025\056\026\112\027\071\030\011\031" +
    "\110\032\033\033\010\034\065\037\023\040\021\041\012" +
    "\042\015\043\034\044\040\045\107\046\014\047\111\050" +
    "\032\051\044\052\006\053\013\056\025\057\066\001\001" +
    "\000\002\001\001\000\076\006\055\012\277\013\104\014" +
    "\075\015\113\016\101\020\004\025\056\026\112\027\071" +
    "\030\011\031\110\032\033\033\010\034\065\037\023\040" +
    "\021\041\012\042\015\043\034\044\040\045\107\046\014" +
    "\047\111\050\032\051\044\052\006\053\013\056\025\057" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\013\170\014\075\015\165\016\101\020\004\026\112\046" +
    "\014\047\111\050\032\051\302\001\001\000\002\001\001" +
    "\000\100\006\055\012\265\013\104\014\075\015\113\016" +
    "\101\020\004\025\056\026\112\027\071\030\011\031\110" +
    "\032\033\033\010\034\065\035\305\037\023\040\021\041" +
    "\012\042\015\043\034\044\040\045\107\046\014\047\111" +
    "\050\032\051\044\052\006\053\013\056\025\057\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\307" +
    "\014\075\015\165\016\101\020\004\026\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\013\170\014\075\015" +
    "\165\016\101\020\004\026\112\046\014\047\111\050\032" +
    "\051\315\001\001\000\002\001\001\000\076\006\055\012" +
    "\317\013\104\014\075\015\113\016\101\020\004\025\056" +
    "\026\112\027\071\030\011\031\110\032\033\033\010\034" +
    "\065\037\023\040\021\041\012\042\015\043\034\044\040" +
    "\045\107\046\014\047\111\050\032\051\044\052\006\053" +
    "\013\056\025\057\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\006\055\012\322\013\104\014\075\015" +
    "\113\016\101\020\004\025\056\026\112\027\071\030\011" +
    "\031\110\032\033\033\010\034\065\037\023\040\021\041" +
    "\012\042\015\043\034\044\040\045\107\046\014\047\111" +
    "\050\032\051\044\052\006\053\013\056\025\057\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\327" +
    "\021\326\022\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\006\055\012\333\013\104\014\075\015\113\016" +
    "\101\020\004\025\056\026\112\027\071\030\011\031\110" +
    "\032\033\033\010\034\065\037\023\040\021\041\012\042" +
    "\015\043\034\044\040\045\107\046\014\047\111\050\032" +
    "\051\044\052\006\053\013\056\025\057\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\006\055\012\337\013\104\014\075\015\113\016\101\020" +
    "\004\025\056\026\112\027\071\030\011\031\110\032\033" +
    "\033\010\034\065\037\023\040\021\041\012\042\015\043" +
    "\034\044\040\045\107\046\014\047\111\050\032\051\044" +
    "\052\006\053\013\056\025\057\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\006\055" +
    "\012\343\013\104\014\075\015\113\016\101\020\004\025" +
    "\056\026\112\027\071\030\011\031\110\032\033\033\010" +
    "\034\065\037\023\040\021\041\012\042\015\043\034\044" +
    "\040\045\107\046\014\047\111\050\032\051\044\052\006" +
    "\053\013\056\025\057\066\001\001\000\002\001\001\000" +
    "\076\006\055\012\345\013\104\014\075\015\113\016\101" +
    "\020\004\025\056\026\112\027\071\030\011\031\110\032" +
    "\033\033\010\034\065\037\023\040\021\041\012\042\015" +
    "\043\034\044\040\045\107\046\014\047\111\050\032\051" +
    "\044\052\006\053\013\056\025\057\066\001\001\000\002" +
    "\001\001\000\076\006\055\012\347\013\104\014\075\015" +
    "\113\016\101\020\004\025\056\026\112\027\071\030\011" +
    "\031\110\032\033\033\010\034\065\037\023\040\021\041" +
    "\012\042\015\043\034\044\040\045\107\046\014\047\111" +
    "\050\032\051\044\052\006\053\013\056\025\057\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\006\055" +
    "\012\352\013\104\014\075\015\113\016\101\020\004\025" +
    "\056\026\112\027\071\030\011\031\110\032\033\033\010" +
    "\034\065\037\023\040\021\041\012\042\015\043\034\044" +
    "\040\045\107\046\014\047\111\050\032\051\044\052\006" +
    "\053\013\056\025\057\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\006\055\012\355\013\104\014\075" +
    "\015\113\016\101\020\004\025\056\026\112\027\071\030" +
    "\011\031\110\032\033\033\010\034\065\037\023\040\021" +
    "\041\012\042\015\043\034\044\040\045\107\046\014\047" +
    "\111\050\032\051\044\052\006\053\013\056\025\057\066" +
    "\001\001\000\002\001\001\000\076\006\055\012\357\013" +
    "\104\014\075\015\113\016\101\020\004\025\056\026\112" +
    "\027\071\030\011\031\110\032\033\033\010\034\065\037" +
    "\023\040\021\041\012\042\015\043\034\044\040\045\107" +
    "\046\014\047\111\050\032\051\044\052\006\053\013\056" +
    "\025\057\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\006\055\012\363\013\104\014" +
    "\075\015\113\016\101\020\004\025\056\026\112\027\071" +
    "\030\011\031\110\032\033\033\010\034\065\037\023\040" +
    "\021\041\012\042\015\043\034\044\040\045\107\046\014" +
    "\047\111\050\032\051\044\052\006\053\013\056\025\057" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\371\001\001\000\002\001\001\000\004\016\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\006\055\012" +
    "\376\013\104\014\075\015\113\016\101\020\004\025\056" +
    "\026\112\027\071\030\011\031\110\032\033\033\010\034" +
    "\065\037\023\040\021\041\012\042\015\043\034\044\040" +
    "\045\107\046\014\047\111\050\032\051\044\052\006\053" +
    "\013\056\025\057\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\327\021\u0101\022\325\001\001\000" +
    "\002\001\001\000\076\006\055\012\u0103\013\104\014\075" +
    "\015\113\016\101\020\004\025\056\026\112\027\071\030" +
    "\011\031\110\032\033\033\010\034\065\037\023\040\021" +
    "\041\012\042\015\043\034\044\040\045\107\046\014\047" +
    "\111\050\032\051\044\052\006\053\013\056\025\057\066" +
    "\001\001\000\002\001\001\000\076\006\055\012\u0105\013" +
    "\104\014\075\015\113\016\101\020\004\025\056\026\112" +
    "\027\071\030\011\031\110\032\033\033\010\034\065\037" +
    "\023\040\021\041\012\042\015\043\034\044\040\045\107" +
    "\046\014\047\111\050\032\051\044\052\006\053\013\056" +
    "\025\057\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\006\055\012\124\013\104\014\075\015\113\016\101" +
    "\017\126\020\004\023\u010b\024\123\025\056\026\112\027" +
    "\071\030\011\031\110\032\033\033\010\034\065\037\023" +
    "\040\021\041\012\042\015\043\034\044\040\045\107\046" +
    "\014\047\111\050\032\051\044\052\006\053\013\056\025" +
    "\057\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\006\055\012\u010e\013\104\014\075\015\113\016\101" +
    "\020\004\025\056\026\112\027\071\030\011\031\110\032" +
    "\033\033\010\034\065\037\023\040\021\041\012\042\015" +
    "\043\034\044\040\045\107\046\014\047\111\050\032\051" +
    "\044\052\006\053\013\056\025\057\066\001\001\000\002" +
    "\001\001\000\102\004\241\005\054\006\055\012\070\013" +
    "\104\014\075\015\113\016\101\020\004\025\056\026\112" +
    "\027\071\030\011\031\110\032\033\033\010\034\065\037" +
    "\023\040\021\041\012\042\015\043\034\044\040\045\107" +
    "\046\014\047\111\050\032\051\044\052\006\053\013\056" +
    "\025\057\066\001\001\000\002\001\001\000\076\006\055" +
    "\012\u0112\013\104\014\075\015\113\016\101\020\004\025" +
    "\056\026\112\027\071\030\011\031\110\032\033\033\010" +
    "\034\065\037\023\040\021\041\012\042\015\043\034\044" +
    "\040\045\107\046\014\047\111\050\032\051\044\052\006" +
    "\053\013\056\025\057\066\001\001\000\002\001\001\000" +
    "\076\006\055\012\u0114\013\104\014\075\015\113\016\101" +
    "\020\004\025\056\026\112\027\071\030\011\031\110\032" +
    "\033\033\010\034\065\037\023\040\021\041\012\042\015" +
    "\043\034\044\040\045\107\046\014\047\111\050\032\051" +
    "\044\052\006\053\013\056\025\057\066\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= funCall 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit(n); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // number ::= HEX 
            {
              FnPlotValue< ? > RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 String hex = h.substring(2, h.length());
			RESULT = FnPlotValue.make((int) Long.parseLong(hex, 16)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // number ::= BIN 
            {
              FnPlotValue< ? > RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 String bin = b.substring(2, b.length());
			RESULT = FnPlotValue.make((int) Long.parseLong(bin, 2)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // number ::= MINUS INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(-1*ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // power ::= factor POW power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpPow(f, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // term ::= term MOD power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // term ::= term DIV power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // term ::= term MUL power 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // arithExp ::= arithExp SUBTRACT term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // definition ::= DEF VARIABLE expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // letExp ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
            
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // clearExp ::= CLEAR 
            {
              Exp RESULT =null;
		RESULT = new ExpClear(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("clearExp",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // plotExp ::= PLOT expression FOR VARIABLE IN LSQR number COLON number RSQR 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).value;
		int lowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int lowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		FnPlotValue< ? > low = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		FnPlotValue< ? > high = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
					RESULT = new ExpPlot(body, v, low.doubleValue(), high.doubleValue());
					
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("plotExp",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expL ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expL ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(e);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expL ::= expL COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(e);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expL",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expListE ::= expL 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funCall ::= LPAREN expression RPAREN LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp fd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCall(fd, el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funCall ::= VARIABLE LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCall(v, el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramL ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // paramL ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <String> ls = new ArrayList<>();
			ls.add(v);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // paramL ::= paramL COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(v);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramL",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // paramListE ::= paramL 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funDef ::= PROC LPAREN paramListE RPAREN expression 
            {
              Exp RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpFunction (pl, body) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funDef",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funDef ::= FUN LPAREN paramListE RPAREN MAPS expression 
            {
              Exp RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpFunction (pl, body) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funDef",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // compare ::= boolean 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = b; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // compare ::= arithExp COMPARE arithExp 
            {
              Exp RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpCompare(a1, a2, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("compare",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logops ::= PAIRQ LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e, e, "type"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logops ::= EQUAL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e1, e2, "equal"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logops ::= EQV LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(e1, e2, "eqv"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logops ::= LOGOP compare 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLogOp(c, c, l); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logops ::= compare LOGOP compare 
            {
              Exp RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLogOp(c1, c2, l); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("logops",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolean ::= ELSE 
            {
              Exp RESULT =null;
		 RESULT = new ExpBool(new Boolean(true)); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("boolean",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean ::= BOOL 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpBool((Boolean) b); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("boolean",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condition ::= compare 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("condition",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condition ::= logops 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("condition",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // concat ::= list CONCAT expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new 		   ExpConcat(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // concat ::= factor CONCAT expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpConcat(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp proc = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp list = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpListCall(proc, list); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("call",34, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // list ::= LSQR expListE RSQR 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // list ::= LIST LPAREN expListE RPAREN 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpList(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // size ::= SIZE LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSize(v, "size"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("size",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // indexP ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(p, new ExpLit(FnPlotValue.make(1))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexP",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // indexP ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(p, new ExpLit(FnPlotValue.make(0))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexP",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // indexV ::= arithExp LSQR arithExp RSQR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new 		ExpIndex(v , a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexV",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // indexV ::= vector LSQR arithExp RSQR 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpIndex(v , a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("indexV",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pair ::= EMPTY 
            {
              Exp RESULT =null;
		 RESULT = new 			ExpPair(new ExpNull(), new ExpNull()); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpPair(e1, e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // subvector ::= expression FOR VARIABLE IN RANGE LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).right;
		Exp val = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
	RESULT = new ExpVecComp(v, val, start, stop, new ExpBool(new Boolean(true))); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // subvector ::= expression FOR VARIABLE IN RANGE LPAREN expression COMMA expression RPAREN IF condition 
            {
              Exp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).right;
		Exp val = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
	RESULT = new ExpVecComp(v, val, start, stop, c); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-11)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // subvector ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // subvector ::= expression COLON expression 
            {
              Exp RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpSubVector(size, e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("subvector",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vectorExpL ::= subvector 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(e);
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vectorExpL",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vectorExpL ::= vectorExpL COMMA subvector 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(e);
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vectorExpL",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vector ::= LVEC vectorExpL RVEC 
            {
              Exp RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpVector(el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vector",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // caseList ::= condition COLON expression 
            {
              ArrayList<Exp> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList <Exp> ls = new ArrayList<>();
			ls.add(new ExpIf (c, body, body));
			RESULT = ls; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseList",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // caseList ::= caseList COMMA condition COLON expression 
            {
              ArrayList<Exp> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		ArrayList<Exp> ls = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ls.add(new ExpIf (c, body, body));
		  RESULT = ls;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseList",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // caseListE ::= caseList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseListE",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // caseExp ::= CASE LBRACE caseListE RBRACE 
            {
              Exp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> cl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpCase(cl); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("caseExp",41, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifElseExp ::= IF condition THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp body1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpIf (c, body1, body2) ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("ifElseExp",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // character ::= UNI 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString( (char)Integer.parseInt(u.substring(2,6)) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("character",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // character ::= CHAR 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString( new Character(c.charAt(2)) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("character",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // string ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int stopleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int stopright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp stop = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp string = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpSubStr(start, stop, string); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // string ::= STRING PLUS STRING 
            {
              Exp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString(s1 + s2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // string ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpString(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= character 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literal ::= string 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binaryheap ::= INSERT LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int insertleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int insertright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp insert = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, insert, "insert"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binaryheap ::= DELETEMIN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, "deletemin"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binaryheap ::= GETMIN LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(e, "getmin"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binaryheap ::= HEAPIFY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new ExpHeap(v, "heapify"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binaryheap",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // loop ::= REPEAT expression UNTIL condition 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(e, c, "repeat"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // loop ::= FOR binding TO expression DO expression 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(b, e1, e2, "for"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // loop ::= WHILE condition DO expression 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLoop(e, c, "while");  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("loop",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= loop 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= binaryheap 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= literal 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= caseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= ifElseExp 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= condition 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= size 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= indexP 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= indexV 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= call 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= concat 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= list 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = v; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= BEGIN stmtList END 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= clearExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= plotExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= funDef 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

