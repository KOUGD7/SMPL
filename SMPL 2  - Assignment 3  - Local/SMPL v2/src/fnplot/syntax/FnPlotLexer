package fnplot.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives
%%
    
%cup
%public

%class FnPlotLexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%eofclose	false

%char
%line

%{
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }
%}

nl = [\n\r]

cc = ([\b\f]|{nl})

ws = {cc}|[\t ]

alpha = [a-zA-Z_]

num = [0-9]

alphanum = {alpha}|{num}

%%

<YYINITIAL>	{nl}	{
                        //skip newline, but reset char counter
			yycolumn = 0;
			}
<YYINITIAL>	{ws}	{
                        //skip whitespace
			}
<YYINITIAL>	{ws}"+"{ws}	{return new Symbol(sym.PLUS);}
<YYINITIAL>	{ws}"-"{ws}	{return new Symbol(sym.MINUS);}
<YYINITIAL>	{ws}"*"{ws}	{return new Symbol(sym.MUL);}
<YYINITIAL>	{ws}"/"{ws}	{return new Symbol(sym.DIV);}
<YYINITIAL>	{ws}"%"{ws}	{return new Symbol(sym.MOD);}
<YYINITIAL>	{ws}"="{ws}	{return new Symbol(sym.ASSIGN);}
<YYINITIAL>	{ws}"^"{ws}	{return new Symbol(sym.POW);}
<YYINITIAL>	{ws}"@"{ws}	{return new Symbol(sym.CONCAT);}

<YYINITIAL>	"("	{return new Symbol(sym.LPAREN);}
<YYINITIAL>	")"	{return new Symbol(sym.RPAREN);}

<YYINITIAL>	"{"	{return new Symbol(sym.LBRACE);}
<YYINITIAL>	"}"	{return new Symbol(sym.RBRACE);}

<YYINITIAL>	","	{return new Symbol(sym.COMMA);}

<YYINITIAL>	"fun"	{return new Symbol(sym.FUN);}
<YYINITIAL>	"mapsto"	{return new Symbol(sym.MAPS);}
<YYINITIAL>	"->"	{return new Symbol(sym.MAPS);}	

<YYINITIAL>	"plot"	{return new Symbol(sym.PLOT);}
<YYINITIAL>	"for"	{return new Symbol(sym.FOR);}
<YYINITIAL>	"clear"	{return new Symbol(sym.CLEAR);}

<YYINITIAL>	"let"	{return new Symbol(sym.LET);}
<YYINITIAL>	"in"	{return new Symbol(sym.IN);}

<YYINITIAL>	"["	{return new Symbol(sym.LSQR);}
<YYINITIAL>	"]"	{return new Symbol(sym.RSQR);}
<YYINITIAL>	":"	{return new Symbol(sym.COLON);}


<YYINITIAL>	#b[01]{1,32}		{return new Symbol(sym.BIN, yytext());}
<YYINITIAL>	#x[0-9a-fA-F]{1,8}	{return new Symbol(sym.HEX, yytext());}

<YYINITIAL>	#u[0-9a-fA-F]{4}	{return new Symbol(sym.UNI, yytext());}

<YYINITIAL>	"#f"		{return new Symbol(sym.BOOL, new Boolean(false));}
<YYINITIAL>	"#t"		{return new Symbol(sym.BOOL, new Boolean(true));}
<YYINITIAL>	"#e"		{return new Symbol(sym.EMPTY);}

<YYINITIAL>	"pair"		{return new Symbol(sym.PAIR);}
<YYINITIAL>	"car"		{return new Symbol(sym.CAR);}
<YYINITIAL>	"cdr"		{return new Symbol(sym.CDR);}
<YYINITIAL>	"?"		{return new Symbol(sym.QUESTION);}
<YYINITIAL>	"list"		{return new Symbol(sym.LIST);}
<YYINITIAL>	"size"		{return new Symbol(sym.SIZE);}
<YYINITIAL>	"eqv"		{return new Symbol(sym.EQV);}
<YYINITIAL>	"equal"		{return new Symbol(sym.EQUAL);}

<YYINITIAL>	"proc"		{return new Symbol(sym.PROC);}
<YYINITIAL>	"call"		{return new Symbol(sym.CALL);}
<YYINITIAL>	"def"		{return new Symbol(sym.DEF);}
<YYINITIAL>	"if"		{return new Symbol(sym.IF);}
<YYINITIAL>	"then"		{return new Symbol(sym.THEN);}
<YYINITIAL>	"else"		{return new Symbol(sym.ELSE);}
<YYINITIAL>	"case"		{return new Symbol(sym.CASE);}
<YYINITIAL>	"print"		{return new Symbol(sym.PRINT);}
<YYINITIAL>	"println"	{return new Symbol(sym.PRINTLN);}
<YYINITIAL>	"read"		{return new Symbol(sym.READ);}
<YYINITIAL>	"readint"	{return new Symbol(sym.READINT);}



<YYINITIAL>	";" 	{return new Symbol(sym.SEMI);}

<YYINITIAL>    {num}+ {
	       // INTEGER
	       return new Symbol(sym.INTEGER, 
				 new Double(yytext()));
	       }

<YYINITIAL>    [0-9]+\.?[0-9]* {
	       // FLOAT
	       return new Symbol(sym.INTEGER, 
				 new Double(yytext()));}

<YYINITIAL>    {alpha}{alphanum}* {
	       // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
	       }
