/* The following code was generated by JFlex 1.6.1 */

package fnplot.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>FnPlotLexer</tt>
 */
public class FnPlotLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\1\1\0\1\2\1\5\22\0\1\2\1\15"+
    "\1\72\1\25\1\3\1\17\1\3\1\10\1\35\1\36\1\7\1\13"+
    "\1\41\1\14\1\11\1\6\2\56\10\4\1\34\1\71\1\23\1\21"+
    "\1\24\1\22\1\16\6\60\6\12\1\67\15\12\1\53\1\73\1\54"+
    "\1\20\1\3\1\3\1\26\1\55\1\50\1\30\1\51\1\42\1\66"+
    "\1\64\1\52\2\12\1\47\1\44\1\27\1\31\1\45\1\62\1\32"+
    "\1\46\1\33\1\43\1\63\1\70\1\57\1\65\1\61\1\37\1\3"+
    "\1\40\1\3\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\0\1\3\2\0\1\4\1\5"+
    "\1\6\1\0\4\4\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\11\4\1\15\1\16\4\4\1\17\1\20\2\21"+
    "\1\22\1\23\15\0\1\4\1\24\1\25\1\0\1\4"+
    "\1\26\1\27\1\30\2\0\1\31\2\0\1\4\1\32"+
    "\3\4\1\33\1\4\1\34\1\35\21\4\1\36\1\37"+
    "\1\40\4\4\1\21\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\0\1\47\1\50\1\51\1\52\1\53\1\0"+
    "\1\54\3\0\2\25\3\0\1\4\1\0\1\55\1\56"+
    "\1\57\1\60\1\61\3\4\1\62\2\4\1\63\1\64"+
    "\10\4\1\65\1\4\1\66\2\4\1\67\1\4\1\70"+
    "\10\4\2\21\1\71\1\72\1\73\1\0\1\74\2\0"+
    "\1\25\1\4\1\0\1\56\1\57\2\4\1\75\1\4"+
    "\1\76\2\4\1\77\1\100\1\4\1\101\1\4\1\102"+
    "\1\103\1\104\1\105\1\4\1\106\1\4\1\107\5\4"+
    "\1\21\1\25\1\110\2\25\1\0\1\56\1\57\1\4"+
    "\1\111\2\4\1\112\1\4\1\113\1\114\1\4\1\115"+
    "\2\4\1\116\2\4\1\117\1\25\1\120\1\56\1\57"+
    "\2\4\1\121\1\26\1\4\1\122\1\123\1\124\1\4"+
    "\1\125\1\56\1\57\1\4\1\126\1\127\1\130\1\56"+
    "\1\57\1\4\1\56\1\57\1\131\1\56\1\57\30\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\170\0\264\0\360\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\264\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384\0\u03c0\0\u03fc"+
    "\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0384\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0384\0\u0384\0\u0708"+
    "\0\u0744\0\u0384\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0168\0\u0b04\0\u0b40\0\264\0\264\0\u0384\0\u0384"+
    "\0\u0b7c\0\u0bb8\0\u0384\0\u0bf4\0\u0c30\0\u0c6c\0\u0ac8\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0ac8\0\u0d5c\0\u0384\0\u0384\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u0ac8\0\u0384\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u0384"+
    "\0\u0384\0\u0384\0\u0384\0\u0384\0\u0384\0\u12fc\0\u0384\0\u0384"+
    "\0\u0384\0\u0384\0\u0384\0\u1338\0\u0384\0\u1374\0\u13b0\0\u13ec"+
    "\0\u0384\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u0384"+
    "\0\u1590\0\u15cc\0\u0ac8\0\u0ac8\0\u1608\0\u1644\0\u1680\0\u0ac8"+
    "\0\u16bc\0\u16f8\0\u0ac8\0\u0ac8\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u0ac8\0\u1914\0\u0ac8\0\u1950"+
    "\0\u198c\0\u0ac8\0\u19c8\0\u0ac8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u0384\0\u0384"+
    "\0\u0384\0\u1c5c\0\u0384\0\u1c98\0\u1cd4\0\u14a0\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u0ac8\0\u1ef0"+
    "\0\u1f2c\0\u1f68\0\u0ac8\0\u1fa4\0\u0ac8\0\u1fe0\0\u0ac8\0\u0ac8"+
    "\0\u0ac8\0\u0ac8\0\u201c\0\u0ac8\0\u2058\0\u0ac8\0\u2094\0\u20d0"+
    "\0\u210c\0\u2148\0\u2184\0\u21c0\0\u1be4\0\u0384\0\264\0\u0ac8"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u0ac8\0\u22ec\0\u2328\0\u0ac8"+
    "\0\u2364\0\u0ac8\0\u23a0\0\u23dc\0\u0ac8\0\u2418\0\u2454\0\u0ac8"+
    "\0\u2490\0\u24cc\0\u0ac8\0\u0708\0\u0384\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u0ac8\0\u0ac8\0\u25f8\0\u0ac8\0\u0ac8\0\u0ac8\0\u2634"+
    "\0\u0ac8\0\u2670\0\u26ac\0\u26e8\0\u0ac8\0\u0ac8\0\u0ac8\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u0ac8\0\u2850\0\u0384\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u0384";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\3\1\7\1\5"+
    "\1\0\1\10\1\11\1\5\1\12\5\5\1\13\2\5"+
    "\1\14\1\11\1\15\1\16\1\11\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\6\5\11\1\43\1\11\1\44\1\11\1\45"+
    "\1\46\1\47\1\0\1\50\1\0\3\50\1\0\1\51"+
    "\63\50\1\52\1\53\6\0\1\54\1\55\3\0\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\0\1\65"+
    "\1\66\1\0\1\67\2\0\1\70\45\0\2\5\1\0"+
    "\2\5\1\0\1\5\1\71\13\5\6\71\6\0\11\71"+
    "\2\0\1\71\1\5\12\71\6\0\1\5\1\6\1\0"+
    "\2\5\1\0\1\72\1\71\13\5\6\71\6\0\11\71"+
    "\2\0\1\71\1\6\12\71\6\0\2\5\1\0\1\73"+
    "\1\74\1\0\1\5\1\71\13\5\6\71\6\0\11\71"+
    "\2\0\1\71\1\5\12\71\6\0\1\5\1\72\1\0"+
    "\2\5\1\0\1\5\1\71\13\5\6\71\6\0\11\71"+
    "\2\0\1\71\1\72\12\71\6\0\1\5\1\75\1\0"+
    "\2\5\1\0\1\5\1\71\13\5\6\71\6\0\11\71"+
    "\2\0\1\71\1\75\12\71\6\0\2\5\1\0\2\5"+
    "\1\0\1\5\1\71\11\5\1\76\1\5\6\71\6\0"+
    "\11\71\2\0\1\71\1\5\12\71\36\0\1\77\6\0"+
    "\1\100\1\101\4\0\1\102\1\103\3\0\1\104\1\0"+
    "\1\105\17\0\1\5\1\75\1\0\2\5\1\0\1\5"+
    "\1\71\13\5\3\71\1\106\2\71\6\0\11\71\2\0"+
    "\1\71\1\75\12\71\6\0\1\5\1\75\1\0\2\5"+
    "\1\0\1\5\1\71\13\5\3\71\1\107\2\71\6\0"+
    "\7\71\1\110\1\71\2\0\1\71\1\75\12\71\6\0"+
    "\1\5\1\75\1\0\2\5\1\0\1\5\1\71\13\5"+
    "\1\111\5\71\6\0\7\71\1\112\1\71\2\0\1\71"+
    "\1\75\12\71\6\0\1\5\1\75\1\0\2\5\1\0"+
    "\1\5\1\71\13\5\3\71\1\113\2\71\6\0\11\71"+
    "\2\0\1\71\1\75\5\71\1\114\4\71\24\0\1\115"+
    "\32\0\1\116\116\0\1\5\1\75\1\0\2\5\1\0"+
    "\1\5\1\71\13\5\3\71\1\117\2\71\6\0\1\71"+
    "\1\120\7\71\2\0\1\71\1\75\12\71\6\0\1\5"+
    "\1\75\1\0\2\5\1\0\1\5\1\71\13\5\1\71"+
    "\1\121\4\71\6\0\11\71\2\0\1\71\1\75\12\71"+
    "\6\0\1\5\1\75\1\0\2\5\1\0\1\5\1\71"+
    "\13\5\1\122\5\71\6\0\11\71\2\0\1\71\1\75"+
    "\12\71\6\0\1\5\1\75\1\0\2\5\1\0\1\5"+
    "\1\71\13\5\1\123\3\71\1\124\1\71\6\0\5\71"+
    "\1\125\3\71\2\0\1\71\1\75\12\71\6\0\1\5"+
    "\1\75\1\0\2\5\1\0\1\5\1\71\13\5\6\71"+
    "\6\0\1\71\1\126\6\71\1\127\2\0\1\71\1\75"+
    "\12\71\6\0\1\5\1\75\1\0\2\5\1\0\1\5"+
    "\1\71\13\5\6\71\6\0\7\71\1\130\1\131\2\0"+
    "\1\71\1\75\12\71\6\0\1\5\1\75\1\0\2\5"+
    "\1\0\1\5\1\71\13\5\1\132\1\71\1\133\3\71"+
    "\6\0\5\71\1\134\3\71\2\0\1\71\1\75\12\71"+
    "\6\0\1\5\1\75\1\0\2\5\1\0\1\5\1\71"+
    "\13\5\1\71\1\135\4\71\6\0\5\71\1\136\3\71"+
    "\2\0\1\71\1\75\3\71\1\137\6\71\6\0\1\5"+
    "\1\75\1\0\2\5\1\0\1\5\1\71\13\5\1\71"+
    "\1\140\4\71\6\0\1\141\10\71\2\0\1\71\1\75"+
    "\12\71\37\0\1\142\42\0\1\5\1\75\1\0\2\5"+
    "\1\0\1\5\1\71\13\5\6\71\6\0\7\71\1\143"+
    "\1\71\2\0\1\71\1\75\12\71\6\0\1\5\1\75"+
    "\1\0\2\5\1\0\1\5\1\71\13\5\6\71\6\0"+
    "\7\71\1\144\1\71\2\0\1\71\1\75\12\71\6\0"+
    "\1\5\1\75\1\0\2\5\1\0\1\5\1\71\13\5"+
    "\6\71\6\0\7\71\1\145\1\71\2\0\1\71\1\75"+
    "\12\71\6\0\1\5\1\75\1\0\2\5\1\0\1\5"+
    "\1\71\13\5\6\71\6\0\11\71\2\0\1\71\1\75"+
    "\5\71\1\146\4\71\3\0\1\50\1\0\3\50\1\0"+
    "\64\50\2\0\1\50\1\0\3\50\1\0\1\73\1\147"+
    "\62\50\31\0\1\150\3\0\1\151\41\0\2\152\2\0"+
    "\1\152\67\0\2\153\2\0\1\153\67\0\2\154\2\0"+
    "\1\154\67\0\2\155\2\0\1\155\107\0\1\156\53\0"+
    "\2\157\2\0\1\157\67\0\2\160\2\0\1\160\67\0"+
    "\2\161\2\0\1\161\67\0\2\162\2\0\1\162\67\0"+
    "\2\163\2\0\1\163\13\0\1\164\53\0\2\165\2\0"+
    "\1\165\13\0\1\166\101\0\1\167\76\0\1\170\44\0"+
    "\2\71\1\0\2\71\1\0\23\71\6\0\11\71\2\0"+
    "\14\71\3\0\1\73\1\171\3\73\1\172\66\73\3\173"+
    "\2\174\1\173\1\174\1\175\1\173\1\174\1\176\13\174"+
    "\6\176\6\173\11\176\2\173\1\176\1\174\12\176\3\173"+
    "\4\0\1\177\21\0\1\177\1\0\1\177\11\0\1\177"+
    "\5\0\2\177\3\0\2\177\1\0\1\177\13\0\10\200"+
    "\1\0\63\200\56\0\1\201\21\0\1\202\21\0\1\202"+
    "\1\0\1\202\11\0\1\202\5\0\2\202\3\0\2\202"+
    "\1\0\1\202\16\0\2\71\1\0\2\71\1\0\22\71"+
    "\1\203\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\23\71\6\0\1\204\4\71\1\205\3\71"+
    "\2\0\14\71\6\0\2\71\1\0\2\71\1\0\16\71"+
    "\1\206\4\71\6\0\11\71\2\0\14\71\6\0\2\71"+
    "\1\0\2\71\1\0\15\71\1\207\5\71\6\0\1\210"+
    "\2\71\1\211\5\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\23\71\6\0\7\71\1\212\1\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\21\71\1\213"+
    "\1\71\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\16\71\1\214\4\71\6\0\11\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\22\71\1\215"+
    "\6\0\11\71\2\0\14\71\6\0\2\71\1\0\2\71"+
    "\1\0\23\71\6\0\3\71\1\216\5\71\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\23\71\6\0\10\71"+
    "\1\217\2\0\14\71\6\0\2\71\1\0\2\71\1\0"+
    "\20\71\1\220\2\71\6\0\10\71\1\221\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\20\71\1\222\2\71"+
    "\6\0\11\71\2\0\14\71\6\0\2\71\1\0\2\71"+
    "\1\0\23\71\6\0\11\71\2\0\1\223\13\71\6\0"+
    "\2\71\1\0\2\71\1\0\23\71\6\0\11\71\2\0"+
    "\4\71\1\224\7\71\6\0\2\71\1\0\2\71\1\0"+
    "\22\71\1\225\6\0\11\71\2\0\14\71\6\0\2\71"+
    "\1\0\2\71\1\0\23\71\6\0\4\71\1\226\4\71"+
    "\2\0\14\71\6\0\2\71\1\0\2\71\1\0\21\71"+
    "\1\227\1\71\6\0\4\71\1\230\1\231\3\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\21\71\1\232"+
    "\1\71\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\23\71\6\0\7\71\1\233\1\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\17\71\1\234"+
    "\3\71\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\23\71\6\0\4\71\1\235\4\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\23\71\6\0"+
    "\1\71\1\236\7\71\2\0\6\71\1\237\5\71\6\0"+
    "\2\71\1\0\2\71\1\0\23\71\6\0\4\71\1\240"+
    "\4\71\2\0\14\71\6\0\2\71\1\0\2\71\1\0"+
    "\23\71\6\0\11\71\2\0\11\71\1\241\2\71\6\0"+
    "\2\71\1\0\2\71\1\0\15\71\1\242\5\71\6\0"+
    "\11\71\2\0\14\71\6\0\2\71\1\0\2\71\1\0"+
    "\22\71\1\243\6\0\11\71\2\0\14\71\6\0\2\71"+
    "\1\0\2\71\1\0\23\71\6\0\10\71\1\244\2\0"+
    "\14\71\3\0\1\245\1\173\3\245\1\173\1\245\1\246"+
    "\62\245\2\173\1\0\2\247\2\0\1\247\67\0\2\250"+
    "\2\0\1\250\67\0\2\251\2\0\1\251\116\0\1\252"+
    "\44\0\2\253\2\0\1\253\67\0\1\171\72\0\7\173"+
    "\1\254\67\173\2\174\1\173\1\174\1\255\1\173\1\174"+
    "\1\176\13\174\6\176\6\173\11\176\2\173\1\176\1\174"+
    "\12\176\6\173\2\174\1\173\1\256\1\255\1\173\1\174"+
    "\1\176\13\174\6\176\6\173\11\176\2\173\1\176\1\174"+
    "\12\176\6\173\2\176\1\173\1\176\1\257\1\173\23\176"+
    "\6\173\11\176\2\173\14\176\3\173\4\0\1\260\21\0"+
    "\1\260\1\0\1\260\11\0\1\260\5\0\2\260\3\0"+
    "\2\260\1\0\1\260\71\0\1\261\21\0\1\262\21\0"+
    "\1\262\1\0\1\262\11\0\1\262\5\0\2\262\3\0"+
    "\2\262\1\0\1\262\16\0\2\71\1\0\2\71\1\0"+
    "\23\71\6\0\7\71\1\263\1\71\2\0\14\71\6\0"+
    "\2\71\1\0\2\71\1\0\23\71\6\0\11\71\2\0"+
    "\11\71\1\264\2\71\6\0\2\71\1\0\2\71\1\0"+
    "\17\71\1\265\3\71\6\0\11\71\2\0\14\71\6\0"+
    "\2\71\1\0\2\71\1\0\23\71\6\0\7\71\1\266"+
    "\1\71\2\0\14\71\6\0\2\71\1\0\2\71\1\0"+
    "\16\71\1\267\4\71\6\0\11\71\2\0\14\71\6\0"+
    "\2\71\1\0\2\71\1\0\23\71\6\0\10\71\1\270"+
    "\2\0\14\71\6\0\2\71\1\0\2\71\1\0\23\71"+
    "\6\0\4\71\1\271\4\71\2\0\14\71\6\0\2\71"+
    "\1\0\2\71\1\0\21\71\1\272\1\71\6\0\11\71"+
    "\2\0\14\71\6\0\2\71\1\0\2\71\1\0\23\71"+
    "\6\0\6\71\1\273\2\71\2\0\14\71\6\0\2\71"+
    "\1\0\2\71\1\0\16\71\1\274\4\71\6\0\11\71"+
    "\2\0\14\71\6\0\2\71\1\0\2\71\1\0\22\71"+
    "\1\275\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\23\71\6\0\4\71\1\276\4\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\23\71\6\0"+
    "\7\71\1\277\1\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\22\71\1\300\6\0\11\71\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\23\71\6\0\7\71"+
    "\1\301\1\71\2\0\14\71\6\0\2\71\1\0\2\71"+
    "\1\0\23\71\6\0\5\71\1\302\3\71\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\15\71\1\303\5\71"+
    "\6\0\11\71\2\0\14\71\6\0\2\71\1\0\2\71"+
    "\1\0\23\71\6\0\7\71\1\304\1\71\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\15\71\1\305\5\71"+
    "\6\0\11\71\2\0\14\71\6\0\2\71\1\0\2\71"+
    "\1\0\11\71\1\306\11\71\6\0\11\71\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\23\71\6\0\7\71"+
    "\1\307\1\71\2\0\14\71\6\0\2\71\1\0\2\71"+
    "\1\0\23\71\6\0\10\71\1\310\2\0\14\71\6\0"+
    "\2\71\1\0\2\71\1\0\23\71\6\0\3\71\1\311"+
    "\5\71\2\0\14\71\6\0\2\71\1\0\2\71\1\0"+
    "\23\71\6\0\11\71\2\0\12\71\1\312\1\71\6\0"+
    "\2\71\1\0\2\71\1\0\23\71\6\0\5\71\1\313"+
    "\3\71\2\0\14\71\3\0\1\245\1\173\3\245\1\173"+
    "\1\245\1\314\62\245\2\173\1\245\1\173\3\245\1\173"+
    "\1\315\1\314\62\245\2\173\1\0\2\316\2\0\1\316"+
    "\66\0\6\173\1\171\1\254\67\173\2\174\1\173\1\317"+
    "\1\255\1\173\1\174\1\176\13\174\6\176\6\173\11\176"+
    "\2\173\1\176\1\174\12\176\6\173\2\176\1\173\1\320"+
    "\1\257\1\173\23\176\6\173\11\176\2\173\14\176\3\173"+
    "\4\0\1\321\21\0\1\321\1\0\1\321\11\0\1\321"+
    "\5\0\2\321\3\0\2\321\1\0\1\321\71\0\1\322"+
    "\21\0\1\323\21\0\1\323\1\0\1\323\11\0\1\323"+
    "\5\0\2\323\3\0\2\323\1\0\1\323\16\0\2\71"+
    "\1\0\2\71\1\0\22\71\1\324\6\0\11\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\23\71\6\0"+
    "\7\71\1\325\1\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\23\71\6\0\10\71\1\326\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\15\71\1\327\5\71"+
    "\6\0\11\71\2\0\14\71\6\0\2\71\1\0\2\71"+
    "\1\0\23\71\6\0\5\71\1\330\3\71\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\22\71\1\331\6\0"+
    "\11\71\2\0\14\71\6\0\2\71\1\0\2\71\1\0"+
    "\11\71\1\332\11\71\6\0\11\71\2\0\14\71\6\0"+
    "\2\71\1\0\2\71\1\0\22\71\1\333\6\0\11\71"+
    "\2\0\14\71\6\0\2\71\1\0\2\71\1\0\22\71"+
    "\1\334\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\21\71\1\335\1\71\6\0\11\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\23\71\6\0"+
    "\5\71\1\336\3\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\21\71\1\337\1\71\6\0\11\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\16\71\1\340"+
    "\4\71\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\23\71\6\0\10\71\1\341\2\0\14\71"+
    "\6\0\2\71\1\0\2\71\1\0\23\71\6\0\10\71"+
    "\1\342\2\0\14\71\6\0\2\71\1\0\2\71\1\0"+
    "\23\71\6\0\7\71\1\343\1\71\2\0\14\71\3\0"+
    "\1\245\1\173\3\245\1\173\1\344\1\314\62\245\2\173"+
    "\4\0\1\345\21\0\1\345\1\0\1\345\11\0\1\345"+
    "\5\0\2\345\3\0\2\345\1\0\1\345\71\0\1\346"+
    "\21\0\1\347\21\0\1\347\1\0\1\347\11\0\1\347"+
    "\5\0\2\347\3\0\2\347\1\0\1\347\16\0\2\71"+
    "\1\0\2\71\1\0\23\71\6\0\7\71\1\350\1\71"+
    "\2\0\14\71\6\0\2\71\1\0\2\71\1\0\16\71"+
    "\1\351\4\71\6\0\11\71\2\0\14\71\6\0\2\71"+
    "\1\0\2\71\1\0\22\71\1\352\6\0\11\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\20\71\1\353"+
    "\2\71\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\23\71\6\0\5\71\1\354\3\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\21\71\1\355"+
    "\1\71\6\0\11\71\2\0\14\71\6\0\2\71\1\0"+
    "\2\71\1\0\11\71\1\356\11\71\6\0\11\71\2\0"+
    "\14\71\6\0\2\71\1\0\2\71\1\0\22\71\1\357"+
    "\6\0\11\71\2\0\14\71\6\0\2\71\1\0\2\71"+
    "\1\0\23\71\6\0\1\360\10\71\2\0\14\71\6\0"+
    "\2\71\1\0\2\71\1\0\16\71\1\361\4\71\6\0"+
    "\11\71\2\0\14\71\61\0\1\362\21\0\1\363\21\0"+
    "\1\363\1\0\1\363\11\0\1\363\5\0\2\363\3\0"+
    "\2\363\1\0\1\363\16\0\2\71\1\0\2\71\1\0"+
    "\23\71\6\0\11\71\2\0\12\71\1\364\1\71\6\0"+
    "\2\71\1\0\2\71\1\0\22\71\1\365\6\0\11\71"+
    "\2\0\14\71\6\0\2\71\1\0\2\71\1\0\16\71"+
    "\1\366\4\71\6\0\11\71\2\0\14\71\6\0\2\71"+
    "\1\0\2\71\1\0\23\71\6\0\11\71\2\0\10\71"+
    "\1\367\3\71\61\0\1\370\21\0\1\371\21\0\1\371"+
    "\1\0\1\371\11\0\1\371\5\0\2\371\3\0\2\371"+
    "\1\0\1\371\16\0\2\71\1\0\2\71\1\0\23\71"+
    "\6\0\10\71\1\372\2\0\14\71\61\0\1\373\21\0"+
    "\1\374\21\0\1\374\1\0\1\374\11\0\1\374\5\0"+
    "\2\374\3\0\2\374\1\0\1\374\16\0\2\71\1\0"+
    "\2\71\1\0\16\71\1\375\4\71\6\0\11\71\2\0"+
    "\14\71\61\0\1\376\21\0\1\377\21\0\1\377\1\0"+
    "\1\377\11\0\1\377\5\0\2\377\3\0\2\377\1\0"+
    "\1\377\71\0\1\u0100\73\0\1\u0101\73\0\1\u0102\73\0"+
    "\1\u0103\73\0\1\u0104\73\0\1\u0105\73\0\1\u0106\73\0"+
    "\1\u0107\73\0\1\u0108\73\0\1\u0109\73\0\1\u010a\73\0"+
    "\1\u010b\73\0\1\u010c\73\0\1\u010d\73\0\1\u010e\73\0"+
    "\1\u010f\73\0\1\u0110\73\0\1\u0111\73\0\1\u0112\73\0"+
    "\1\u0113\73\0\1\u0114\73\0\1\u0115\73\0\1\u0116\73\0"+
    "\1\u0117\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\0\1\1\2\0\3\1\1\0\5\1"+
    "\5\11\12\1\1\11\4\1\2\11\2\1\1\11\1\1"+
    "\15\0\3\1\1\0\2\1\2\11\2\0\1\11\2\0"+
    "\7\1\2\11\23\1\1\11\5\1\6\11\1\0\5\11"+
    "\1\0\1\11\3\0\1\11\1\1\3\0\1\1\1\0"+
    "\1\11\46\1\3\11\1\0\1\11\2\0\2\1\1\0"+
    "\35\1\1\11\2\1\1\0\23\1\1\11\31\1\1\11"+
    "\27\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }

    StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FnPlotLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //skip newline, but reset char counter
			yycolumn = 0;
            }
          case 90: break;
          case 2: 
            { //skip whitespace
            }
          case 91: break;
          case 3: 
            { // INTEGER
	       			return new Symbol(sym.INTEGER, new Double(yytext()));
            }
          case 92: break;
          case 4: 
            { // VARIABLE
	    				return new Symbol(sym.VARIABLE, yytext());
            }
          case 93: break;
          case 5: 
            { return new Symbol(sym.MINUS);
            }
          case 94: break;
          case 6: 
            { return new Symbol(sym.QUESTION);
            }
          case 95: break;
          case 7: 
            { return new Symbol(sym.COLON);
            }
          case 96: break;
          case 8: 
            { return new Symbol(sym.LPAREN);
            }
          case 97: break;
          case 9: 
            { return new Symbol(sym.RPAREN);
            }
          case 98: break;
          case 10: 
            { return new Symbol(sym.LBRACE);
            }
          case 99: break;
          case 11: 
            { return new Symbol(sym.RBRACE);
            }
          case 100: break;
          case 12: 
            { return new Symbol(sym.COMMA);
            }
          case 101: break;
          case 13: 
            { return new Symbol(sym.LSQR);
            }
          case 102: break;
          case 14: 
            { return new Symbol(sym.RSQR);
            }
          case 103: break;
          case 15: 
            { return new Symbol(sym.SEMI);
            }
          case 104: break;
          case 16: 
            { string.setLength(0); yybegin(STRING);
            }
          case 105: break;
          case 17: 
            { string.append( yytext() );
            }
          case 106: break;
          case 18: 
            { yybegin(YYINITIAL); return new Symbol(sym.STRING, string.toString());
            }
          case 107: break;
          case 19: 
            { string.append('\\');
            }
          case 108: break;
          case 20: 
            { // FLOAT
	       			return new Symbol(sym.INTEGER, 
				new Double(yytext()));
            }
          case 109: break;
          case 21: 
            { /* ignore */
            }
          case 110: break;
          case 22: 
            { return new Symbol(sym.MAPS);
            }
          case 111: break;
          case 23: 
            { return new Symbol(sym.BOOL, new Boolean(true));
            }
          case 112: break;
          case 24: 
            { return new Symbol(sym.BOOL, new Boolean(false));
            }
          case 113: break;
          case 25: 
            { return new Symbol(sym.EMPTY);
            }
          case 114: break;
          case 26: 
            { return new Symbol(sym.DO);
            }
          case 115: break;
          case 27: 
            { return new Symbol(sym.TO);
            }
          case 116: break;
          case 28: 
            { return new Symbol(sym.ASSIGN);
            }
          case 117: break;
          case 29: 
            { return new Symbol(sym.RVEC);
            }
          case 118: break;
          case 30: 
            { return new Symbol(sym.IN);
            }
          case 119: break;
          case 31: 
            { return new Symbol(sym.IF);
            }
          case 120: break;
          case 32: 
            { return new Symbol(sym.LVEC);
            }
          case 121: break;
          case 33: 
            { string.append('\n');
            }
          case 122: break;
          case 34: 
            { string.append('\t');
            }
          case 123: break;
          case 35: 
            { return new Symbol(sym.DIV);
            }
          case 124: break;
          case 36: 
            { return new Symbol(sym.MUL);
            }
          case 125: break;
          case 37: 
            { return new Symbol(sym.PLUS);
            }
          case 126: break;
          case 38: 
            { return new Symbol(sym.SUBTRACT);
            }
          case 127: break;
          case 39: 
            { return new Symbol(sym.CONCAT);
            }
          case 128: break;
          case 40: 
            { return new Symbol(sym.MOD);
            }
          case 129: break;
          case 41: 
            { return new Symbol(sym.POW);
            }
          case 130: break;
          case 42: 
            { return new Symbol(sym.COMPARISON, "equal");
            }
          case 131: break;
          case 43: 
            { return new Symbol(sym.COMPARE, "<");
            }
          case 132: break;
          case 44: 
            { return new Symbol(sym.COMPARE, ">");
            }
          case 133: break;
          case 45: 
            { return new Symbol(sym.CHAR, yytext());
            }
          case 134: break;
          case 46: 
            { return new Symbol(sym.BIN, yytext());
            }
          case 135: break;
          case 47: 
            { return new Symbol(sym.HEX, yytext());
            }
          case 136: break;
          case 48: 
            { return new Symbol(sym.LOGOP, "not");
            }
          case 137: break;
          case 49: 
            { return new Symbol(sym.DEF);
            }
          case 138: break;
          case 50: 
            { return new Symbol(sym.PARAMETER, yytext());
            }
          case 139: break;
          case 51: 
            { return new Symbol(sym.FOR);
            }
          case 140: break;
          case 52: 
            { return new Symbol(sym.FUN);
            }
          case 141: break;
          case 53: 
            { return new Symbol(sym.LET);
            }
          case 142: break;
          case 54: 
            { return new Symbol(sym.CAR);
            }
          case 143: break;
          case 55: 
            { return new Symbol(sym.CDR);
            }
          case 144: break;
          case 56: 
            { return new Symbol(sym.END);
            }
          case 145: break;
          case 57: 
            { return new Symbol(sym.COMPARISON, "not equal");
            }
          case 146: break;
          case 58: 
            { return new Symbol(sym.COMPARE, "<=");
            }
          case 147: break;
          case 59: 
            { return new Symbol(sym.COMPARE, ">=");
            }
          case 148: break;
          case 60: 
            { return new Symbol(sym.LOGOP, "or");
            }
          case 149: break;
          case 61: 
            { return new Symbol(sym.READ);
            }
          case 150: break;
          case 62: 
            { return new Symbol(sym.THEN);
            }
          case 151: break;
          case 63: 
            { return new Symbol(sym.PAIR);
            }
          case 152: break;
          case 64: 
            { return new Symbol(sym.PROC);
            }
          case 153: break;
          case 65: 
            { return new Symbol(sym.PLOT);
            }
          case 154: break;
          case 66: 
            { return new Symbol(sym.SIZE);
            }
          case 155: break;
          case 67: 
            { return new Symbol(sym.LIST);
            }
          case 156: break;
          case 68: 
            { return new Symbol(sym.CASE);
            }
          case 157: break;
          case 69: 
            { return new Symbol(sym.CALL);
            }
          case 158: break;
          case 70: 
            { return new Symbol(sym.ELSE);
            }
          case 159: break;
          case 71: 
            { return new Symbol(sym.EQV);
            }
          case 160: break;
          case 72: 
            { return new Symbol(sym.LOGOP, "and");
            }
          case 161: break;
          case 73: 
            { return new Symbol(sym.RANGE);
            }
          case 162: break;
          case 74: 
            { return new Symbol(sym.UNTIL);
            }
          case 163: break;
          case 75: 
            { return new Symbol(sym.PAIRQ);
            }
          case 164: break;
          case 76: 
            { return new Symbol(sym.PRINT);
            }
          case 165: break;
          case 77: 
            { return new Symbol(sym.CLEAR);
            }
          case 166: break;
          case 78: 
            { return new Symbol(sym.BEGIN);
            }
          case 167: break;
          case 79: 
            { return new Symbol(sym.WHILE);
            }
          case 168: break;
          case 80: 
            { return new Symbol(sym.UNI, yytext());
            }
          case 169: break;
          case 81: 
            { return new Symbol(sym.REPEAT);
            }
          case 170: break;
          case 82: 
            { return new Symbol(sym.SUBSTR);
            }
          case 171: break;
          case 83: 
            { return new Symbol(sym.EQUAL);
            }
          case 172: break;
          case 84: 
            { return new Symbol(sym.INSERT);
            }
          case 173: break;
          case 85: 
            { return new Symbol(sym.GETMIN);
            }
          case 174: break;
          case 86: 
            { return new Symbol(sym.READINT);
            }
          case 175: break;
          case 87: 
            { return new Symbol(sym.PRINTLN);
            }
          case 176: break;
          case 88: 
            { return new Symbol(sym.HEAPIFY);
            }
          case 177: break;
          case 89: 
            { return new Symbol(sym.DELETEMIN);
            }
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
